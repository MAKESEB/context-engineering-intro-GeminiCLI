{
  "rev": 23,
  "base": {
    "aws": {
      "key": "{{connection.key}}",
      "secret": "{{connection.secret}}",
      "sign_version": 4
    },
    "log": {
      "sanitize": []
    },
    "baseUrl": "https://s3.{{parameters.region}}.amazonaws.com",
    "response": {
      "error": {
        "403": {
          "type": "InvalidAccessTokenError",
          "message": "{{ifempty(body.Error.Message[], '[' + statusCode + '] ' + body) + '\n\n' + 'This region may not be enabled in your account. You can check it by logging in as root and going to this page: https://console.aws.amazon.com/billing/home#/account'}}"
        },
        "message": "{{ifempty(body.Error.Message[], '[' + statusCode + '] ' + body)}}"
      },
      "valid": "{{!body.Error}}"
    }
  },
  "beta": false,
  "docs": null,
  "name": "aws-s3",
  "_rpcs": {
    "getRegions": {
      "api": {
        "response": {
          "output": [
            {
              "label": "US West (N. California)",
              "value": "us-west-1"
            },
            {
              "label": "US West (Oregon)",
              "value": "us-west-2"
            },
            {
              "label": "US East (N. Virginia)",
              "value": "us-east-1"
            },
            {
              "label": "US East (Ohio)",
              "value": "us-east-2"
            },
            {
              "label": "AWS GovCloud (US-West)",
              "value": "us-gov-west-1"
            },
            {
              "label": "AWS GovCloud (US-East)",
              "value": "us-gov-east-1"
            },
            {
              "label": "Canada (Central)",
              "value": "ca-central-1"
            },
            {
              "label": "Canada West (Calgary)",
              "value": "ca-west-1"
            },
            {
              "label": "Europe (Frankfurt)",
              "value": "eu-central-1"
            },
            {
              "label": "Europe (Zurich)",
              "value": "eu-central-2"
            },
            {
              "label": "Europe (Ireland)",
              "value": "eu-west-1"
            },
            {
              "label": "Europe (London)",
              "value": "eu-west-2"
            },
            {
              "label": "Europe (Paris)",
              "value": "eu-west-3"
            },
            {
              "label": "Europe (Stockholm)",
              "value": "eu-north-1"
            },
            {
              "label": "Europe (Milan)",
              "value": "eu-south-1"
            },
            {
              "label": "Europe (Spain)",
              "value": "eu-south-2"
            },
            {
              "label": "Asia Pacific (Tokyo)",
              "value": "ap-northeast-1"
            },
            {
              "label": "Asia Pacific (Seoul)",
              "value": "ap-northeast-2"
            },
            {
              "label": "Asia Pacific (Osaka)",
              "value": "ap-northeast-3"
            },
            {
              "label": "Asia Pacific (Hong Kong)",
              "value": "ap-east-1"
            },
            {
              "label": "Asia Pacific (Singapore)",
              "value": "ap-southeast-1"
            },
            {
              "label": "Asia Pacific (Sydney)",
              "value": "ap-southeast-2"
            },
            {
              "label": "Asia Pacific (Jakarta)",
              "value": "ap-southeast-3"
            },
            {
              "label": "Asia Pacific (Melbourne)",
              "value": "ap-southeast-4"
            },
            {
              "label": "Asia Pacific (Malaysia)",
              "value": "ap-southeast-5"
            },
            {
              "label": "Asia Pacific (Mumbai)",
              "value": "ap-south-1"
            },
            {
              "label": "Asia Pacific (Hyderabad)",
              "value": "ap-south-2"
            },
            {
              "label": "Middle East (UAE)",
              "value": "me-central-1"
            },
            {
              "label": "Middle East (Bahrain)",
              "value": "me-south-1"
            },
            {
              "label": "Israel (Tel Aviv)",
              "value": "il-central-1"
            },
            {
              "label": "Africa (Cape Town)",
              "value": "af-south-1"
            },
            {
              "label": "South America (São Paulo)",
              "value": "sa-east-1"
            }
          ]
        }
      },
      "rev": 4,
      "name": "getRegions",
      "label": "getRegions",
      "appName": "aws-s3",
      "apiJsonc": "{\n    \"response\": {\n        \"output\": [\n            {\n                \"label\": \"US West (N. California)\",\n                \"value\": \"us-west-1\"\n            },\n            {\n                \"label\": \"US West (Oregon)\",\n                \"value\": \"us-west-2\"\n            },\n            {\n                \"label\": \"US East (N. Virginia)\",\n                \"value\": \"us-east-1\"\n            },\n            {\n                \"label\": \"US East (Ohio)\",\n                \"value\": \"us-east-2\"\n            },\n            {\n                \"label\": \"AWS GovCloud (US-West)\",\n                \"value\": \"us-gov-west-1\"\n            },\n            {\n                \"label\": \"AWS GovCloud (US-East)\",\n                \"value\": \"us-gov-east-1\"\n            },\n            {\n                \"label\": \"Canada (Central)\",\n                \"value\": \"ca-central-1\"\n            },\n            {\n                \"label\": \"Canada West (Calgary)\",\n                \"value\": \"ca-west-1\"\n            },\n            {\n                \"label\": \"Europe (Frankfurt)\",\n                \"value\": \"eu-central-1\"\n            },\n            {\n                \"label\": \"Europe (Zurich)\",\n                \"value\": \"eu-central-2\"\n            },\n            {\n                \"label\": \"Europe (Ireland)\",\n                \"value\": \"eu-west-1\"\n            },\n            {\n                \"label\": \"Europe (London)\",\n                \"value\": \"eu-west-2\"\n            },\n            {\n                \"label\": \"Europe (Paris)\",\n                \"value\": \"eu-west-3\"\n            },\n            {\n                \"label\": \"Europe (Stockholm)\",\n                \"value\": \"eu-north-1\"\n            },\n            {\n                \"label\": \"Europe (Milan)\",\n                \"value\": \"eu-south-1\"\n            },\n            {\n                \"label\": \"Europe (Spain)\",\n                \"value\": \"eu-south-2\"\n            },\n            {\n                \"label\": \"Asia Pacific (Tokyo)\",\n                \"value\": \"ap-northeast-1\"\n            },\n            {\n                \"label\": \"Asia Pacific (Seoul)\",\n                \"value\": \"ap-northeast-2\"\n            },\n            {\n                \"label\": \"Asia Pacific (Osaka)\",\n                \"value\": \"ap-northeast-3\"\n            },\n            {\n                \"label\": \"Asia Pacific (Hong Kong)\",\n                \"value\": \"ap-east-1\"\n            },\n            {\n                \"label\": \"Asia Pacific (Singapore)\",\n                \"value\": \"ap-southeast-1\"\n            },\n            {\n                \"label\": \"Asia Pacific (Sydney)\",\n                \"value\": \"ap-southeast-2\"\n            },\n            {\n                \"label\": \"Asia Pacific (Jakarta)\",\n                \"value\": \"ap-southeast-3\"\n            },\n            {\n                \"label\": \"Asia Pacific (Melbourne)\",\n                \"value\": \"ap-southeast-4\"\n            },\n            {\n                \"label\": \"Asia Pacific (Malaysia)\",\n                \"value\": \"ap-southeast-5\"\n            },\n            {\n                \"label\": \"Asia Pacific (Mumbai)\",\n                \"value\": \"ap-south-1\"\n            },\n            {\n                \"label\": \"Asia Pacific (Hyderabad)\",\n                \"value\": \"ap-south-2\"\n            },\n            {\n                \"label\": \"Middle East (UAE)\",\n                \"value\": \"me-central-1\"\n            },\n            {\n                \"label\": \"Middle East (Bahrain)\",\n                \"value\": \"me-south-1\"\n            },\n            {\n                \"label\": \"Israel (Tel Aviv)\",\n                \"value\": \"il-central-1\"\n            },\n            {\n                \"label\": \"Africa (Cape Town)\",\n                \"value\": \"af-south-1\"\n            },\n            {\n                \"label\": \"South America (São Paulo)\",\n                \"value\": \"sa-east-1\"\n            }\n        ]\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": null,
      "altAccountName": null,
      "parametersJsonc": null
    },
    "listBuckets": {
      "api": {
        "url": "/",
        "method": "GET",
        "response": {
          "output": {
            "label": "{{item.Name[]}}",
            "value": "{{item.Name[]}}"
          },
          "iterate": "{{body.ListAllMyBucketsResult.Buckets[].Bucket}}"
        }
      },
      "rev": 3,
      "name": "listBuckets",
      "label": "List Buckets",
      "appName": "aws-s3",
      "apiJsonc": "{\n\t\"url\": \"/\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"iterate\": \"{{body.ListAllMyBucketsResult.Buckets[].Bucket}}\",\n\t\t\"output\": {\n\t\t\t\"label\": \"{{item.Name[]}}\",\n\t\t\t\"value\": \"{{item.Name[]}}\"\n\t\t}\n\t}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "aws",
      "altAccountName": null,
      "parametersJsonc": null
    }
  },
  "flags": {},
  "label": "AWS S3",
  "theme": "#e45d4c",
  "_hooks": {},
  "global": true,
  "groups": [
    {
      "label": "Other",
      "modules": [
        "createBucket",
        "getFile",
        "listFiles",
        "ListFolders",
        "uploadFile",
        "request"
      ]
    }
  ],
  "icon32": "\\x89504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af400000006624b474400ff00ff00ffa0bda793000002914944415458c3edd7cb4e14511006e0af4102014413c410e31d63342a4689978526e2da17d0f770e10bf844c68d21ba3331448c2b632278bf252278614006dac539ed3433c3c041221b2be9ccf44c9faabfaafef39f6ab6d8b2d405799e175f7b700ed378865f9065692ed7fd745de04bb88153b887a7788c17a940b62516e0046ee202baf103ed3882837889317c5cafc3b6440067308a4e2ca1284b1e93398abd290e5301e4586ef1fff27a1d15f6a705753d3e8b9f788759cc9700b4029715cfe4799ea1177b3084b79a90b59e033b713b96fa3ebe62069ff01a03e520a58a2c0b5ce812dab01fc33826b4a40b0ff008775069a840b43e8c083d2610ad273a398d9331ab6aa9dc0762f0dde8c735354ee4f19a8ff7fb22985501e41ac955ee6d158bd81e1db545a7e2ef1541172af1d9ac89ffe61c58c30a4793f8125bd58fc1589d252cc4fe2ed6ad6969293a9045e79f054ee4b112a3b155cd006f2a803c06da25f0a2173be25510b34cca4daf408e4331e376a1ffb9a086d5d2730b12f420558adb4b6b8a6c0b62251f6ca42be1a6db7f00a90096d5842aab5b5fec82244bd581497cb7721b0ed401483a115301cc61aa14ac0f57fc4321ea8859efd45a8a375d888a8c87705590e04e8103851654d50ea339359e2401c804b1c94af7c5b558faff5b0c5cc578fc1c1064bac8be432331b3b500cce2a1306ee702e1a6f101af84e1e46229484518446762353a31214c53c3382ecc0bddb13d536ad3d5aa006e09e37605ef63b6c5113bd2249336b5ed580419c7dd18781087a3afe7569e1b3500a539be228c4e2b4990afbac59b9e05d1df9cb07527575b9c2a44d91a6bda241e4aa90026846175412359ab4289dfa466b42eab1bdb2fe3bac095313cb1c157b3bf7d393d2fcc881b7e39dd72fb0d2aa7c44f2567a4950000000049454e44ae426082",
  "icon64": "\\x89504e470d0a1a0a0000000d4948445200000040000000400806000000aa6971de00000006624b474400ff00ff00ffa0bda793000005694944415478daed9b4b6f1c4510c77fb3bb5e6fc26e9cc4262184049c20b0c2eb00070e20119038838410884f12943b9f2891404a848003201e42020994f070880d8690e018f03e66b73954b5a6ddd9997dd83de3d56e49a3b1c6dbd3f5ff77757575570dcc64ba252aa253638cfdf33ea0076c034451feeae4daa303bc019c075e03be06ae02d78156de44540a00fe12f036f0ac3edb020e01bf025f01d78c31b9111194800ce035a00b3491295006ce00a7811b79121184802180c7ec9c7ea62822425a4005b800bc01cc7bc0fb21b1cf5c221e467cc4657dbee7520a4cc0b2828f3d9059e21251019642ea1992000b6258e0fd8830041af9bc08d8f732f5040ce5041daf5e434cb20dc5446e03f43ba0fa0dbd6a6412e02d672f23d1db7748d0b26e8cd900fe1ea5c33d065c074e008f014feafd1be00a707d98e5b332a09339e055e01de0396013f817384912c3df017e7708b903fce7bf8ed11da16d63d146c69886f6bda28057808780c3aa6bac83d1006e025f00df1b63ba69240c9a022780778153c83ade55e03d55ee20b2a139a5cf9a4ad206f01712e2da75df78eff63532debd8498f432f0a6827d5c0938a4ba1be772f5ab006781a3c0ba0eca580494f5ea0e1829ab744d957e40db9d56823a8e825d0f6c4fef656dbb00dc0f1c03169138625b097197453f9af475ea699b4c473f8800c3e8620929ab8225a0eabcabe7fc7d007806b19c45e088125675c0b59029e5031e764a656208bd1b74cdbfacfd55482c0be0b8434c0759613a1e51c12424013de03662ce0d647a6499a325655e81b711cb684d32011f233bba05c4c497484cbdae604b241ba5b65e2de7ef988096108a006bf616cc6de0277d5e41aca18198ff53fadc3a4a93f2be8922c055dadff7779158620b59324f228ecff4691b5cf2dc0b8c62c6c19d9f959016e0c60720a35a4622b62a320d8e903847f7f77e5bdb7e6208b061ec8348345677ae830abaaa646c93383affea39d738e1746104808cf6f3c8b1563f82dc3ba44fc718590e834868276841ed664e077588537f203223a068058a961901452b50b4cc08285a01720c7bf72b0185cad413107a3394961bdc373bc3d027429f21a52f699ba1b2f7fbb4cdd0c41110a9e237f502996e763b3c4fb21d3ea7cffc43d089de0e5b85add2764463bdb615f02692f8b0e701c101fb9297134cab0ac9fa7d2e12da09faf712c9a1681dc9202deaff6d2ea05f3e60e20e45ede9cd1c72e0e91e8b2f21c9ccba1211911c8b779053647b2cde7188094244480b28012f2249cd06490e204d0ff7b8dc66899ac05dc45704590e4313705481b714909b1a2bb1336b6c9da44d88d81c41507f103a37e8aee9d6c4ddf47a05f811a92f5850c2dc34daa8ce73cf0918b7bacb9dd716b89bbfb7a3de013e05fe20c90b36107f710cc92bce6b9b396d336ad23413c32002ac4996e91f91b92fef20199f5bc01a920e7b5ac1c4296ded657d430b99f77f023f28f84de05bc4979c031e412cc5a6d0d3568d92f69b55db309080df808b4889cc0b2473b7a480b71cc0ebaaf83fda710d2d8327bb90c127d30d9e3aaac3fbc0257de771e051e00925641959596a8e7e6de067a444e6ee58044451843126063e023e47cef85fd1915955c0b71470d7b6811d454cbb99bff7e416a3286a02abc69855a410aa8a4c93b34ac80a52c47515f8450762bc22290f5013f810f88424c15958999cd36f1b5833c6ac21033547e270775f26d7a7c37898df8f28bb5edf1dfd3aa3b69dfa0391190181dfef7af451c54681139b1b8c91a5a84de26b8621c22d948c9182cb60a7422143e118780f89f4de62e727337e192cce330bfc06f025702d240141cd6b886f875ac00748d4d80f78f022ec5c16f20c222224cadb402ad073039e2b0129449c075e473e8aba42411f4e4efda7b3339976f91fa99dd171ad0239f10000000049454e44ae426082",
  "origin": "eu1.make.com",
  "public": true,
  "compile": false,
  "created": "2022-09-01T13:30:14.208214+00:00",
  "icon128": "\\x89504e470d0a1a0a0000000d4948445200000080000000800806000000c33e61cb00000006624b474400ff00ff00ffa0bda79300000a704944415478daed9dcf731c4715c73fb3fa69c9b2645b89218e03899d5fd8501008370a178724a7141c08c91fc18d0bff13272e50a40a287e5c02712838c436650226fea5c48e14e3d89276b739bc7e356f5bb3abd5eeac573ddddfaaa9dd957666a7fb7dfa75f7eb9e6ec8cacacacacacacaca4a4ec5b46f601a72cee9dbe34007f81ca028d2cb8ea4526c0c7f12781df8217009f80d70057800698190444a03c3bf06bc055cf07f7b17b809dc063e002e931008b3d3be81496a80e1e7802eb0e35f0be069e0cbc0b7f02038e71a0f42230118c2f01df67abf2ed02231101a05c0010c5f6549fd5b5220340280310d1f2a2910a206a066c3874a0284280198b0e143351a84e80030c6ff01f0532667f8508340f80370d539171d04ad69dfc018ba087c0798410c0f8f27ae1182f00c706eda9931aa6206a0eb0f984e40cb82e0c6b9d0341533005935280390b83200892b0390b83200892b0390b83200892b0390b826120a36e1da23c02ed0863863e5d390c9bf7924d2f91026937fb502100cd2bc81c4c9ff06dc006e39e73e412660ee4e2a4131cae4db22f024701638ef8f8f815f01572631e8540b007d46e7be015c47e6d79d43bcc003e02e32ffeea6736e03d802b6eb4ed86196c9af25e04b3e7f2e002f035ff5f9b8e0bff33e52557f1b99c05aebe8e35800ec332ceb90411a8d95cf00c78055e039ffbf2f80cf2881b8036c028ffc398d80c2e753012c034f012f20a5fb656430e938e2ee0b935ff6d5ce597c851a411819009fa845e04de01df60ecbf66b602a352de028b0e233a18b187e13b8839fa9eb9cbb87d4815d229029140502fc69e0459f3f2f21865ca32c247aec97be7018fa15c43bfcdd39d71e158271ab8067809f01a710a38f321eaf3956208dc6259f69df44aa862d6003b8e58fbbc0ff2aced76b3c0eb98acf2dc4b06710439f470c7f1a0161965e837786fcad306d0ac219c49bfe17f864d4848c0b40cb1f750ecb6a0681d483a7907af202328dfbbe4ff059ca4ced06e7859956c73d85ef6710608f230f995c049e474ae78affbf2dd90735783f59100ac6eccac73023c81a761e58f7c719c45b742a8e7181a832f8acffbd35e009a4b57e02a9c6da487b6612069fa86200209466b06d4bb4e8ad53b51dd2f6afd6f5aa42189c792d7cde2c23067f1231fa09ffb75973bec3c43a88ec69ab180118246d7fb47cdae6e90522f410b3484356bfbf8c18590dbe8694fa397ffd2acf10b59a0680956d5cce50965a05448dfe26d2a62810773e4f59afbae0b5716a1a005575fe0c2500fa5eff0752d29f30e7b7fdb1eb0f3bf730bc76f46a020061bdde62afc10ff254d09c3f16d90b44d8a660c8eb1e5ac50c80ed02a93b57a3b7cc77c6b97e815409b62d11021175f5103300379006db492420b240e9de27215b9dcc239e601be9fe45d1e5ab528c001448a9bb0a5c435cf50a1290d118c10924fa760471e7a37a0275f55aea7710a36ffbf7b64ad07b8b4a31020025046d242c7c1ff1085a2d2c20ddb755c443acfbd7e348576f91de76811a506307bbf41a5addfda08740a2333ec40b00f466b835a44306951e22e306d728db08ea2db4ea3885846edbec2dd5dd217f3b6ac50c40958a3eefabbc05080c17116fe1f6b95e23d53400fa6990b7a8fa4e324a7d52689246b74a1d80e49501485c4d6f03b8019f1dc38fee35b6aa881d00b7cf673b34acf1fd23482c40c7fa57cdb97642870bfe3e48d10212330076428886673500b4840cedeab18c187e81f2610b1d127e809f961e5cd70211beaffa5e9410c4088066fc579039f4cb94460f0ddc6fd68fbeb7062d82d77ebfeb2aced708e2a0f30fa5620440751679f2c846ecf6ab12c65115203af864a78445a59801084b70d608caddc0c49501485c1980c49501485c1980c49501485c1980c4bb911980c49501485c1980c49501485c2903a0cf1624ad9401c8220390bc3200892b0390b83200892b0390b83200892b0390b83200892b6600f4a99f71378b4e3a1a18f3b4f08ffcab3e18a24ffeccd1bb52986a5c43573d5768d7108a523102a031fc8ffca16b02ce23cffe858f851da504641e01441f0bab5a2748df876bf9bb8ac39e17d51341aa180180de811c5dff771bd98fc8ca2e243d4fb91fc13202c62ab28014541b59951f0e3d842af6f99bdd98a1832c1cb5157cff2883d7081af45b8d50cc00eca76100d9effb8d57ccbd80ac1a9401485ca90390740c009add06b0eab73650abcf77548d6f17340d80aaae9b6ee9368b74038f512e2cad3b92d9a56277e9dd56a64a8d01236600aa4ab52ee93e8ff4f5ed62d1ebc8a250cb48c4b02a52a8fb01ecd0bb3278b8587463bc45ac0058630f5a2e7e89de1dbe06c9ee07b0607e476309bb0c5e2e3eca85a26204404bdf0bc0d71183af52eefe55a7ec26537308507a0f1d04822f900093ee1b1815043102a03a8dac14a6ae7bc7a7a78e11c22a85dec06e1933c99d4a26aa980150c3eb9e803bf46e0767f70f1a67c7902ea5c16d03511555890f1533002a3b9aa740b4d9bb83d8b0de41cfb7a5bcaa4710b5e1554d00405565101d08da35dfb13d8559ffffcffca15dc5706bd87ed78f5e4d0220545845841b3ccd200dbb4bc087c81633b348efe124b27decbaffbc4859cf372a7ad82400c22a404b7fbf7ebbee04761b9947d0f2dfdff0c765c44bac2040e80ea3ab889788b6e167151b00eac2ed4c1d6d98ed67f07eeb0617f4b60bacebdf013ef5c755c4631ca5dc607a1d893f684fa060ef82d287baea38ec00a861ba48f0650b299d3790cc3f47f5ee9d75647a1510bbc03d7f5c43f26fc5dfd326701e780ef1145a6d1c6a20c60560179969334369883ab66bedfaeb6e521afc1692f11a707983f12270075d1fa00a883602e525e0d74895b10e3c0b7c0d01e22c32e6b0e4f3c9ee49308a34bd2dcaaa6e648d0bc07f809f03ef00df431a4cea86870dbf42afc16f0337fdeb3da471e6008aa2c039179e3bad12657f5f23903b4551dc74cedd04fe8ce4ef0964597b05e27964006a998301610dff08f817f0579f47236b6400bc31dac01f81bf00af026f2320ac52bd259b35f843a4eb751b29e177fce7471883c72873df6d60c339b701bc87187c0d8960be045c4042da4f216d8b59aa81080dff3ef06f7ffdb1f2692c0fa03fec9c7b8480f01ef05de027c0f72923716dc4e0f7e835f8a64fd4348d3df16e9d495b07b8eb9cbb8b541b2da4b03c4d09c48b4898fb18e5330edbc814f8da0cafaaa5116840d8a6178457913ef6c788c1b77c62a22ddd75c8a4bd8b0f4239e7fe01fc0269549ea61cecfa147817a96e6b33bcaad65e4005087f227277feb8e4f3c7213189cf9d731f02bfa46c144f240f27d20d3437daa8a8d9e3940162a27998278526aed40180c421c80024ae0c40e2ca0024ae0c40e2ca0024ae0c40ee05442b3b0a370d2386134aa254cc00fc1e191ce930fa7cbd51c0b10f967681ebc03fa79d19a32a4a72cd9c8093c0ebc08f9191b439ca1938c3a4ad03fc0e19acdaaf30e8350b7fde2d6444ef32f000e21cef88ef8e8d6a006118001a697855bc776e3406081de0b7c8fc84aaa7851b6b7855fc29301a01842a009230bcaa3929313a000816003b3dbcf18657352f454643806001982121c3ab9a9b32a30084d780b710105a0800d791b98ac9185ed5fc141a5578841f011f2073faaf9090e155e9a4d4c880b086b8fdfb9096e1b3b2b2b2b2b2b2b2b212d6ff01305a9e0b407a3fc20000000049454e44ae426082",
  "icon256": "\\x89504e470d0a1a0a0000000d49484452000001000000010008060000005c72a86600000006624b474400ff00ff00ffa0bda7930000140a4944415478daed9d4d731cc77d879f05400024c13780b26459122945e24b2aae72de0ea94ad951552eaeb2ec1ce2a32ff914f912fe2c76f990832fbe244e9458964d5995546c478e655ba4c4775224dedb87fffc31bd83196001eccef44cff9eaaa90516bb8bd999f93dddd33dd30d4208218410420821841042082184104208218410420821841042881e32ea7a0544fb841000e680d7806de0f740188d7438e486f6784644c17f1df816f075e016f003e043e01e124156684f674025f8df04de01ae0201f831f0bfc003e017c522116482f6f0806908fe95e2b900ec6002f815300fec02f79108b2417b76804c10fc80edfb5800a368910832417b74401c21f84e2c8039ff1824826cd09e1c00c708be532780bd8f4522183cda833de604c1770e12c0debf4122182cda733da426f8dfc05af5270dbe338900f6fe2d12c1e0d01eeb11530cbe731401ecad0612c160d09eea013308be731c01ecad161241efd11e4a981906df398900f6561389a0b768cf24480bc177a62180bdd54622e81dda2309d162f09d690a60ef6b2011f406ed8904e820f8ce2c04b0f7b5900892477ba0433a0cbe334b01ec7d4d248264d196ef800482efb42180bdaf8d44901cdae22d1205ff2a763f7e57c177da14c0de664022488685ae572043ae01df056e62210858103c1443c7bfa37fe7cbc0d780ebc0f7813b5daf604eb4657d5172097885b204843c825f251601d87639d3f54ae58604d03e5ed5873c835fc5b741bc5d444b480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042644c2f47052e86d79e0716810d8a8125359cb4688be2185c009680e7c06e1f8fbf5e09a032a1c63bd828b2b7b0a1a46f8710ee03ebd878f71282980ac57107700a3807bc0adc00fe143b067f08bc1f42e8ddbc06bd1040cd4c3aef603be13fb19db28bd5041e53c80013c23de019b00d1282988c28f08bc0056cf2961bc5721d780958c14affdf6385ce0d6c72930ffa2482a405d010fc2b58f57f1b0bfe6ef19ad3988d5f02be8c09e129f029a5103e033e07b64042104614f865e022f00665e0af015fc002bf40397c79c06a9a3bc57bd780af027f468f4490a40026983b6fb7e9ad94534f2d63527801abaa6d62e1ff8cf294e10e26894d12df51627a44813f0dac026f5206fe2d2ccc2b5841b34b395fc136cd7339f87177991e892029014c18fcc3b662fcf758088bc5b28a55e336b1c69b7b9435843bc023acf690e40e1347a738ae46580df13216f21bd8f46c7f82cd4a74163bce0e0afc2407443ce559f2224842004708fe71b65cf53dfe59a78ae50256e5dbc2cee51e302e8407c5f3ea69e809d1f17416abbe5fa30cfceb5835dfa7218babf4c7097c95bab90f931541a7029871f09ba87e96db7e01abf69d035ec3ceedd6b11ac1ed62b953ecbce7a8a72119a26ee115ac0de846b45c01ce63d57d28c3ee25fd4903df442f44d099008a9d7609f80ef00fd88e9a65f0275eb5e2710e2b25ce022f17ebb40e3c61bc61f12ed6d3a086c51688cedf1730597f89f1c0bf82057e99f1d27dd6816fe22011dc02fe2b84f0acabe3a6eb5380b7807fc2aa64dea29fda34d9f1449eded3f022b60337b086c558089f16cf6d828470522a7df0e7b1da59dc25f772f1fc22fb5be8bb087c137522f81be037c0ff77b5525d0b60be78ecd36cb971c3e21256d2ac61e7971b586de02ee342784cd1d3d0f5ca27ccdeb62942bf447d1ffc8b58c97f8afd81af92e2f114cf86dcf93a762d80be72584fc325ac76b3c5784fc31fb06ec9b9e8bd4d9f3b6442e567df762f6125facd62790bdb5ede07bf1bbd6767d27f269a9100a643534f839fa79ec71a3a37b103fc1256826d6307b29f9f86093ebb8f3405defbe12f178f7f8fd5a8ce72b43e78714c2480d9d0d4d3308f1de00b5800e26aec4e6589abb7077d768a54033f577cdf33d8e9d265cad02f17db01e02145db09d3e99213872001b44f1c8eb8c1336e0fd9655c06de409aa21042cdcf73d839fc59cab05fc61a7be3c0c7ef8dbf5f6a0dc1834502488f112683aa10eaa4d08510ea02efb7669f633cf017286b3cf1ebe3a08b0e9100d227164217a70c7581f7fbe0cf331e78ef8eab0b7cddf7121d2301f40faf1ecf312e84496b08f1e7c47889dc14f865ac448f037f0e0b7cb53b57dd9d3d4102e83fb110e2db550f1382df0f71a678dc62fc3e8965acb7c2c3ee77c82db2bf1b5381ef2912c0f06812421c7eef8558c4bade6e029f60172c2d61adf3ab981c3cf0753503d1732480e15077eeefd722cc478f73d1dfc15ae62f626326f8c5353b588d600beb8e4bb1f7414c0109a0bf34057e8efd819fa45bcd6501650dc11b1bb7296510373856df2f7a8604d01f9a02570dfc7cf4b79384b2dad8e877d76d332e84f81a85baf513092301a44b53d7d91ce5f9bd07be5aad9f052e04bf82f13416fc3a21a886d013248074a8eb8683fac07bb75b57a18aaf5ef48b80a03c5d70217479c192980009200de2ee342f69bd5aefc14ff9f2585f2f5fdfb82bd265e042a8bb6029d5ef357824806e890739f52bfd3cf873f43718d5aec825f63728fa750775ed07a2252480f6f1a1c5fc7658bf532ee512fea41cd6a0b8890da6225a4602689711365ad08fb0abeb5e60ff4537712bfed0a85ea5b8592cebc5b2ddf50ae68604d02e23aca4fba858bcf45fc46ea459a314c22a76edfd12566af66d26e7f82ec6ade27b6f464bd329c050e597241240fb7875d84bc30dca790d7f57bce614e5001a972885b056fc9e526da1a9548f031f8f69d0b44d44074800dd316af83d3e37f6a9cc0265779bdf86eb4270399c67f6b5856aa95e0dfb240d7b0a7b424800e951370c56b5b6f008f8b8f85bb5b6104be1b8b50595ea992001f48393d6166229ac510edc71aaf82c95ea992201f49b93d41656b131f6af45af57a99e1912c0f098b4b6f029f05bac3670065daa9b2512403e546b0b3e5c77dddf4526f4ad6f590831452400213246021022632400213246021022632400213246021022632400213246021022637425601e8486e70e9aee4b5706668004300cc204cff9cc3f3ecab04ffeb94c39f75f3c3af16103754a10034002e8076182e7abf3002e0367a3e54ce577bf1d3800cfa2cf8bc7f18fc70588ff9f04311024807438ac14af0b7835d4d58057e715a87eee08bbe73f1e9178bee675f1a30431202480f6693aefae067c89fa607be897383ce01cf05ce0f010d6cd31789020eae4705441480c2d2201b48b8fd6b3c47815bdae24f780bb108e1af036a80aa2daab741c414c2226312524807609d87c006f03e7483fe027e52882884725122d2101b4cf22361c974f97e5f431e0272516844afe0ed08540dd30492399103347021022632400213246021022632400a1b6888c910084c81809206f54fa678e042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042f703648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042f702648c042044c6480042648c04902fa3ae5740748f042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c0420743760c6480042648c04d00d2374338e488085ae572043b68027c00eb6fde78b2526976a79a8fc9ccbf74e0609a05d46c067c0f781b3072ca78153981816d85f53eb4b50ea025e5d762bbf8b169100da658495fc4f80c795bf79d8e78145e00cfbc5b0523c2e17aff5d77725889304bc691d756ad4221240fb8c2a8f500665b3f8fd39f0b0f23e0ffb022688836a10cb95d757ffd7510895c76aa0e390d7bd7e926d213a42024883d121cf05ace6b08349e219f0a0f25a0f7b2c08af315497c5e8b571b0fd7f35851c14f0412101f483a3086203f81cb85f796d5c2358c6447011b85e3c5fada62be01920010c838304e141de2e960de02970176b907c156b6f08137eae181012c0f0699243a8fc4d61cf105d082444c6480042648c042044c6480042648c042044c6480042648c042044c6480042648c042044c6e84ac07ca8bb7577b7e1efa02b03b34002181ea1e6f780d5f64e617702ae00abc08bc0178bbf6f60f70aec327e7b6f158961404800fda669800d1f546419b800ac6181f7c715608972ff7b6d600bbbdd781313c266f1dc0ee3b7085791147a8a04d00f9a4af5111674bfff7f95f1a05fc224b088d5009a823a2afebe800d47168f11e06310b8107c516d61004800e95157aa07f697ead5b09fc34af5539c3c78fe7e1fb0d44f1b5c3c3b980062316c60b585580aaa2d248e04d01de180dffd5cfd0cf5a5fa19ca4143db0c940f67eeed095e5bf05308af2d544f23fc14a2a9b62029748404d03e71c93887057d0938cf78d057b1927e110b5baa5db6b114168aefe2dfd343dfd4b6502705c9a045248076095840be085c065ec002efa5fa22ed97eab3c2c7299cc704e6a30ed5d516d6a3657720dfbf174800ed12b0e0bf8d95eef1f0de30fc037f142d2e878568f17605d1121240fbcc61c1071bfe3bae3efbe2d5fda10821ee55d8c6aaff93742f8a192301748b8fcd170ff93dc778c9e8dd777d9341dc63e0818fbb0eebb683681909a07be2d17b63196cb1bfaa1ccf02949a10e2523e0efc36f5257c6aeb9f2512403a5403113798b90c52ab1df83a7ad03df875dd7d0a7c824800e9529df8a3ae7610b71db4513b88a5543d975729df4324807e7050ed609bf1da417cba308dda41dc6d573d9757e07b8e04d04f0eaa1d80c9203e5df0dac1244288a708f30b78b6295bec0f5a17d1332480fe5317402fb137285bddfdf2dda562f11a829fc33f056e039f60dd937ecbb0df63e06d0e6aad1f1012c030a85e61e74b5d1fbbd70c96b06bf96f03ef178f4fb0123f50ce327c0ebb78c9970becbf95385e0fd5087a8404d04f8e127818ef6a8cafcfdf007e097cc0f829c2a878cd3a561bf894f2be8515ecf26517c245ecc226bf0b5142e81112403f386ee039e0f9784c8183da0762796c14cb5d4c1c7ec7622c041f83c06f60921012460248936a2bbf3fc60d74316d84aa3a93702c84fbc0af30219cc6da0e5c08abc5733e2889da1012420248836a4bbe2f6d04feb881ac1382dfddf710f808ab052c332e8435caf10c24848e9100664bb5caeb55edbaea7c5ca5afd276097fd2f7fb77f4eb061e03bfa114c245c685b04239c0895fcc2431b48004305de2c0fb39b5978c9f632dedf781bfc5aac55eca5719c279729d10bcbbf109f03176fcf9106717b1b685cbc0cb58efc322fb6b416a47982212c0c9680afc0616f83b58e86f632de94f80bfc65ad7fde0863c0ee83a21ec14dbe973e0d7c0f780cf80d7801bc0f5e2f1156cc4a4252484a9928200e256e6d4776453e0d7b192cd03ff09569a3dc3aac08c4623420854de9f33d5ef3f876dab87a3d1e86108e116764ab082d5086e44cb6b98107c5c85be09219975ec5a00cfb152f162f17bdc35951a71fff846b1de5eba7be09f63d55c46a314bf422d499e6b17db6f0778043c0a21fc372689156c42936b980c6e0257b163e874f49d521482af8b2f3e927267742d800f817f06be0d7c15eb438eab785dee38ffdf7e41cc63c6037f0f0bfc0ef42af0bda4d8bebbd87e781c42f825f02fd87c082f500ae106f006e5388bded3d0a510aac17f869df2fc143b9e3aa333011455e22de05f819f007f05fc23268255da1781ff8f1d2cf08f180ffcfde279053e018aed1fb053afa721848f801f62b58035e04dca1ac29bd83175163be6e3de96591e5f4dc17f1ff82dd1e96157745a03f02f1e4258a714c15f6222f81ab315817fd63616ec878c07fe01e528b50a7ce2444278063c0b217c0cfc0813c225ac56701393c25b58ad211682bf7f1a241f7ca7eb5300606c43ac8710fe0d780ff80b4c047fc774441007fe3916700ffb6d4c001bc06e0a3b469c8c681f3e079e8710fe8015324b587bc155ca1ac275e00b94d723345d807518bd09be938400628a8db31e42f831a508be8dd508d668de315531f8cf5b58497e8f32ecb7b173c97520a4b4433a20c946c06913ede30de04e08e10ef02ed61d7b1eb842d986701d9bbbe1a8d722f426f84e7202708a8db51142f877acb1e4cfb11ac1db942288f12bc8b6b01d1007fe0e16f80d1478c158183781bb2184bb5881b38005ff55c6bb1ebfc4fe6b11f63e0e3bfe7a137c275901389108fe03dbb05fa1ec35185196f077190ffcdebded29ef009106d131b28d9d1e3e88ae453887d508aad7225c28fefe1cf81fe067f424f84ef202702211bc8b6de8af600d39bfc602ff946256993e6c78913ed1b5080f818735d722dcc0da13de05fe8ffe5d03d21f01382e026ca30bd11ad56b11b031117a4daa33ce8af6c8a21150d423010891311240dea8f4cf1c0940888c910084c8180940e8342063240021324602102263240021324602106a03c8180940888c910084c8180940888c910084c8180940a8113063240021324602c81b95fe9923010891311240bef467e03a31332400a1d3808c9100bac1b7bbc2576e039f5443b48804d03e0f81df61077ece22f0efecdbe00136b186681119b74542086007fc1bc037816f6073d48de8664af41136d9cacf68af3088e7cfdbc5665dfe05f001369b93267269116de90e4848046d0a40c14f106df10e494004236cdec59f333b0128f809a32d9f001d8a60960250f07b80f64042742082590840c1ef11da1309d2a208a6290005bf87688f244c0b2298860014fc1ea33dd30366288211f01e708ba30b40c11f00da433d624622f829471380823f20b4a77ac8944530a90014fc01a23dd663a62482f7b010370940c11f30da7303e08422681280829f01da8303e29822a80a40c1cf08edc901d220822bc5735511b8004628f8d9a13d3a602211bc0e7c8bfd22805200f328f8d9a13d9b010d22b85a3cf713ac17e0010a7e76680f67448d08be8e85ff07c08728f8d9a13d9d218508e68157800de00e0abe104208218410420821841042082184104208218410420821841042f4853f026330ae8e91ea5e200000000049454e44ae426082",
  "icon512": "\\",
  "install": {},
  "ipmRepo": "https://ipm.integromat.com",
  "ipmTags": null,
  "version": 1,
  "website": null,
  "_modules": {
    "getFile": {
      "id": 60925,
      "api": {
        "url": "/{{encodeURL(parameters.bucket)}}/{{encodeURL(stripLeadingSlash(parameters.path))}}",
        "method": "GET",
        "response": {
          "type": "binary",
          "output": {
            "data": "{{body}}",
            "filename": "{{substring(parameters.path, lastIndexOf(parameters.path, '/') + 1)}}"
          }
        },
        "encodeUrl": false
      },
      "rev": 6,
      "crud": "read",
      "name": "getFile",
      "epoch": null,
      "flags": {},
      "label": "Get File",
      "scope": [],
      "expect": [
        {
          "name": "region",
          "type": "select",
          "label": "Region",
          "options": {
            "store": "rpc://app%23aws-s3@1/getRegions",
            "nested": [
              {
                "name": "bucket",
                "type": "select",
                "label": "Bucket",
                "options": "rpc://app%23aws-s3@1/listBuckets",
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "Full path to the file.",
          "name": "path",
          "type": "text",
          "label": "Path",
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "aws-s3",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/{{encodeURL(parameters.bucket)}}/{{encodeURL(stripLeadingSlash(parameters.path))}}\",\n    \"method\": \"GET\",\n    \"encodeUrl\": false,\n    \"response\": {\n        \"type\": \"binary\",\n        \"output\": {\n            \"filename\": \"{{substring(parameters.path, lastIndexOf(parameters.path, '/') + 1)}}\",\n            \"data\": \"{{body}}\"\n        }\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "filename",
          "type": "text",
          "label": "File name",
          "semantic": "file:name"
        },
        {
          "name": "data",
          "type": "buffer",
          "label": "Data",
          "semantic": "file:data"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "aws",
      "description": "Downloads a file from a bucket.",
      "expectJsonc": "[\n    {\n        \"name\": \"region\",\n        \"type\": \"select\",\n        \"label\": \"Region\",\n        \"required\": true,\n        \"options\": {\n            \"store\": \"rpc://getRegions\",\n            \"nested\": [\n                {\n                    \"name\": \"bucket\",\n                    \"type\": \"select\",\n                    \"label\": \"Bucket\",\n                    \"required\": true,\n                    \"options\": \"rpc://listBuckets\"\n                }\n            ]\n        }\n    },\n    {\n        \"name\": \"path\",\n        \"type\": \"text\",\n        \"label\": \"Path\",\n        \"help\": \"Full path to the file.\",\n        \"required\": true\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"filename\",\n\t\t\"label\": \"File name\",\n\t\t\"type\": \"text\",\n\t\t\"semantic\": \"file:name\"\n\t},\n\t{\n\t\t\"name\": \"data\",\n\t\t\"label\": \"Data\",\n\t\t\"type\": \"buffer\",\n\t\t\"semantic\": \"file:data\"\n\t}\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "request": {
      "id": 60926,
      "api": {
        "qs": {
          "{{...}}": "{{toCollection(parameters.qs, 'key', 'value')}}"
        },
        "url": "https://{{ifempty(parameters.prefix, 's3')}}.{{if(parameters.region, parameters.region +'.', '')}}amazonaws.com/{{parameters.url}}",
        "body": "{{ifempty(parameters.body, '')}}",
        "type": "text",
        "method": "{{parameters.method}}",
        "headers": {
          "{{...}}": "{{toCollection(parameters.headers, 'key', 'value')}}"
        },
        "response": {
          "output": {
            "body": "{{body}}",
            "headers": "{{headers}}",
            "statusCode": "{{statusCode}}"
          }
        }
      },
      "rev": 6,
      "crud": null,
      "name": "request",
      "epoch": null,
      "flags": {},
      "label": "Make an API Call",
      "scope": [],
      "expect": [
        {
          "help": "In most cases, the `s3` should be fine. You can enter a bucket name before: `mybucket.s3`.",
          "name": "prefix",
          "type": "text",
          "label": "Subdomain Prefix",
          "default": "s3",
          "required": true
        },
        {
          "name": "region",
          "type": "select",
          "label": "Region",
          "options": "rpc://app%23aws-s3@1/getRegions"
        },
        {
          "help": "Enter a path relative to `https://<prefix>.<selected-region>.amazonaws.com/`.",
          "name": "url",
          "type": "text",
          "label": "URL",
          "required": true
        },
        {
          "name": "method",
          "type": "select",
          "label": "Method",
          "default": "GET",
          "options": [
            {
              "label": "GET",
              "value": "GET"
            },
            {
              "label": "POST",
              "value": "POST"
            },
            {
              "label": "PUT",
              "value": "PUT"
            },
            {
              "label": "PATCH",
              "value": "PATCH"
            },
            {
              "label": "DELETE",
              "value": "DELETE"
            }
          ],
          "required": true
        },
        {
          "help": "You don't have to add authorization headers; we already did that for you.",
          "name": "headers",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Headers"
        },
        {
          "name": "qs",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Query String"
        },
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        }
      ],
      "public": true,
      "typeId": 12,
      "appName": "aws-s3",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"https://{{ifempty(parameters.prefix, 's3')}}.{{if(parameters.region, parameters.region +'.', '')}}amazonaws.com/{{parameters.url}}\",\n    \"method\": \"{{parameters.method}}\",\n    \"qs\": {\n        \"{{...}}\": \"{{toCollection(parameters.qs, 'key', 'value')}}\"\n    },\n    \"headers\": {\n        \"{{...}}\": \"{{toCollection(parameters.headers, 'key', 'value')}}\"\n    },\n    \"body\": \"{{ifempty(parameters.body, '')}}\",\n    \"type\": \"text\",\n    \"response\": {\n        \"output\": {\n            \"headers\": \"{{headers}}\",\n            \"body\": \"{{body}}\",\n            \"statusCode\": \"{{statusCode}}\"\n        }\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        },
        {
          "name": "headers",
          "type": "collection",
          "label": "Headers"
        },
        {
          "name": "statusCode",
          "type": "number",
          "label": "Status code"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "aws",
      "description": "Performs an arbitrary authorized API call.",
      "expectJsonc": "[\n    {\n        \"name\": \"prefix\",\n        \"type\": \"text\",\n        \"label\": \"Subdomain Prefix\",\n        \"help\": \"In most cases, the `s3` should be fine. You can enter a bucket name before: `mybucket.s3`.\",\n        \"default\": \"s3\",\n        \"required\": true\n    },\n    {\n        \"name\": \"region\",\n        \"type\": \"select\",\n        \"label\": \"Region\",\n        \"options\": \"rpc://getRegions\"\n    },\n    {\n        \"name\": \"url\",\n        \"type\": \"text\",\n        \"label\": \"URL\",\n        \"help\": \"Enter a path relative to `https://<prefix>.<selected-region>.amazonaws.com/`.\",\n        \"required\": true\n    },\n    {\n        \"name\": \"method\",\n        \"type\": \"select\",\n        \"label\": \"Method\",\n        \"required\": true,\n        \"default\": \"GET\",\n        \"options\": [\n            {\n                \"label\": \"GET\",\n                \"value\": \"GET\"\n            },\n            {\n                \"label\": \"POST\",\n                \"value\": \"POST\"\n            },\n            {\n                \"label\": \"PUT\",\n                \"value\": \"PUT\"\n            },\n            {\n                \"label\": \"PATCH\",\n                \"value\": \"PATCH\"\n            },\n            {\n                \"label\": \"DELETE\",\n                \"value\": \"DELETE\"\n            }\n        ]\n    },\n    {\n        \"name\": \"headers\",\n        \"label\": \"Headers\",\n        \"help\": \"You don't have to add authorization headers; we already did that for you.\",\n        \"type\": \"array\",\n        \"spec\": [\n            {\n                \"name\": \"key\",\n                \"label\": \"Key\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ]\n    },\n    {\n        \"name\": \"qs\",\n        \"label\": \"Query String\",\n        \"type\": \"array\",\n        \"spec\": [\n            {\n                \"name\": \"key\",\n                \"label\": \"Key\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ]\n    },\n    {\n        \"name\": \"body\",\n        \"label\": \"Body\",\n        \"type\": \"any\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"body\",\n\t\t\"label\": \"Body\",\n\t\t\"type\": \"any\"\n\t},\n\t{\n\t\t\"name\": \"headers\",\n\t\t\"label\": \"Headers\",\n\t\t\"type\": \"collection\"\n\t},\n\t{\n\t\t\"name\": \"statusCode\",\n\t\t\"label\": \"Status code\",\n\t\t\"type\": \"number\"\n\t}\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "listFiles": {
      "id": 60927,
      "api": {
        "qs": {
          "prefix": "{{normalizePrefix(parameters.prefix)}}",
          "delimiter": "/",
          "list-type": 2
        },
        "url": "/{{parameters.bucket}}",
        "method": "GET",
        "response": {
          "output": {
            "size": "{{item.Size[]}}",
            "filename": "{{item.Key[]}}",
            "modified": "{{item.LastModified[]}}"
          },
          "iterate": "{{body.ListBucketResult.Contents}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "listFiles",
      "epoch": null,
      "flags": {},
      "label": "List Files",
      "scope": [],
      "expect": [
        {
          "name": "region",
          "type": "select",
          "label": "Region",
          "options": {
            "store": "rpc://app%23aws-s3@1/getRegions",
            "nested": [
              {
                "name": "bucket",
                "type": "select",
                "label": "Bucket",
                "options": "rpc://app%23aws-s3@1/listBuckets",
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "Path to folder to lookup files in. E.g. `integromat/work`.",
          "name": "prefix",
          "type": "text",
          "label": "Prefix"
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "aws-s3",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/{{parameters.bucket}}\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"list-type\": 2,\n        \"delimiter\": \"/\",\n        \"prefix\": \"{{normalizePrefix(parameters.prefix)}}\"\n    },\n    \"response\": {\n        \"iterate\": \"{{body.ListBucketResult.Contents}}\",\n        \"output\": {\n            \"filename\": \"{{item.Key[]}}\",\n            \"modified\": \"{{item.LastModified[]}}\",\n            \"size\": \"{{item.Size[]}}\"\n        }\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "filename",
          "type": "text",
          "label": "File name"
        },
        {
          "name": "modified",
          "type": "date",
          "label": "Date modified"
        },
        {
          "name": "size",
          "type": "uinteger",
          "label": "Size"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "aws",
      "description": "Lists all files in the specified path.",
      "expectJsonc": "[\n    {\n        \"name\": \"region\",\n        \"type\": \"select\",\n        \"label\": \"Region\",\n        \"required\": true,\n        \"options\": {\n            \"store\": \"rpc://getRegions\",\n            \"nested\": [\n                {\n                    \"name\": \"bucket\",\n                    \"type\": \"select\",\n                    \"label\": \"Bucket\",\n                    \"required\": true,\n                    \"options\": \"rpc://listBuckets\"\n                }\n            ]\n        }\n    },\n    {\n        \"name\": \"prefix\",\n        \"type\": \"text\",\n        \"label\": \"Prefix\",\n        \"help\": \"Path to folder to lookup files in. E.g. `integromat/work`.\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"filename\",\n\t\t\"label\": \"File name\",\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"modified\",\n\t\t\"label\": \"Date modified\",\n\t\t\"type\": \"date\"\n\t},\n\t{\n\t\t\"name\": \"size\",\n\t\t\"label\": \"Size\",\n\t\t\"type\": \"uinteger\"\n\t}\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "uploadFile": {
      "id": 60928,
      "api": {
        "url": "/{{parameters.bucket}}/{{if(parameters.folder, parameters.folder + '/', '')}}{{parameters.filename}}",
        "body": "{{parameters.data}}",
        "type": "binary",
        "method": "PUT",
        "headers": {
          "{{...}}": "{{addMime(toCollection(parameters.headers, 'key', 'value'), mime(parameters.filename))}}"
        },
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "create",
      "name": "uploadFile",
      "epoch": null,
      "flags": {},
      "label": "Upload File",
      "scope": [],
      "expect": [
        {
          "name": "region",
          "type": "select",
          "label": "Region",
          "options": {
            "store": "rpc://app%23aws-s3@1/getRegions",
            "nested": [
              {
                "name": "bucket",
                "type": "select",
                "label": "Bucket",
                "options": "rpc://app%23aws-s3@1/listBuckets",
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "Example: `work/integromat`. Leave empty to upload to the root of the bucket.",
          "name": "folder",
          "type": "text",
          "label": "Folder"
        },
        {
          "name": "filename",
          "type": "filename",
          "label": "File name",
          "required": true,
          "semantic": "file:name"
        },
        {
          "name": "data",
          "type": "buffer",
          "label": "Data",
          "semantic": "file:data"
        },
        {
          "name": "headers",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Headers",
          "advanced": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "aws-s3",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/{{parameters.bucket}}/{{if(parameters.folder, parameters.folder + '/', '')}}{{parameters.filename}}\",\n    \"method\": \"PUT\",\n    \"type\": \"binary\",\n    \"body\": \"{{parameters.data}}\",\n    \"headers\": {\n        \"{{...}}\": \"{{addMime(toCollection(parameters.headers, 'key', 'value'), mime(parameters.filename))}}\"\n    },\n    \"response\": {\n        \"output\": \"{{body}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "aws",
      "description": "Uploads a file to a bucket.",
      "expectJsonc": "[\n    {\n        \"name\": \"region\",\n        \"type\": \"select\",\n        \"label\": \"Region\",\n        \"required\": true,\n        \"options\": {\n            \"store\": \"rpc://getRegions\",\n            \"nested\": [\n                {\n                    \"name\": \"bucket\",\n                    \"type\": \"select\",\n                    \"label\": \"Bucket\",\n                    \"required\": true,\n                    \"options\": \"rpc://listBuckets\"\n                }\n            ]\n        }\n    },\n    {\n        \"name\": \"folder\",\n        \"type\": \"text\",\n        \"label\": \"Folder\",\n        \"help\": \"Example: `work/integromat`. Leave empty to upload to the root of the bucket.\"\n    },\n    {\n        \"name\": \"filename\",\n        \"type\": \"filename\",\n        \"label\": \"File name\",\n        \"required\": true,\n        \"semantic\": \"file:name\"\n    },\n    {\n        \"name\": \"data\",\n        \"type\": \"buffer\",\n        \"label\": \"Data\",\n        \"semantic\": \"file:data\"\n    },\n    {\n        \"name\": \"headers\",\n        \"label\": \"Headers\",\n        \"type\": \"array\",\n        \"advanced\": true,\n        \"spec\": [\n            {\n                \"name\": \"key\",\n                \"label\": \"Key\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ]\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "ListFolders": {
      "id": 60929,
      "api": {
        "qs": {
          "prefix": "{{normalizePrefix(parameters.prefix)}}",
          "delimiter": "/",
          "list-type": 2
        },
        "url": "/{{parameters.bucket}}",
        "method": "GET",
        "response": {
          "output": {
            "name": "{{last(split(stripSlash(item.Prefix[]), '/'))}}",
            "path": "{{stripSlash(item.Prefix[])}}"
          },
          "iterate": "{{body.ListBucketResult.CommonPrefixes}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "ListFolders",
      "epoch": null,
      "flags": {},
      "label": "List Folders",
      "scope": [],
      "expect": [
        {
          "name": "region",
          "type": "select",
          "label": "Region",
          "options": {
            "store": "rpc://app%23aws-s3@1/getRegions",
            "nested": [
              {
                "name": "bucket",
                "type": "select",
                "label": "Bucket",
                "options": "rpc://app%23aws-s3@1/listBuckets",
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "Path to folder to lookup folders in. E.g. `integromat/work`.",
          "name": "prefix",
          "type": "text",
          "label": "Prefix"
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "aws-s3",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/{{parameters.bucket}}\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"list-type\": 2,\n        \"delimiter\": \"/\",\n        \"prefix\": \"{{normalizePrefix(parameters.prefix)}}\"\n    },\n    \"response\": {\n        \"iterate\": \"{{body.ListBucketResult.CommonPrefixes}}\",\n        \"output\": {\n            \"name\": \"{{last(split(stripSlash(item.Prefix[]), '/'))}}\",\n            \"path\": \"{{stripSlash(item.Prefix[])}}\"\n        }\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "name",
          "type": "text",
          "label": "Folder name"
        },
        {
          "name": "path",
          "type": "text",
          "label": "Folder path"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "aws",
      "description": "Lists all folders in the specified path.",
      "expectJsonc": "[\n    {\n        \"name\": \"region\",\n        \"type\": \"select\",\n        \"label\": \"Region\",\n        \"required\": true,\n        \"options\": {\n            \"store\": \"rpc://getRegions\",\n            \"nested\": [\n                {\n                    \"name\": \"bucket\",\n                    \"type\": \"select\",\n                    \"label\": \"Bucket\",\n                    \"required\": true,\n                    \"options\": \"rpc://listBuckets\"\n                }\n            ]\n        }\n    },\n    {\n        \"name\": \"prefix\",\n        \"type\": \"text\",\n        \"label\": \"Prefix\",\n        \"help\": \"Path to folder to lookup folders in. E.g. `integromat/work`.\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"name\",\n\t\t\"label\": \"Folder name\",\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"path\",\n\t\t\"label\": \"Folder path\",\n\t\t\"type\": \"text\"\n\t}\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "createBucket": {
      "id": 60930,
      "api": {
        "url": "/{{parameters.bucket}}",
        "body": "{{temp.body}}",
        "temp": {
          "body": "<CreateBucketConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"><LocationConstraint>{{parameters.region}}</LocationConstraint></CreateBucketConfiguration>"
        },
        "type": "text",
        "method": "PUT",
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 7,
      "crud": "create",
      "name": "createBucket",
      "epoch": null,
      "flags": {},
      "label": "Create Bucket",
      "scope": [],
      "expect": [
        {
          "name": "bucket",
          "type": "text",
          "label": "Name",
          "required": true
        },
        {
          "name": "region",
          "type": "select",
          "label": "Region",
          "options": "rpc://app%23aws-s3@1/getRegions",
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "aws-s3",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/{{parameters.bucket}}\",\n    \"method\": \"PUT\",\n    \"temp\": {\n        \"body\": \"<CreateBucketConfiguration xmlns=\\\"http://s3.amazonaws.com/doc/2006-03-01/\\\"><LocationConstraint>{{parameters.region}}</LocationConstraint></CreateBucketConfiguration>\"\n    },\n    \"body\": \"{{temp.body}}\",\n    \"type\": \"text\", // This is not a bug, AWS receives XML as Text in this case\n    \"response\": {\n        \"output\": \"{{body}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "aws",
      "description": "Creates a new bucket.",
      "expectJsonc": "[\n    {\n        \"name\": \"bucket\",\n        \"type\": \"text\",\n        \"label\": \"Name\",\n        \"required\": true\n    },\n    {\n        \"name\": \"region\",\n        \"type\": \"select\",\n        \"label\": \"Region\",\n        \"required\": true,\n        \"options\": \"rpc://getRegions\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    }
  },
  "approved": true,
  "authorId": 671322,
  "billable": true,
  "inReview": false,
  "keywords": null,
  "language": "en",
  "_accounts": {
    "aws": {
      "api": {
        "aws": {
          "key": "{{connection.key}}",
          "secret": "{{connection.secret}}",
          "sign_version": 4
        },
        "log": {
          "sanitize": []
        },
        "url": "https://sts.amazonaws.com",
        "body": {
          "Action": "GetCallerIdentity",
          "Version": "2011-06-15"
        },
        "type": "urlencoded",
        "method": "POST",
        "response": {
          "error": "{{ifempty(body.ErrorResponse.Error[].Message[], '[' + statusCode + '] ' + body)}}",
          "metadata": {
            "type": "text",
            "value": "{{substring(body.GetCallerIdentityResponse.GetCallerIdentityResult[].Arn[], lastIndexOf(body.GetCallerIdentityResponse.GetCallerIdentityResult[].Arn[], '/') + 1)}}"
          }
        }
      },
      "rev": 11,
      "name": "aws",
      "type": "basic",
      "label": "AWS",
      "scope": [],
      "scopes": {},
      "aliasTo": null,
      "appName": "aws-s3",
      "install": {},
      "apiJsonc": "{\n\t\"url\": \"https://sts.amazonaws.com\",\n\t\"method\": \"POST\",\n\t\"type\": \"urlencoded\",\n\t\"body\": {\n\t\t\"Action\": \"GetCallerIdentity\",\n\t\t\"Version\": \"2011-06-15\"\n\t},\n\t\"aws\": {\n\t\t\"key\": \"{{connection.key}}\",\n\t\t\"secret\": \"{{connection.secret}}\",\n\t\t\"sign_version\": 4\n\t},\n\t\"response\": {\n\t\t\"error\": \"{{ifempty(body.ErrorResponse.Error[].Message[], '[' + statusCode + '] ' + body)}}\",\n\t\t\"metadata\": {\n\t\t\t\"type\": \"text\",\n\t\t\t\"value\": \"{{substring(body.GetCallerIdentityResponse.GetCallerIdentityResult[].Arn[], lastIndexOf(body.GetCallerIdentityResponse.GetCallerIdentityResult[].Arn[], '/') + 1)}}\"\n\t\t}\n\t},\n\t\"log\": {\n\t\t\"sanitize\": []\n\t}\n}",
      "authorId": 671322,
      "appVersion": 1,
      "parameters": [
        {
          "name": "key",
          "type": "text",
          "label": "Access Key",
          "editable": true,
          "required": true
        },
        {
          "name": "secret",
          "type": "password",
          "label": "Access Secret Key",
          "editable": true,
          "required": true
        }
      ],
      "scopeJsonc": null,
      "installSpec": [],
      "scopesJsonc": null,
      "installJsonc": null,
      "depAccountName": null,
      "depAccountScope": null,
      "parametersJsonc": "[\n    {\n        \"name\": \"key\",\n        \"type\": \"text\",\n        \"label\": \"Access Key\",\n        \"required\": true,\n        \"editable\": true\n    },\n    {\n        \"name\": \"secret\",\n        \"type\": \"password\",\n        \"label\": \"Access Secret Key\",\n        \"required\": true,\n        \"editable\": true\n    }\n]",
      "installSpecJsonc": null,
      "connectedSystemName": null,
      "depAccountScopeJsonc": null
    }
  },
  "baseJsonc": "{\n    \"baseUrl\": \"https://s3.{{parameters.region}}.amazonaws.com\",\n    \"aws\": {\n        \"key\": \"{{connection.key}}\",\n        \"secret\": \"{{connection.secret}}\",\n        \"sign_version\": 4\n    },\n    \"response\": {\n        \"error\": {\n            \"403\": {\n                \"type\": \"InvalidAccessTokenError\",\n                \"message\": \"{{ifempty(body.Error.Message[], '[' + statusCode + '] ' + body) + '\\n\\n' + 'This region may not be enabled in your account. You can check it by logging in as root and going to this page: https://console.aws.amazon.com/billing/home#/account'}}\"\n            },\n            \"message\": \"{{ifempty(body.Error.Message[], '[' + statusCode + '] ' + body)}}\"\n        },\n        \"valid\": \"{{!body.Error}}\"\n    },\n    \"log\": {\n        \"sanitize\": []\n    }\n}",
  "countries": null,
  "_functions": {
    "last": {
      "rev": 3,
      "code": "function last(array) {\n\treturn array[array.length - 1];\n}",
      "name": "last",
      "test": null,
      "appName": "aws-s3",
      "arguments": "(array)",
      "appVersion": 1
    },
    "addMime": {
      "rev": 3,
      "code": "function addMime(headers, mime) {\n\tif (!mime) return headers;\n\n\ttry {\n\t\tconst found = Object.keys(headers).map(key => String(key).toLowerCase()).some(key => key === 'content-type');\n\t\tif (!found) headers['content-type'] = mime;\n\t} catch (ex) {}\n\n\treturn headers;\n}",
      "name": "addMime",
      "test": "it('should add default mime', () => {\n\tassert.deepStrictEqual(addMime({}, 'image.png'), {\n\t\t'content-type': 'image/png'\n\t});\n});",
      "appName": "aws-s3",
      "arguments": "(headers, mime)",
      "appVersion": 1
    },
    "stripSlash": {
      "rev": 3,
      "code": "function stripSlash(text) {\n\tif (typeof text != 'undefined' && /\\/$/.test(text)) {\n\t\treturn text.substring(0, text.length - 1);\n\t}\n\treturn text;\n}",
      "name": "stripSlash",
      "test": null,
      "appName": "aws-s3",
      "arguments": "(text)",
      "appVersion": 1
    },
    "lastIndexOf": {
      "rev": 3,
      "code": "function lastIndexOf(path, char) {\n\treturn path.lastIndexOf(char);\n}",
      "name": "lastIndexOf",
      "test": null,
      "appName": "aws-s3",
      "arguments": "(path, char)",
      "appVersion": 1
    },
    "normalizePrefix": {
      "rev": 3,
      "code": "function normalizePrefix(prefix) {\n\tprefix = prefix || '';\n\tif (/^\\//.test(prefix)) prefix = prefix.substr(1); // Ensure prefix doesn't start with /\n\tif (!/\\/$/.test(prefix)) prefix = prefix + '/'; // Ensure prefix ends with /\n\tif (prefix === '/') prefix = '';\n\treturn prefix;\n}",
      "name": "normalizePrefix",
      "test": null,
      "appName": "aws-s3",
      "arguments": "(prefix)",
      "appVersion": 1
    },
    "stripLeadingSlash": {
      "rev": 4,
      "code": "function stripLeadingSlash(text) {\n    if (typeof text === 'string') {\n\t\treturn text.replace(/^\\/+/, '');\n\t}\n\treturn text;\n}",
      "name": "stripLeadingSlash",
      "test": "it('should remove a single leading slash from a string', () => {\n\tconst result = stripLeadingSlash('/path/to/resource');\n\tassert.strictEqual(result, 'path/to/resource');\n});\n\nit('should remove multiple leading slashes', () => {\n\tconst result = stripLeadingSlash('///path/to/resource');\n\tassert.strictEqual(result, 'path/to/resource');\n});\n\nit('should return the string unchanged if it has no leading slash', () => {\n\tconst result = stripLeadingSlash('noleadingslash');\n\tassert.strictEqual(result, 'noleadingslash');\n});\n",
      "appName": "aws-s3",
      "arguments": "(text)",
      "appVersion": 1
    }
  },
  "approvedAt": "2022-09-01T13:30:22.068456+00:00",
  "categories": [],
  "opensource": true,
  "description": "Use {{integromat}} to automate file upload, bucket creation, API calls and more on AWS S3. It's easy!",
  "iconColor32": null,
  "iconColor64": null,
  "installSpec": [],
  "inviteToken": "97a0bfe13c78c8ec35e6a6af86970c0e",
  "versionFull": "1.6.8",
  "compiledName": "aws-s3",
  "iconColor128": null,
  "iconColor256": null,
  "iconColor512": null,
  "installJsonc": null,
  "manifestVersion": 2,
  "compilationError": null,
  "installSpecJsonc": null
}
