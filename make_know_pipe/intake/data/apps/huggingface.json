{
  "rev": 30,
  "base": {
    "log": {
      "sanitize": [
        "request.headers.authorization"
      ]
    },
    "baseUrl": "https://api-inference.huggingface.co",
    "headers": {
      "Authorization": "Bearer {{connection.apiKey}}"
    },
    "timeout": "{{common.timeout}}",
    "response": {
      "error": {
        "429": {
          "type": "RateLimitError",
          "message": "[{{statusCode}}] {{body.error || 'Too many requests.}}"
        },
        "message": "[{{statusCode}}] {{body.error}}"
      }
    }
  },
  "beta": false,
  "docs": null,
  "name": "huggingface",
  "_rpcs": {},
  "flags": {
    "sandboxes": [
      {
        "allowed": false,
        "version": 1
      },
      {
        "allowed": true,
        "version": 2
      }
    ],
    "imlIsUserEditable": true
  },
  "label": "Hugging Face",
  "theme": "#ff9d00",
  "_hooks": {},
  "global": true,
  "groups": [
    {
      "label": "Tasks",
      "modules": [
        "createSummary",
        "createAnswer",
        "createTextClassification",
        "createTranslation",
        "createChatCompletion",
        "generateImage"
      ]
    },
    {
      "label": "Other",
      "modules": [
        "universal"
      ]
    }
  ],
  "icon32": "\\x89504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af400000006624b474400ff00ff00ffa0bda793000003e04944415458c3edd65ba855551406e06f79d4a3d531cd142ded628aa16966116917120a82a0020bba3e440511161165504ff69e5209d14b0f454664858a425a5a912269452925999a97c2d442add4ec78460f736cdb67b78f6e49e8c5090bd69a63cd31fef1cf31fe393935fee751b5f25344345f5c552dd9ff13801e9c776028ce4417f66117fe3851203d5a9a04ee832b301d972788a8f3b317ab311feb70a415104d679b04bf103331059fe17d6cc8cc2b0cc225b80997a67d3676b6ca44b7e00dcf5511b12a22e645c4c488e8d56c5bf2dfb6889812118b226269448c6bf477a2002645c4da88981511a71dcf49ddba81113137223e8e88512d0368083e28229644c4ec88e8db12faee7e3a22e2b588783d22fab704a201c08c8858111143ebe60644c4988868af39aab30dc96cdbeae62e8a88351171c7710134043f2be9bbaf6eae7f44bc1a11bb236266c3ffc323e2c388d81e11d31b6c4f45c48288e8d70c44af1ec8988c762cc5603c8969b80c87713edaeafe1f8c333010e33149e99ac158881118db2c50ef6300d8849f71316ec32f09640fb6e8dee71b7033aec437b81ab7623136623726e0ab56019c87adf9be11f764e06e4a5727c59d695f92a65df8143b12e84fc95acb0cf4cfec555575045b73df2a3c843fb13822f6e4365ea028e4e7585e55d581ba351278bf1301f0bb22b5b5f63b9cf38189785891dbf5097672eef3bdc948cd4fdf8c31003f9e08808d99e904ecc78b382733ff20030d578aae4b91e20df812b764b6dbf1188624fd0b7b04d0d09b03302c83afc3af785b29c236bc846792f6ae7c2a2cc7543c8d4e9c8d7793bd6b3146393df7d5625655550ea30600cfe2f67cdf81199883554aa1dd9ff6dec94227b6652dbc833794969c8647f182729875610166d5025555d5540746e13bdcad14d50cbc82d1589b011f544eba2ff0b572143f904cacce6c5fc623592777e2dbf4dd6d544de89f9f85b53e291ca988529fac8d43988be7f056ae9b9edf8fe7f7781c4cb05bd23e017fe5fbde9e8ab03d0b6a3e56e206fc80f792fe50fa7a4e06fb28a97d226b6359d6c98aac811b711ddec4e664b5bd3e60e31674a6c3731539dd8c358ab074a6265014aeb752dd358616e7be1e493fbb720b37a5af91e9fbc8b1001cc4f7f9f366458cb6a3abaaaafa621d9b4c8d50547360ce1dadee0cb62d7d6caef3d95d4d6b8beac688a4f47aa50b562a1abe339d8e53fa7b90a21194aaff4dd18bf599d83045b4a626539fe0f904754c00356646670d5c93e86b527a008b302fbf239fbb9403e8f49c3f5497c0b264f65f17d5a3b7c463dc547a29ddd1e19fdbeffe9a8386b51dc94c2423fb93b5a6a31b80e38038a9a3fe76dceab5fca4073e356ae36f7af25b0af1c15b5d0000000049454e44ae426082",
  "icon64": "\\x89504e470d0a1a0a0000000d4948445200000040000000400806000000aa6971de00000006624b474400ff00ff00ffa0bda79300000a9a4944415478daed9a7990dc5511c73fbbd924cb72e420900408900408109453288e2005851c82208782727b2047402d50cb0b0a50100b4badf22804040f2828043944422911816008106e1049483802098404c841b2493efed13dce6f37333b33cbeef287db55533bfbfbbdd7c7f775f77bdd6fa09ffaa99ffaa99ffe7fa9a9af04a98d29d6d437aaf59a94460daea9682f01d2e35ceb31bc9a311f64ee870e409d2bbe0eb02130021892ff0b2c0516016fe5df957d05448f70a961fc486077605f6067604b60781adf92635602cb80378159c00ce03ee071e09dde04e203cdeec2f0666002703c70647e1f44acf64a6031f05e7e6f025a810df23330792c49006e026e055eed0d10ba3db30be337034e074e02c6a4d1af000f01d380678079c0bb407bea30081896e37702f601762342650df02cf02be08604af4741e896f1153e03d44fa98fa86bd495ea34f52c75bcda521a5b07df567527f502f5b902bf3bd55dabc8ff508d6f53bfadbe6dd0f3ea19eaf0ee2a57e0bd857a89fa46f29ead1e9780f72d08558c1fa2fe5c5d91ab74833aa1a7144a3ecdeabeeafd09c2dbe9592d7d064215e3d74de357a94bd58bd4f57b5a9182bccdd43faaabd577d3cb9afa04842a31ff9d5cf5a5ea79eac0de5a8182dc61ea559917de523fddeb005459fd23d4456a7bae7caf195f41970dd59b321c9e5327f61a08558cdf5c7d3415b8bee4f67d41051dc6a9330a3ab4f50a085500f84101fd6dfb741beaa8d327d5c5ea72f5b37d05c044756e26be332a092a8cdd48dd53dd411d544ba1426ed95add471d53cd907cdea2fe3a17e31f991f7a0e802aab7f710a9c96b1586dce1e39e63d7581fae3dc356a197faefab2ba447d563db20608bba8f3721b3ea647bda002b351ea1309c0595dac7eab7a9b1d69b97a540d637655e7779af778caad36a759fd4d8ebdb1948ceb05a1b9414c7607b603e600777752642b751271a61f4a1440456a05b6afc17f2ba25c2ed2e6c0262967983a2943a474f85f43144b2b80bd80b18d185415802aa84d22aab5e9c0dcc2f38f025701d7029700ab89b216603e701b5104fdbb863e2f014f03b717e6bf9e3c5a810b53c63544695da247811788426cb74600a84a15dca84dfd7bbada399dde9da8bea6beaace54b7cc95fa97fa958ced91191a5dc96b49776f510f561f4edea5ad7746ca98a77ea920bf49bd2e75bba2911068a17e1a0e6c41b8dab3102568327f0c783edfff13584084c92144b767755353d3fcae986739bb0a782379de033c4cb9fc5d90bc8f207a03338af8014fe6f76d89f2ba6657a9510fd8c92842e6abdb95502dbcdf32b7bca13d7d2e28c8189232c61565e4f7a38ce3f1638d6c872dd50456a0a1441beb6da299515c3988159fd3635617a820e31da2b152891612de390468237a8b1d6caad434692404d62112603be1aa3529812c757966006f7432a8f35880c1c02e29eb7ec03abb3d4b08b76f0106d46b5423dbe01a22d61aa5fd819b81bf009381cd3369fdcff0fcbe2e7000f05b628bbd80c8fcf5d28006ed011af380a504c2adc42a3532af9958d51d81b3807b81e9ea82e4b76d1abf3bb07ece5b469d9e96b43e91fcdea78104d808008b52a921c461e765b585d8f385aa8dc9e7897eff28629526e4e7f434b0399f779efc38116e1529bda629e7ae02364e001625e8dd07a0b0bd15e94d622bda8658a90381bdf3d9adc0bd6a09f9362264de07fe033c081c5de0b5864858ad945be5830a202c02a6148c6d4d4397e5f81660bfe4399a38988dc9e1afe4b8b56c6a882a6c8303d53fe7616381d10829d13b46077794fa4d75aa3a250f2b83d44f586e98bea7dead5e6d343a9f353a3c8f14785e9df206ab27e7f8fb8c0ed468f51b4633a644abb2d630f5a8bb6bdcc836d80e3c411c443622b2ee35c4f1f330e03ce05022e30fca39fb1221f353e00ae07ce280f374bebf3d576b217157b0229fff30e59d0dfc283d0a60cf943f81d895ee005e044e4b392b281f88eaa2b5fca28af15b10c9eb50a2a06922cede1f27ce0497e5fb66c2ed7f910a9d469cda0e0666a7f263d3a02622149af2d30ebc465c89cd02c613bbc156c075444d704ece15b832411f044c25ea91766026f040ea307b2d836b854205d7195270fd222d560fb4dcf89892cf1fcd93d8c8ac0bccb0289dd947abfb19bdfd53d593d4c3d5edd3e54b7227e7dc678c6ef006ea43f96c6a861b5973bc5541bfbb2cdc4bd4753aad123b07657c2d48432e372e27341a1ee373dc5e794c7e505d2f9f7d37c73d9d47e522df66a3e819e0dac7da4d322768b4df50d751ef55172680a502696a8e9b6b1442e719c5d24ae3a6aafe064915003e97029e2ca03e51fdbdd1859962b975f5fd046aeffc7fbc714ba47a591a5d4b7e53f2519d65d61d46b3e435f5d2fc7fd3f4cc1546236447cb1de38773fe293d01c06e89fa2af5ca5c9d52797caefaa67a47baf6c8143ecd72abfa6c23bbbf6dedf61646193cdfb8fc382f9f6d9dabff7886c308f54fc9f3fc82c76d6c5cd4b41b3bd3de3d01c03989b246b535230d29c5eb61b952b766cc1d97e3ff66b4cbd7576fcef92f1a575c1d1429c8dac3d8164d5087a6ebdf9e469d6ae482ebd539c6a54893b1651e92e1b73ae7b75bce3ddd0660a83a3d19fe41bdd068722c527f67747b314ad487d4af273093f37b6bbedf26e799abd8e1ee30bf8f2db8eea34652c438479ca37e35c13833752a0139213d73612ece45eab5b9584fa4b7741b809146ef7f957a6c0194538c0cff92d11a1f9c2130deeaabbbb391d14d858b179bcdeacff2dd0beaee5df01997f13f283de205f529f58b96b3fe61e985b33264eaf3820a03075abe827ac6b87c285d7e8e4eb4675b6891d5e07bbcfabefa7ac17b4a313e37ddf6943a797d39655f9a8060b4dd8fb2bcfdde66c7adb561000618b7b11a5bcb74e3470a93d3659b736527d572af7c3f2243403bdee41c9e5ef67c025b8f97ee6d24e866633b3c2373c574a36fa87a4b7a4ab701d8a01097671a87a2a3d4bf66685c9ccfa845c96f3dcb77fc2717e47c269fcd34db590df0fb9e9138ef495087a95f487e4f55ca0145feb51a08cb29b7bf8f268ec4b700c702171375c0a89ada96692c71b45d46c7f6d95ca2dd350618d700bf8d885f9d5d0e1c03dc485487c714f82ea99b5b25a48c53d7cb89e89c5cf58976fa894a1d7c07a83f2984d3894626df4f3da120e397d671d5de49c766e392f6824c7c669e39a86ef7ef0200d4038c3d7695b1bdcc33f6e2138ccc3fb812f3c2fc75324617a7726b32e12dcfa458e2ab512e7f2d135a573c071b3bc2f1c6a9f4d5e4b13ac3f610ebf8f548bdd52044c7e558e0f3c4ad4c2bd10d7a8db8277892b8f99947f4f2571315e136c4fdc0fe442b6d26115ac3e8f843c9b7f2fd1e4487672a7057f25c4c34448610d764db10d5df4460d3e4532a85afcf5078bd9a21c58ab011004a348ca8cb0f27eafd71949b97a6f22b89527730d1dd6d2262fc3ae052a2846ea3dcbd6d27f2c2bac0b788327a78f26b4fe39a925f4b41ef15c475da03c09df9776157ca772e872b16c7d540284dcef7cde9153ba4477c8448482328d7fb2b8856f82344f3631ab0b2c68fa507122db723818fe58a0f4e3096139e328768aaccccbf6f006b3ae9d77d001a6562b941d996ab58f2887662b597769e57897f0503da08b72ffd7c760591d597131e569367577a7709403d0cab31ed2eafdee2db15afbaa434a27c15eff840d4c82ad76b784300f4a4319514ec2dbe758dedae90ee2a5d4bb9dee2db4ffdd44ffdd44f15e8bf5e9886a456e768390000000049454e44ae426082",
  "origin": "eu1.make.com",
  "public": true,
  "compile": false,
  "created": "2023-07-12T09:41:13.090955+00:00",
  "icon128": "\\",
  "icon256": "\\",
  "icon512": "\\",
  "install": {
    "common": {
      "timeout": "{{parameters.timeout}}"
    }
  },
  "ipmRepo": null,
  "ipmTags": null,
  "version": 1,
  "website": null,
  "_modules": {
    "universal": {
      "id": 106750,
      "api": {
        "qs": {
          "{{...}}": "{{toCollection(parameters.qs, 'key', 'value')}}"
        },
        "url": "https://api-inference.huggingface.co/{{parameters.url}}",
        "body": "{{parameters.body}}",
        "type": "text",
        "method": "{{parameters.method}}",
        "headers": {
          "{{...}}": "{{toCollection(parameters.headers, 'key', 'value')}}"
        },
        "response": {
          "output": {
            "body": "{{body}}",
            "headers": "{{headers}}",
            "statusCode": "{{statusCode}}"
          }
        }
      },
      "rev": 4,
      "crud": null,
      "name": "universal",
      "epoch": null,
      "flags": {},
      "label": "Make an API Call",
      "scope": [],
      "expect": [
        {
          "help": "Enter a path relative to `https://api-inference.huggingface.co`, e.g. `/models/gpt2`. ",
          "name": "url",
          "type": "text",
          "label": "URL",
          "required": true
        },
        {
          "name": "method",
          "type": "select",
          "label": "Method",
          "default": "POST",
          "options": [
            {
              "label": "GET",
              "value": "GET"
            },
            {
              "label": "POST",
              "value": "POST"
            },
            {
              "label": "PUT",
              "value": "PUT"
            },
            {
              "label": "PATCH",
              "value": "PATCH"
            },
            {
              "label": "DELETE",
              "value": "DELETE"
            }
          ],
          "required": true
        },
        {
          "help": "You don't have to add authorization headers; we already did that for you.",
          "name": "headers",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Headers",
          "default": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        {
          "name": "qs",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Query String"
        },
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        }
      ],
      "public": true,
      "typeId": 12,
      "appName": "huggingface",
      "samples": null,
      "apiJsonc": "{\n\t\"qs\": {\n\t\t\"{{...}}\": \"{{toCollection(parameters.qs, 'key', 'value')}}\"\n\t},\n\t\"url\": \"https://api-inference.huggingface.co/{{parameters.url}}\",  // Defines the fixed base URL and maps the relative path URL from the user.\n\t\"body\": \"{{parameters.body}}\",\n\t\"type\": \"text\",\n\t\"method\": \"{{parameters.method}}\",\n\t\"headers\": {\n\t\t\"{{...}}\": \"{{toCollection(parameters.headers, 'key', 'value')}}\"\n\t},\n\t\"response\": {\n\t\t\"output\": {\n\t\t\t\"body\": \"{{body}}\",\n\t\t\t\"headers\": \"{{headers}}\",\n\t\t\t\"statusCode\": \"{{statusCode}}\"\n\t\t}\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        },
        {
          "name": "headers",
          "type": "collection",
          "label": "Headers"
        },
        {
          "name": "statusCode",
          "type": "number",
          "label": "Status code"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "huggingface",
      "description": "Performs an arbitrary authorized API call.",
      "expectJsonc": "[\n\t{\n\t\t\"help\": \"Enter a path relative to `https://api-inference.huggingface.co`, e.g. `/models/gpt2`. \",  // Gives instructions to the user about the relative path.\n\t\t\"name\": \"url\",                                                                        // Makes value accesible via \"{{parameters.url}}\"\".\n\t\t\"type\": \"text\",\n\t\t\"label\": \"URL\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"method\",          // Allows the user to select the method by themselves.\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Method\",\n\t\t\"default\": \"POST\",\n\t\t\"options\": [\n\t\t\t{\n\t\t\t\t\"label\": \"GET\",\n\t\t\t\t\"value\": \"GET\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"POST\",\n\t\t\t\t\"value\": \"POST\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"PUT\",\n\t\t\t\t\"value\": \"PUT\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"PATCH\",\n\t\t\t\t\"value\": \"PATCH\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"DELETE\",\n\t\t\t\t\"value\": \"DELETE\"\n\t\t\t}\n\t\t],\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"help\": \"You don't have to add authorization headers; we already did that for you.\",\n\t\t\"name\": \"headers\",         // Allows the user to add headers by themselves.\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"key\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Key\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"value\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Value\"\n\t\t\t}\n\t\t],\n\t\t\"type\": \"array\",\n\t\t\"label\": \"Headers\",\n\t\t\"default\": [\n\t\t\t{\n\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\"value\": \"application/json\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"qs\",              // Allows the user to set Query String by themselves.\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"key\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Key\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"value\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Value\"\n\t\t\t}\n\t\t],\n\t\t\"type\": \"array\",\n\t\t\"label\": \"Query String\"\n\t},\n\t{\n\t\t\"name\": \"body\",            // Allows the user to set Body by themselves.\n\t\t\"type\": \"any\",\n\t\t\"label\": \"Body\"\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": null,
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "createAnswer": {
      "id": 106744,
      "api": {
        "url": "/models/{{parameters.model}}",
        "body": {
          "inputs": {
            "context": "{{parameters.context}}",
            "question": "{{parameters.question}}"
          }
        },
        "method": "POST",
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 5,
      "crud": "create",
      "name": "createAnswer",
      "epoch": null,
      "flags": {},
      "label": "Create an Answer",
      "scope": [],
      "expect": [
        {
          "help": "You can find the model ID [here](https://huggingface.co/models?pipeline_tag=question-answering). E.g, `deepset/roberta-base-squad2`.",
          "name": "model",
          "type": "text",
          "label": "Model",
          "required": true
        },
        {
          "help": "The question to be answered, e.g. \"What is my name?\".",
          "name": "question",
          "type": "text",
          "label": "Question",
          "required": true
        },
        {
          "help": "The context from where answer can be taken, e.g. \"My name is Clara and I live in Berkeley\".",
          "name": "context",
          "type": "text",
          "label": "Context",
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "huggingface",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/models/{{parameters.model}}\",\n\t\"method\": \"POST\",\n\t\"body\": {\n\t\t\"inputs\": {\n\t\t\t\"question\": \"{{parameters.question}}\",\n\t\t\t\"context\": \"{{parameters.context}}\"\n\t\t}\n\t},\n\t\"response\": {\n\t\t\"output\": \"{{body}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "score",
          "type": "number",
          "label": "Score"
        },
        {
          "name": "start",
          "type": "number",
          "label": "Start"
        },
        {
          "name": "end",
          "type": "number",
          "label": "End"
        },
        {
          "name": "answer",
          "type": "text",
          "label": "Answer"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "huggingface",
      "description": "Creates an answer for a given question.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"model\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"You can find the model ID [here](https://huggingface.co/models?pipeline_tag=question-answering). E.g, `deepset/roberta-base-squad2`.\",\n\t\t\"label\": \"Model\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"question\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"The question to be answered, e.g. \\\"What is my name?\\\".\",\n\t\t\"label\": \"Question\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"context\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"The context from where answer can be taken, e.g. \\\"My name is Clara and I live in Berkeley\\\".\",\n\t\t\"label\": \"Context\",\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"score\",\n        \"label\": \"Score\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"start\",\n        \"label\": \"Start\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"end\",\n        \"label\": \"End\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"answer\",\n        \"label\": \"Answer\",\n        \"type\": \"text\"\n    }\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "createSummary": {
      "id": 106742,
      "api": {
        "url": "/models/{{parameters.model}}",
        "body": {
          "inputs": "{{parameters.inputs}}",
          "options": "{{parameters.options}}",
          "parameters": "{{parameters.params}}"
        },
        "method": "POST",
        "timeout": 180000,
        "response": {
          "output": "{{body[1]}}"
        }
      },
      "rev": 7,
      "crud": "create",
      "name": "createSummary",
      "epoch": null,
      "flags": {},
      "label": "Create a Summary",
      "scope": [],
      "expect": [
        {
          "help": "You can find the model ID [here](https://huggingface.co/models?pipeline_tag=summarization). E.g, `facebook/bart-large-cnn`.",
          "name": "model",
          "type": "text",
          "label": "Model",
          "required": true
        },
        {
          "help": "The string to be summarized.",
          "name": "inputs",
          "type": "text",
          "label": "Inputs",
          "required": true
        },
        {
          "name": "params",
          "spec": [
            {
              "help": "Minimum length in tokens of the output summary.",
              "name": "min_length",
              "type": "uinteger",
              "label": "Min Length"
            },
            {
              "help": "Maximum length in tokens of the output summary.",
              "name": "max_length",
              "type": "uinteger",
              "label": "Max Length"
            },
            {
              "help": "Top tokens considered within the sample operation to create new text.",
              "name": "top_k",
              "type": "uinteger",
              "label": "Top K"
            },
            {
              "help": "Tokens that are within the sample operation of text generation.",
              "name": "top_p",
              "type": "number",
              "label": "Top P"
            },
            {
              "help": "The temperature of the sampling operation. `1` means regular sampling, `0` means always take the highest score, `100.0` is getting closer to uniform probability.",
              "name": "temperature",
              "type": "number",
              "label": "Temperature",
              "validate": {
                "max": 100,
                "min": 0
              }
            },
            {
              "help": "The more a token is used within generation the more it is penalized to not be picked in successive generation passes.",
              "name": "repetition_penalty",
              "type": "number",
              "label": "Repetition Penalty",
              "validate": {
                "max": 100,
                "min": 0
              }
            }
          ],
          "type": "collection",
          "label": "Parameters",
          "advanced": true
        },
        {
          "name": "options",
          "spec": [
            {
              "help": "The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries.",
              "name": "use_cache",
              "type": "boolean",
              "label": "Use Cache"
            },
            {
              "help": "To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.",
              "name": "wait_for_model",
              "type": "boolean",
              "label": "Wait for Model"
            }
          ],
          "type": "collection",
          "label": "Options",
          "advanced": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "huggingface",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/models/{{parameters.model}}\",\n\t\"method\": \"POST\",\n\t\"body\": {\n\t\t\"inputs\": \"{{parameters.inputs}}\",\n\t\t\"parameters\": \"{{parameters.params}}\",\n\t\t\"options\": \"{{parameters.options}}\"\n\t},\n\t\"timeout\": 180000,\n\t\"response\": {\n\t\t\"output\": \"{{body[1]}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "summary_text",
          "type": "text",
          "label": "Summary Text"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "huggingface",
      "description": "Summarizes longer text into shorter text.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"model\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"You can find the model ID [here](https://huggingface.co/models?pipeline_tag=summarization). E.g, `facebook/bart-large-cnn`.\",\n\t\t\"label\": \"Model\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"inputs\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"The string to be summarized.\",\n\t\t\"label\": \"Inputs\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"params\",\n\t\t\"type\": \"collection\",\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"min_length\",\n\t\t\t\t\"type\": \"uinteger\",\n\t\t\t\t\"help\": \"Minimum length in tokens of the output summary.\",\n\t\t\t\t\"label\": \"Min Length\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"max_length\",\n\t\t\t\t\"type\": \"uinteger\",\n\t\t\t\t\"help\": \"Maximum length in tokens of the output summary.\",\n\t\t\t\t\"label\": \"Max Length\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"top_k\",\n\t\t\t\t\"type\": \"uinteger\",\n\t\t\t\t\"help\": \"Top tokens considered within the sample operation to create new text.\",\n\t\t\t\t\"label\": \"Top K\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"top_p\",\n\t\t\t\t\"type\": \"number\",\n\t\t\t\t\"help\": \"Tokens that are within the sample operation of text generation.\",\n\t\t\t\t\"label\": \"Top P\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"temperature\",\n\t\t\t\t\"type\": \"number\",\n\t\t\t\t\"help\": \"The temperature of the sampling operation. `1` means regular sampling, `0` means always take the highest score, `100.0` is getting closer to uniform probability.\",\n\t\t\t\t\"validate\": {\n\t\t\t\t\t\"max\": 100,\n\t\t\t\t\t\"min\": 0\n\t\t\t\t},\n\t\t\t\t\"label\": \"Temperature\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"repetition_penalty\",\n\t\t\t\t\"type\": \"number\",\n\t\t\t\t\"help\": \"The more a token is used within generation the more it is penalized to not be picked in successive generation passes.\",\n\t\t\t\t\"validate\": {\n\t\t\t\t\t\"max\": 100,\n\t\t\t\t\t\"min\": 0\n\t\t\t\t},\n\t\t\t\t\"label\": \"Repetition Penalty\"\n\t\t\t}\n\t\t],\n\t\t\"label\": \"Parameters\",\n\t\t\"advanced\": true\n\t},\n\t{\n\t\t\"name\": \"options\",\n\t\t\"advanced\": true,\n\t\t\"type\": \"collection\",\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"use_cache\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries.\",\n\t\t\t\t\"label\": \"Use Cache\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"wait_for_model\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.\",\n\t\t\t\t\"label\": \"Wait for Model\"\n\t\t\t}\n\t\t],\n\t\t\"label\": \"Options\"\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"summary_text\",\n        \"label\": \"Summary Text\",\n        \"type\": \"text\"\n    }\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "generateImage": {
      "id": 167717,
      "api": {
        "url": "/models/{{parameters.model}}",
        "body": "{{removeEmpty(omit(parameters, 'model', 'options'))}}",
        "method": "POST",
        "headers": {
          "use_cache": "{{parameters.options.use_cache}}",
          "wait_for_model": "{{parameters.options.wait_for_model}}"
        },
        "response": {
          "output": {
            "data": "{{body}}",
            "name": "{{generateImageName(headers.`content-type`)}}"
          }
        }
      },
      "rev": 4,
      "crud": "create",
      "name": "generateImage",
      "epoch": null,
      "flags": {},
      "label": "Generate an Image",
      "scope": [],
      "expect": [
        {
          "help": "You can find the model ID [here](https://huggingface.co/models?inference=warm&pipeline_tag=text-to-image&sort=trending). E.g, `stabilityai/stable-diffusion-3-medium-diffusers`.",
          "name": "model",
          "type": "text",
          "label": "Model",
          "required": true
        },
        {
          "help": "The text prompt for generating an image.",
          "name": "inputs",
          "type": "text",
          "label": "Prompt",
          "required": true
        },
        {
          "name": "parameters",
          "spec": [
            {
              "help": "A higher guidance scale value encourages the model to generate images closely linked to the text prompt, but values too high may cause saturation and other artifacts.",
              "name": "guidance_scale",
              "type": "number",
              "label": "Guidance Scale"
            },
            {
              "help": "The text prompt to guide what not to include in image generation. Not all models support this feature.",
              "name": "negative_prompt",
              "type": "text",
              "label": "Negative Prompt"
            },
            {
              "help": "The number of denoising steps. More denoising steps usually lead to a higher quality image at the expense of slower inference.",
              "name": "num_inference_steps",
              "type": "integer",
              "label": "Num Inference Steps"
            },
            {
              "help": "The size in pixel of the output image. Not all models support this feature.",
              "name": "target_size",
              "spec": [
                {
                  "name": "width",
                  "type": "integer",
                  "label": "Width"
                },
                {
                  "name": "height",
                  "type": "integer",
                  "label": "Height"
                }
              ],
              "type": "collection",
              "label": "Target Size"
            },
            {
              "help": "Override the scheduler with a compatible one.",
              "name": "scheduler",
              "type": "text",
              "label": "Scheduler"
            },
            {
              "help": "Seed for the random number generator.",
              "name": "seed",
              "type": "integer",
              "label": "Seed"
            }
          ],
          "type": "collection",
          "label": "Parameters",
          "advanced": true
        },
        {
          "name": "options",
          "spec": [
            {
              "help": "The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries.",
              "name": "use_cache",
              "type": "boolean",
              "label": "Use Cache"
            },
            {
              "help": "To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.",
              "name": "wait_for_model",
              "type": "boolean",
              "label": "Wait for Model"
            }
          ],
          "type": "collection",
          "label": "Options",
          "advanced": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "huggingface",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/models/{{parameters.model}}\",\n\t\"method\": \"POST\",\n\t\"headers\": {\n\t\t\"use_cache\": \"{{parameters.options.use_cache}}\",\n\t\t\"wait_for_model\": \"{{parameters.options.wait_for_model}}\"\n\t},\n\t\"body\": \"{{removeEmpty(omit(parameters, 'model', 'options'))}}\",\n\t\"response\": {\n\t\t\"output\": {\n\t\t\t\"name\": \"{{generateImageName(headers.`content-type`)}}\",\n\t\t\t\"data\": \"{{body}}\"\n\t\t}\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "name",
          "type": "filename",
          "label": "Name",
          "semantic": "file:name"
        },
        {
          "name": "data",
          "type": "buffer",
          "label": "Data",
          "semantic": "file:data"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "huggingface",
      "description": "Generates an image based on a given text prompt.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"model\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"You can find the model ID [here](https://huggingface.co/models?inference=warm&pipeline_tag=text-to-image&sort=trending). E.g, `stabilityai/stable-diffusion-3-medium-diffusers`.\",\n\t\t\"label\": \"Model\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"inputs\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"The text prompt for generating an image.\",\n\t\t\"label\": \"Prompt\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"parameters\",\n\t\t\"type\": \"collection\",\n\t\t\"advanced\": true,\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"guidance_scale\",\n\t\t\t\t\"type\": \"number\",\n\t\t\t\t\"label\": \"Guidance Scale\",\n\t\t\t\t\"help\": \"A higher guidance scale value encourages the model to generate images closely linked to the text prompt, but values too high may cause saturation and other artifacts.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"negative_prompt\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Negative Prompt\",\n\t\t\t\t\"help\": \"The text prompt to guide what not to include in image generation. Not all models support this feature.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"num_inference_steps\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"label\": \"Num Inference Steps\",\n\t\t\t\t\"help\": \"The number of denoising steps. More denoising steps usually lead to a higher quality image at the expense of slower inference.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"target_size\",\n\t\t\t\t\"type\": \"collection\",\n\t\t\t\t\"spec\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"width\",\n\t\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\t\"label\": \"Width\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"height\",\n\t\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\t\"label\": \"Height\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"label\": \"Target Size\",\n\t\t\t\t\"help\": \"The size in pixel of the output image. Not all models support this feature.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"scheduler\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Scheduler\",\n\t\t\t\t\"help\": \"Override the scheduler with a compatible one.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"seed\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"label\": \"Seed\",\n\t\t\t\t\"help\": \"Seed for the random number generator.\"\n\t\t\t}\n\t\t],\n\t\t\"label\": \"Parameters\"\n\t},\n\t{\n\t\t\"name\": \"options\",\n\t\t\"type\": \"collection\",\n\t\t\"advanced\": true,\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"use_cache\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries.\",\n\t\t\t\t\"label\": \"Use Cache\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"wait_for_model\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.\",\n\t\t\t\t\"label\": \"Wait for Model\"\n\t\t\t}\n\t\t],\n\t\t\"label\": \"Options\"\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"name\",\n        \"type\": \"filename\",\n        \"label\": \"Name\",\n        \"semantic\": \"file:name\"\n    },\n    {\n        \"name\": \"data\",\n        \"type\": \"buffer\",\n        \"label\": \"Data\",\n        \"semantic\": \"file:data\"\n    }\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "createTranslation": {
      "id": 106749,
      "api": {
        "url": "/models/{{parameters.model}}",
        "body": {
          "{{...}}": "{{parameters}}"
        },
        "method": "POST",
        "response": {
          "output": "{{body[1]}}"
        }
      },
      "rev": 5,
      "crud": "create",
      "name": "createTranslation",
      "epoch": null,
      "flags": {},
      "label": "Create a Translation",
      "scope": [],
      "expect": [
        {
          "help": "You can find the model ID [here](https://huggingface.co/models?pipeline_tag=translation). E.g, `Helsinki-NLP/opus-mt-ru-en`.",
          "name": "model",
          "type": "text",
          "label": "Model",
          "required": true
        },
        {
          "help": "The string to be translated in the original languages.",
          "name": "inputs",
          "type": "text",
          "label": "Inputs",
          "required": true
        },
        {
          "name": "options",
          "spec": [
            {
              "help": "The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries.",
              "name": "use_cache",
              "type": "boolean",
              "label": "Use Cache"
            },
            {
              "help": "To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.",
              "name": "wait_for_model",
              "type": "boolean",
              "label": "Wait for Model"
            }
          ],
          "type": "collection",
          "label": "Options",
          "advanced": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "huggingface",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/models/{{parameters.model}}\",\n\t\"method\": \"POST\",\n\t\"body\": {\n\t\t\"{{...}}\": \"{{parameters}}\"\n\t},\n\t\"response\": {\n\t\t\"output\": \"{{body[1]}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "translation_text",
          "type": "text",
          "label": "Translation Text"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "huggingface",
      "description": "Creates a translation of the text.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"model\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"You can find the model ID [here](https://huggingface.co/models?pipeline_tag=translation). E.g, `Helsinki-NLP/opus-mt-ru-en`.\",\n\t\t\"label\": \"Model\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"inputs\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"The string to be translated in the original languages.\",\n\t\t\"label\": \"Inputs\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"options\",\n\t\t\"type\": \"collection\",\n\t\t\"advanced\": true,\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"use_cache\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries.\",\n\t\t\t\t\"label\": \"Use Cache\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"wait_for_model\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.\",\n\t\t\t\t\"label\": \"Wait for Model\"\n\t\t\t}\n\t\t],\n\t\t\"label\": \"Options\"\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"translation_text\",\n        \"label\": \"Translation Text\",\n        \"type\": \"text\"\n    }\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "createChatCompletion": {
      "id": 167812,
      "api": {
        "url": "/models/{{parameters.model}}/v1/chat/completions",
        "body": {
          "tools": "{{removeEmpty(formatTools(parameters.tools))}}",
          "{{...}}": "{{removeEmpty(omit(parameters, 'model', 'messages', 'options', 'tools'))}}",
          "messages": "{{formatMessages(parameters.messages)}}"
        },
        "method": "POST",
        "headers": {
          "use_cache": "{{parameters.options.use_cache}}",
          "wait_for_model": "{{parameters.options.wait_for_model}}"
        },
        "response": {
          "output": {
            "{{...}}": "{{formatDates(body)}}",
            "mappableMessage": "{{get(get(body.choices, length(body.choices)), 'message.content')}}"
          }
        }
      },
      "rev": 5,
      "crud": "create",
      "name": "createChatCompletion",
      "epoch": null,
      "flags": {},
      "label": "Create a Chat Completion (Prompt)",
      "scope": [],
      "expect": [
        {
          "help": "You can find the model ID for conversational large language models [here](https://huggingface.co/models?inference_provider=hf-inference&pipeline_tag=text-generation&sort=trending) and for conversational vision language models [here](https://huggingface.co/models?inference_provider=hf-inference&pipeline_tag=image-text-to-text&sort=trending). E.g, `google/gemma-2-2b-it`.",
          "name": "model",
          "type": "text",
          "label": "Model",
          "required": true
        },
        {
          "help": "A list of messages comprising the conversation so far.",
          "name": "messages",
          "spec": {
            "spec": [
              {
                "name": "role",
                "type": "select",
                "label": "Role",
                "options": [
                  {
                    "label": "User",
                    "value": "user"
                  },
                  {
                    "label": "Assistant",
                    "value": "assistant"
                  }
                ],
                "required": true
              },
              {
                "name": "contentType",
                "type": "select",
                "label": "Content Type",
                "options": [
                  {
                    "label": "Text",
                    "value": "text",
                    "nested": [
                      {
                        "name": "content",
                        "type": "text",
                        "label": "Content",
                        "required": true
                      }
                    ]
                  },
                  {
                    "label": "Advanced object",
                    "value": "object",
                    "nested": [
                      {
                        "name": "content",
                        "spec": {
                          "spec": [
                            {
                              "name": "type",
                              "type": "select",
                              "label": "Type",
                              "options": [
                                {
                                  "label": "Text",
                                  "value": "text",
                                  "nested": [
                                    {
                                      "name": "text",
                                      "type": "text",
                                      "label": "Text",
                                      "required": true
                                    }
                                  ]
                                },
                                {
                                  "label": "Image URL",
                                  "value": "image_url",
                                  "nested": [
                                    {
                                      "name": "image_url",
                                      "spec": [
                                        {
                                          "name": "url",
                                          "type": "url",
                                          "label": "URL",
                                          "required": true
                                        }
                                      ],
                                      "type": "collection",
                                      "label": "Image URL",
                                      "required": true
                                    }
                                  ]
                                }
                              ],
                              "required": true
                            }
                          ],
                          "type": "collection",
                          "label": "Content"
                        },
                        "type": "array",
                        "label": "Content",
                        "labels": {
                          "add": "Add content"
                        },
                        "required": true
                      }
                    ]
                  }
                ],
                "required": true
              },
              {
                "help": "Label the message using a custom name.",
                "name": "name",
                "type": "text",
                "label": "Name"
              }
            ],
            "type": "collection",
            "label": "Message"
          },
          "type": "array",
          "label": "Messages",
          "labels": {
            "add": "Add message"
          },
          "required": true
        },
        {
          "help": "The maximum number of tokens that can be generated in the chat completion.",
          "name": "max_tokens",
          "type": "integer",
          "label": "Max Tokens"
        },
        {
          "help": "Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or __Top P__ but not both.",
          "name": "temperature",
          "type": "number",
          "label": "Temperature",
          "advanced": true,
          "validate": {
            "max": 2,
            "min": 0
          }
        },
        {
          "help": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with __Top P__ probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
          "name": "top_p",
          "type": "number",
          "label": "Top P",
          "advanced": true,
          "validate": {
            "max": 0.99,
            "min": 0.01
          }
        },
        {
          "help": "Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model’s likelihood to repeat the same line verbatim.",
          "name": "frequency_penalty",
          "type": "number",
          "label": "Frequency Penalty",
          "advanced": true,
          "validate": {
            "max": 2,
            "min": -2
          }
        },
        {
          "help": "Positive values penalize new tokens based on whether they appear in the text so far, increasing the model’s likelihood to talk about new topics.",
          "name": "presence_penalty",
          "type": "number",
          "label": "Presence Penalty",
          "advanced": true,
          "validate": {
            "min": 0
          }
        },
        {
          "help": "Whether to return log probabilities of the output tokens or not. If `Yes`, returns the log probabilities of each output token returned in the content of message.",
          "name": "logprobs",
          "type": "boolean",
          "label": "Log Probabilities",
          "nested": [
            {
              "help": "The number of most likely tokens to return at each token position, each with an associated log probability.",
              "name": "top_logprobs",
              "type": "integer",
              "label": "Top Logprobs",
              "validate": {
                "max": 5,
                "min": 0
              }
            }
          ],
          "advanced": true
        },
        {
          "name": "seed",
          "type": "integer",
          "label": "Seed",
          "advanced": true
        },
        {
          "help": "Up to 4 sequences where the API will stop generating further tokens.",
          "name": "stop",
          "spec": {
            "type": "text",
            "label": "Stop sequence"
          },
          "type": "array",
          "label": "Stop",
          "labels": {
            "add": "Add stop sequence"
          },
          "advanced": true,
          "validate": {
            "maxItems": 4
          }
        },
        {
          "name": "response_format",
          "spec": [
            {
              "name": "type",
              "type": "select",
              "label": "Type",
              "options": [
                {
                  "label": "JSON",
                  "value": "json",
                  "nested": [
                    {
                      "help": "A string that represents a JSON schema. JSON schema is a declarative language that allows to annotate JSON documents with types and descriptions.",
                      "name": "value",
                      "type": "text",
                      "label": "Value"
                    }
                  ]
                },
                {
                  "label": "RegEx",
                  "value": "regex",
                  "nested": [
                    {
                      "name": "value",
                      "type": "text",
                      "label": "Value"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "collection",
          "label": "Response Format",
          "advanced": true
        },
        {
          "name": "tool_choice",
          "type": "select",
          "label": "Tool Choice",
          "options": [
            {
              "label": "Auto",
              "value": "auto"
            },
            {
              "label": "None",
              "value": "none"
            },
            {
              "label": "Required",
              "value": "required"
            }
          ],
          "advanced": true,
          "validate": false
        },
        {
          "help": "A prompt to be appended before the tools.",
          "name": "tool_prompt",
          "type": "text",
          "label": "Tool Prompt",
          "advanced": true
        },
        {
          "help": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.",
          "name": "tools",
          "spec": {
            "spec": [
              {
                "name": "function",
                "spec": [
                  {
                    "help": "A JSON object with function arguments. An example is provided [here](https://huggingface.co/blog/unified-tool-use).",
                    "name": "arguments",
                    "type": "any",
                    "label": "Arguments"
                  },
                  {
                    "name": "description",
                    "type": "text",
                    "label": "Description"
                  },
                  {
                    "name": "name",
                    "type": "text",
                    "label": "Name"
                  }
                ],
                "type": "collection",
                "label": "Function"
              },
              {
                "name": "type",
                "type": "text",
                "label": "Type"
              }
            ],
            "type": "collection",
            "label": "Tool"
          },
          "type": "array",
          "label": "Tools",
          "labels": {
            "add": "Add tool"
          },
          "advanced": true
        },
        {
          "name": "options",
          "spec": [
            {
              "help": "The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries.",
              "name": "use_cache",
              "type": "boolean",
              "label": "Use Cache"
            },
            {
              "help": "To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.",
              "name": "wait_for_model",
              "type": "boolean",
              "label": "Wait for Model"
            }
          ],
          "type": "collection",
          "label": "Options",
          "advanced": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "huggingface",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/models/{{parameters.model}}/v1/chat/completions\",\n\t\"method\": \"POST\",\n\t\"headers\": {\n\t\t\"use_cache\": \"{{parameters.options.use_cache}}\",\n\t\t\"wait_for_model\": \"{{parameters.options.wait_for_model}}\"\n\t},\n\t\"body\": {\n\t\t\"{{...}}\": \"{{removeEmpty(omit(parameters, 'model', 'messages', 'options', 'tools'))}}\",\n\t\t\"tools\": \"{{removeEmpty(formatTools(parameters.tools))}}\",\n\t\t\"messages\": \"{{formatMessages(parameters.messages)}}\"\n\t},\n\t\"response\": {\n\t\t\"output\": {\n\t\t\t\"{{...}}\": \"{{formatDates(body)}}\",\n\t\t\t\"mappableMessage\": \"{{get(get(body.choices, length(body.choices)), 'message.content')}}\"\n\t\t}\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "object",
          "type": "text",
          "label": "Object"
        },
        {
          "name": "id",
          "type": "text",
          "label": "Unique ID"
        },
        {
          "name": "created",
          "type": "date",
          "label": "Created"
        },
        {
          "name": "model",
          "type": "text",
          "label": "Model"
        },
        {
          "name": "system_fingerprint",
          "type": "text",
          "label": "System Fingerprint"
        },
        {
          "name": "choices",
          "spec": {
            "spec": [
              {
                "name": "index",
                "type": "number",
                "label": "Index"
              },
              {
                "name": "message",
                "spec": [
                  {
                    "name": "role",
                    "type": "text",
                    "label": "Role"
                  },
                  {
                    "name": "tool_calls",
                    "spec": {
                      "spec": [
                        {
                          "name": "id",
                          "type": "text",
                          "label": "Tool Call ID"
                        },
                        {
                          "name": "type",
                          "type": "text",
                          "label": "Type"
                        },
                        {
                          "name": "function",
                          "spec": [
                            {
                              "name": "description",
                              "type": "text",
                              "label": "Description"
                            },
                            {
                              "name": "name",
                              "type": "text",
                              "label": "Name"
                            },
                            {
                              "name": "arguments",
                              "type": "collection",
                              "label": "Arguments"
                            }
                          ],
                          "type": "collection",
                          "label": "Function"
                        }
                      ],
                      "type": "collection"
                    },
                    "type": "array",
                    "label": "Tool Calls"
                  },
                  {
                    "name": "content",
                    "type": "text",
                    "label": "Content"
                  }
                ],
                "type": "collection",
                "label": "Message"
              },
              {
                "name": "logprobs",
                "spec": [
                  {
                    "name": "content",
                    "spec": {
                      "spec": [
                        {
                          "name": "token",
                          "type": "text",
                          "label": "Token"
                        },
                        {
                          "name": "logprob",
                          "type": "number",
                          "label": "Log Probabilities"
                        },
                        {
                          "name": "top_logprobs",
                          "spec": {
                            "spec": [
                              {
                                "name": "token",
                                "type": "text",
                                "label": "Token"
                              },
                              {
                                "name": "logprob",
                                "type": "number",
                                "label": "Log Probabilities"
                              }
                            ],
                            "type": "collection"
                          },
                          "type": "array",
                          "label": "Top Log Probabilities"
                        }
                      ],
                      "type": "collection"
                    },
                    "type": "array",
                    "label": "Content"
                  }
                ],
                "type": "collection",
                "label": "Log Probabilities"
              },
              {
                "name": "finish_reason",
                "type": "text",
                "label": "Finish Reason"
              }
            ],
            "type": "collection"
          },
          "type": "array",
          "label": "Choices"
        },
        {
          "name": "usage",
          "spec": [
            {
              "name": "prompt_tokens",
              "type": "number",
              "label": "Prompt Tokens"
            },
            {
              "name": "completion_tokens",
              "type": "number",
              "label": "Completion Tokens"
            },
            {
              "name": "total_tokens",
              "type": "number",
              "label": "Total Tokens"
            }
          ],
          "type": "collection",
          "label": "Usage"
        },
        {
          "name": "mappableMessage",
          "type": "text",
          "label": "Mappable Message"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "huggingface",
      "description": "Generates a response given a list of messages in a conversational context.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"model\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"You can find the model ID for conversational large language models [here](https://huggingface.co/models?inference_provider=hf-inference&pipeline_tag=text-generation&sort=trending) and for conversational vision language models [here](https://huggingface.co/models?inference_provider=hf-inference&pipeline_tag=image-text-to-text&sort=trending). E.g, `google/gemma-2-2b-it`.\",\n\t\t\"label\": \"Model\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"messages\",\n\t\t\"type\": \"array\",\n\t\t\"spec\": {\n\t\t\t\"type\": \"collection\",\n\t\t\t\"label\": \"Message\",\n\t\t\t\"spec\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"role\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"options\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"label\": \"User\",\n\t\t\t\t\t\t\t\"value\": \"user\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"label\": \"Assistant\",\n\t\t\t\t\t\t\t\"value\": \"assistant\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"label\": \"Role\",\n\t\t\t\t\t\"required\": true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"contentType\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"options\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"label\": \"Text\",\n\t\t\t\t\t\t\t\"value\": \"text\",\n\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"name\": \"content\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Content\",\n\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"label\": \"Advanced object\",\n\t\t\t\t\t\t\t\"value\": \"object\",\n\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"name\": \"content\",\n\t\t\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\t\"type\": \"collection\",\n\t\t\t\t\t\t\t\t\t\t\"label\": \"Content\",\n\t\t\t\t\t\t\t\t\t\t\"spec\": [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"name\": \"type\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"options\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Text\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"text\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"name\": \"text\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Text\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Image URL\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"image_url\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"name\": \"image_url\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"collection\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"spec\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"name\": \"url\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"url\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"label\": \"URL\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Image URL\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Type\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"label\": \"Content\",\n\t\t\t\t\t\t\t\t\t\"labels\": {\n\t\t\t\t\t\t\t\t\t\t\"add\": \"Add content\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"label\": \"Content Type\",\n\t\t\t\t\t\"required\": true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"name\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"label\": \"Name\",\n\t\t\t\t\t\"help\": \"Label the message using a custom name.\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"label\": \"Messages\",\n\t\t\"help\": \"A list of messages comprising the conversation so far.\",\n\t\t\"labels\": {\n\t\t\t\"add\": \"Add message\"\n\t\t},\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"max_tokens\",\n\t\t\"type\": \"integer\",\n\t\t\"label\": \"Max Tokens\",\n\t\t\"help\": \"The maximum number of tokens that can be generated in the chat completion.\"\n\t},\n\t{\n\t\t\"name\": \"temperature\",\n\t\t\"type\": \"number\",\n\t\t\"label\": \"Temperature\",\n\t\t\"help\": \"Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or __Top P__ but not both.\",\n\t\t\"validate\": {\n\t\t\t\"max\": 2,\n\t\t\t\"min\": 0\n\t\t},\n\t\t\"advanced\": true\n\t},\n\t{\n\t\t\"name\": \"top_p\",\n\t\t\"type\": \"number\",\n\t\t\"label\": \"Top P\",\n\t\t\"help\": \"An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with __Top P__ probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\",\n\t\t\"validate\": {\n\t\t\t\"max\": 0.99,\n\t\t\t\"min\": 0.01\n\t\t},\n\t\t\"advanced\": true\n\t},\n\t{\n\t\t\"name\": \"frequency_penalty\",\n\t\t\"type\": \"number\",\n\t\t\"label\": \"Frequency Penalty\",\n\t\t\"help\": \"Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model’s likelihood to repeat the same line verbatim.\",\n\t\t\"validate\": {\n\t\t\t\"max\": 2.0,\n\t\t\t\"min\": -2.0\n\t\t},\n\t\t\"advanced\": true\n\t},\n\t{\n\t\t\"name\": \"presence_penalty\",\n\t\t\"type\": \"number\",\n\t\t\"label\": \"Presence Penalty\",\n\t\t\"help\": \"Positive values penalize new tokens based on whether they appear in the text so far, increasing the model’s likelihood to talk about new topics.\",\n\t\t\"validate\": {\n\t\t\t\"min\": 0\n\t\t},\n\t\t\"advanced\": true\n\t},\n\t{\n\t\t\"name\": \"logprobs\",\n\t\t\"type\": \"boolean\",\n\t\t\"label\": \"Log Probabilities\",\n\t\t\"help\": \"Whether to return log probabilities of the output tokens or not. If `Yes`, returns the log probabilities of each output token returned in the content of message.\",\n\t\t\"nested\": [\n\t\t\t{\n\t\t\t\t\"name\": \"top_logprobs\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"label\": \"Top Logprobs\",\n\t\t\t\t\"help\": \"The number of most likely tokens to return at each token position, each with an associated log probability.\",\n\t\t\t\t\"validate\": {\n\t\t\t\t\t\"max\": 5,\n\t\t\t\t\t\"min\": 0\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"advanced\": true\n\t},\n\t{\n\t\t\"name\": \"seed\",\n\t\t\"type\": \"integer\",\n\t\t\"label\": \"Seed\",\n\t\t\"advanced\": true\n\t},\n\t{\n\t\t\"name\": \"stop\",\n\t\t\"type\": \"array\",\n\t\t\"spec\": {\n\t\t\t\"type\": \"text\",\n\t\t\t\"label\": \"Stop sequence\"\n\t\t},\n\t\t\"label\": \"Stop\",\n\t\t\"help\": \"Up to 4 sequences where the API will stop generating further tokens.\",\n\t\t\"validate\": {\n\t\t\t\"maxItems\": 4\n\t\t},\n\t\t\"advanced\": true,\n\t\t\"labels\": {\n\t\t\t\"add\": \"Add stop sequence\"\n\t\t}\n\t},\n\t{\n\t\t\"name\": \"response_format\",\n\t\t\"type\": \"collection\",\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"type\",\n\t\t\t\t\"type\": \"select\",\n\t\t\t\t\"options\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"JSON\",\n\t\t\t\t\t\t\"value\": \"json\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"value\",\n\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\"label\": \"Value\",\n\t\t\t\t\t\t\t\t\"help\": \"A string that represents a JSON schema. JSON schema is a declarative language that allows to annotate JSON documents with types and descriptions.\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"RegEx\",\n\t\t\t\t\t\t\"value\": \"regex\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"value\",\n\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\"label\": \"Value\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"label\": \"Type\"\n\t\t\t}\n\t\t],\n\t\t\"label\": \"Response Format\",\n\t\t\"advanced\": true\n\t},\n\t// Decided to not include it in params for users because of different input, let's save it for future\n\t// {\n\t// \t\"name\": \"stream\",\n\t// \t\"type\": \"boolean\",\n\t// \t\"label\": \"Stream\"\n\t// },\n\t// {\n\t// \t\"name\": \"stream_options\",\n\t// \t\"type\": \"collection\",\n\t// \t\"spec\": [\n\t// \t\t{\n\t// \t\t\t\"name\": \"include_usage\",\n\t// \t\t\t\"type\": \"boolean\",\n\t// \t\t\t\"label\": \"Include Usage\",\n\t// \t\t\t\"help\": \"If set, an additional chunk will be streamed before the data: `[DONE]` message. The usage field on this chunk shows the token usage statistics for the entire request, and the choices field will always be an empty array. All other chunks will also include a usage field, but with a `null` value.\"\n\t// \t\t}\n\t// \t],\n\t// \t\"label\": \"Stream Options\"\n\t// },\n\t{\n\t\t\"name\": \"tool_choice\",\n\t\t\"type\": \"select\",\n\t\t\"options\": [\n\t\t\t{\n\t\t\t\t\"label\": \"Auto\",\n\t\t\t\t\"value\": \"auto\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"None\",\n\t\t\t\t\"value\": \"none\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Required\",\n\t\t\t\t\"value\": \"required\"\n\t\t\t}\n\t\t\t// here available one more option - an object with the function name\n\t\t\t// but I removed it for now as it always throws an error\n\t\t],\n\t\t\"label\": \"Tool Choice\",\n\t\t\"validate\": false,\n\t\t\"advanced\": true\n\t},\n\t{\n\t\t\"name\": \"tool_prompt\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Tool Prompt\",\n\t\t\"help\": \"A prompt to be appended before the tools.\",\n\t\t\"advanced\": true\n\t},\n\t{\n\t\t\"name\": \"tools\",\n\t\t\"type\": \"array\",\n\t\t\"spec\": {\n\t\t\t\"type\": \"collection\",\n\t\t\t\"label\": \"Tool\",\n\t\t\t\"spec\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"function\",\n\t\t\t\t\t\"type\": \"collection\",\n\t\t\t\t\t\"spec\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"arguments\",\n\t\t\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\t\t\"label\": \"Arguments\",\n\t\t\t\t\t\t\t\"help\": \"A JSON object with function arguments. An example is provided [here](https://huggingface.co/blog/unified-tool-use).\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"description\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"label\": \"Description\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"name\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"label\": \"Name\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"label\": \"Function\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"type\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"label\": \"Type\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"label\": \"Tools\",\n\t\t\"help\": \"A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.\",\n\t\t\"advanced\": true,\n\t\t\"labels\": {\n\t\t\t\"add\": \"Add tool\"\n\t\t}\n\t},\n\t{\n\t\t\"name\": \"options\",\n\t\t\"type\": \"collection\",\n\t\t\"advanced\": true,\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"use_cache\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries.\",\n\t\t\t\t\"label\": \"Use Cache\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"wait_for_model\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.\",\n\t\t\t\t\"label\": \"Wait for Model\"\n\t\t\t}\n\t\t],\n\t\t\"label\": \"Options\"\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"object\",\n        \"type\": \"text\",\n        \"label\": \"Object\"\n    },\n    {\n        \"name\": \"id\",\n        \"type\": \"text\",\n        \"label\": \"Unique ID\"\n    },\n    {\n        \"name\": \"created\",\n        \"type\": \"date\",\n        \"label\": \"Created\"\n    },\n    {\n        \"name\": \"model\",\n        \"type\": \"text\",\n        \"label\": \"Model\"\n    },\n    {\n        \"name\": \"system_fingerprint\",\n        \"type\": \"text\",\n        \"label\": \"System Fingerprint\"\n    },\n    {\n        \"name\": \"choices\",\n        \"type\": \"array\",\n        \"spec\": {\n            \"type\": \"collection\",\n            \"spec\": [\n                {\n                    \"name\": \"index\",\n                    \"type\": \"number\",\n                    \"label\": \"Index\"\n                },\n                {\n                    \"name\": \"message\",\n                    \"type\": \"collection\",\n                    \"spec\": [\n                        {\n                            \"name\": \"role\",\n                            \"type\": \"text\",\n                            \"label\": \"Role\"\n                        },\n                        {\n                            \"name\": \"tool_calls\",\n                            \"type\": \"array\",\n                            \"spec\": {\n                                \"type\": \"collection\",\n                                \"spec\": [\n                                    {\n                                        \"name\": \"id\",\n                                        \"type\": \"text\",\n                                        \"label\": \"Tool Call ID\"\n                                    },\n                                    {\n                                        \"name\": \"type\",\n                                        \"type\": \"text\",\n                                        \"label\": \"Type\"\n                                    },\n                                    {\n                                        \"name\": \"function\",\n                                        \"type\": \"collection\",\n                                        \"spec\": [\n                                            {\n                                                \"name\": \"description\",\n                                                \"type\": \"text\",\n                                                \"label\": \"Description\"\n                                            },\n                                            {\n                                                \"name\": \"name\",\n                                                \"type\": \"text\",\n                                                \"label\": \"Name\"\n                                            },\n                                            {\n                                                \"name\": \"arguments\",\n                                                \"type\": \"collection\",\n                                                \"label\": \"Arguments\"\n                                            }\n                                        ],\n                                        \"label\": \"Function\"\n                                    }\n                                ]\n                            },\n                            \"label\": \"Tool Calls\"\n                        },\n                        {\n                            \"name\": \"content\",\n                            \"type\": \"text\",\n                            \"label\": \"Content\"\n                        }\n                    ],\n                    \"label\": \"Message\"\n                },\n                {\n                    \"name\": \"logprobs\",\n                    \"type\": \"collection\",\n                    \"spec\": [\n                        {\n                            \"name\": \"content\",\n                            \"type\": \"array\",\n                            \"spec\": {\n                                \"type\": \"collection\",\n                                \"spec\": [\n                                    {\n                                        \"name\": \"token\",\n                                        \"type\": \"text\",\n                                        \"label\": \"Token\"\n                                    },\n                                    {\n                                        \"name\": \"logprob\",\n                                        \"type\": \"number\",\n                                        \"label\": \"Log Probabilities\"\n                                    },\n                                    {\n                                        \"name\": \"top_logprobs\",\n                                        \"type\": \"array\",\n                                        \"spec\": {\n                                            \"type\": \"collection\",\n                                            \"spec\": [\n                                                {\n                                                    \"name\": \"token\",\n                                                    \"type\": \"text\",\n                                                    \"label\": \"Token\"\n                                                },\n                                                {\n                                                    \"name\": \"logprob\",\n                                                    \"type\": \"number\",\n                                                    \"label\": \"Log Probabilities\"\n                                                }\n                                            ]\n                                        },\n                                        \"label\": \"Top Log Probabilities\"\n                                    }\n                                ]\n                            },\n                            \"label\": \"Content\"\n                        }\n                    ],\n                    \"label\": \"Log Probabilities\"\n                },\n                {\n                    \"name\": \"finish_reason\",\n                    \"type\": \"text\",\n                    \"label\": \"Finish Reason\"\n                }\n            ]\n        },\n        \"label\": \"Choices\"\n    },\n    {\n        \"name\": \"usage\",\n        \"type\": \"collection\",\n        \"spec\": [\n            {\n                \"name\": \"prompt_tokens\",\n                \"type\": \"number\",\n                \"label\": \"Prompt Tokens\"\n            },\n            {\n                \"name\": \"completion_tokens\",\n                \"type\": \"number\",\n                \"label\": \"Completion Tokens\"\n            },\n            {\n                \"name\": \"total_tokens\",\n                \"type\": \"number\",\n                \"label\": \"Total Tokens\"\n            }\n        ],\n        \"label\": \"Usage\"\n    },\n    {\n        \"name\": \"mappableMessage\",\n        \"type\": \"text\",\n        \"label\": \"Mappable Message\"\n    }\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "createTextClassification": {
      "id": 106747,
      "api": {
        "url": "/models/{{parameters.model}}",
        "body": {
          "{{...}}": "{{parameters}}"
        },
        "method": "POST",
        "response": {
          "output": "{{item}}",
          "iterate": "{{body[1]}}"
        }
      },
      "rev": 5,
      "crud": "read",
      "name": "createTextClassification",
      "epoch": null,
      "flags": {},
      "label": "Create a Text Classification",
      "scope": [],
      "expect": [
        {
          "help": "You can find the model ID [here](https://huggingface.co/models?pipeline_tag=text-classification). E.g, `distilbert-base-uncased-finetuned-sst-2-english`.",
          "name": "model",
          "type": "text",
          "label": "Model",
          "required": true
        },
        {
          "help": "The string to be classified.",
          "name": "inputs",
          "type": "text",
          "label": "Inputs",
          "required": true
        },
        {
          "name": "options",
          "spec": [
            {
              "help": "The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries. ",
              "name": "use_cache",
              "type": "boolean",
              "label": "Use Cache"
            },
            {
              "help": "To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.",
              "name": "wait_for_model",
              "type": "boolean",
              "label": "Wait for Model"
            }
          ],
          "type": "collection",
          "label": "Options",
          "advanced": true
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "huggingface",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/models/{{parameters.model}}\",\n\t\"method\": \"POST\",\n\t\"body\": {\n\t\t\"{{...}}\": \"{{parameters}}\"\n\t},\n\t\"response\": {\n\t\t\"iterate\": \"{{body[1]}}\",\n\t\t\"output\": \"{{item}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "label",
          "type": "text",
          "label": "Label"
        },
        {
          "name": "score",
          "type": "number",
          "label": "Score"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "huggingface",
      "description": "Creates a text classification.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"model\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"You can find the model ID [here](https://huggingface.co/models?pipeline_tag=text-classification). E.g, `distilbert-base-uncased-finetuned-sst-2-english`.\",\n\t\t\"label\": \"Model\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"inputs\",\n\t\t\"type\": \"text\",\n\t\t\"help\": \"The string to be classified.\",\n\t\t\"label\": \"Inputs\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"options\",\n\t\t\"type\": \"collection\",\n\t\t\"advanced\": true,\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"use_cache\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"The inference API has a cache layer to speed up repeated requests. Deterministic models can directly utilize the cached results. For non-deterministic models, you can disable caching to generate fresh queries. \",\n\t\t\t\t\"label\": \"Use Cache\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"wait_for_model\",\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"help\": \"To prevent 503 errors, wait for the model to be ready. It limits the number of requests required to get your inference done.\",\n\t\t\t\t\"label\": \"Wait for Model\"\n\t\t\t}\n\t\t],\n\t\t\"label\": \"Options\"\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"label\",\n        \"label\": \"Label\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"score\",\n        \"label\": \"Score\",\n        \"type\": \"number\"\n    }\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    }
  },
  "approved": true,
  "authorId": 671322,
  "billable": true,
  "inReview": false,
  "keywords": null,
  "language": "en",
  "_accounts": {
    "huggingface": {
      "api": {
        "log": {
          "sanitize": [
            "request.headers.authorization"
          ]
        },
        "url": "https://api-inference.huggingface.co/models/facebook/bart-large-cnn",
        "body": {
          "inputs": "This is API Token verification from Make."
        },
        "method": "POST",
        "headers": {
          "Authorization": "Bearer {{parameters.apiKey}}"
        },
        "response": {
          "error": {
            "message": "[{{statusCode}}] {{body.error}}"
          }
        }
      },
      "rev": 5,
      "name": "huggingface",
      "type": "basic",
      "label": "Hugging Face",
      "scope": [],
      "scopes": {},
      "aliasTo": null,
      "appName": "huggingface",
      "install": {},
      "apiJsonc": "{\n\t\"url\": \"https://api-inference.huggingface.co/models/facebook/bart-large-cnn\",\n\t\"headers\": {\n\t\t\"Authorization\": \"Bearer {{parameters.apiKey}}\"\n\t},\n\t\"method\": \"POST\",\n\t\"body\": {\n\t\t\"inputs\": \"This is API Token verification from Make.\"\n\t},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"message\": \"[{{statusCode}}] {{body.error}}\"\n\t\t}\n\t},\n\t\"log\": {\n\t\t\"sanitize\": [\n\t\t\t\"request.headers.authorization\"\n\t\t]\n\t}\n}",
      "authorId": 671322,
      "appVersion": 1,
      "parameters": [
        {
          "name": "apiKey",
          "type": "password",
          "label": "API Token",
          "editable": true,
          "required": true
        }
      ],
      "scopeJsonc": null,
      "installSpec": [],
      "scopesJsonc": null,
      "installJsonc": null,
      "depAccountName": null,
      "depAccountScope": null,
      "parametersJsonc": "[\n    {\n        \"name\": \"apiKey\",\n        \"type\": \"password\",\n        \"label\": \"API Token\",\n        \"required\": true,\n\t\t\"editable\": true\n    }\n]",
      "installSpecJsonc": null,
      "connectedSystemName": null,
      "depAccountScopeJsonc": null
    }
  },
  "baseJsonc": "{\n\t\"baseUrl\": \"https://api-inference.huggingface.co\",\n\t\"headers\": {\n\t\t\"Authorization\": \"Bearer {{connection.apiKey}}\"\n\t},\n\t\"timeout\": \"{{common.timeout}}\",\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"message\": \"[{{statusCode}}] {{body.error}}\",\n\t\t\t\"429\": {\n\t\t\t\t\"type\": \"RateLimitError\",\n\t\t\t\t\"message\": \"[{{statusCode}}] {{body.error || 'Too many requests.}}\"\n\t\t\t}\n\t\t}\n\t},\n\t\"log\": {\n\t\t\"sanitize\": [\n\t\t\t\"request.headers.authorization\"\n\t\t]\n\t}\n}",
  "countries": null,
  "_functions": {
    "formatDates": {
      "rev": 22,
      "code": "function formatDates(body) {\n    if(body && body.created) body.created = iml.parseDate(body.created, 'X')\n    return body;\n}",
      "name": "formatDates",
      "test": "it('should format timestamp to date', () => {\n    const input = {\n        created: 1740580333\n    };\n    const output = {\n        created: iml.parseDate(\"2025-02-26T14:32:13.000Z\")\n    };\n    assert.deepEqual(formatDates(input), output);\n});\n\nit('should return the same object in created not found', () => {\n    const data = {\n        name: \"Make\"\n    };\n    assert.deepEqual(formatDates(data), data)\n})",
      "appName": "huggingface",
      "arguments": "(body)",
      "appVersion": 1
    },
    "formatTools": {
      "rev": 13,
      "code": "function formatTools(tools) {\n    if(!Array.isArray(tools)) return tools;\n    \n    return tools.map(tool => {\n        const func = tool[\"function\"];\n        if (!func || !func[\"arguments\"]) return tool;\n\n        try {\n            func[\"arguments\"] = JSON.parse(iml.get(func, \"arguments\"));\n        } catch(e) {\n            throw new Error(\"The field argument in the tool array is not valid JSON.\");\n        }\n\n        return tool;\n    });\n}",
      "name": "formatTools",
      "test": "it('should return non array input as is', () => {\n    assert.strictEqual(formatTools(null), null);\n    assert.deepEqual(formatTools({ key: 'value' }), { key: 'value' });\n});\n\nit('should correctly parse JSON arguments', () => {\n    const input = [\n        {\n            function: {\n                arguments: '{\"key\": \"value\"}'\n            }\n        }\n    ];\n    const output = [\n        {\n            function: {\n                arguments: {\n                    key: \"value\"\n                }\n            }\n        }\n    ];\n    assert.deepEqual(formatTools(input), output);\n});\n\nit('should throw an error for invalid JSON', () => {\n    const input = [\n        {\n            function: {\n                arguments: 'error'\n            }\n        }\n    ];\n    assert.throws(() => formatTools(input), /The field argument in the tool array is not valid JSON./);\n});\n\nit('should return tool as is if function or arguments are missing', () => {\n    const input = [\n        {\n            someKey: 'someValue'\n        },\n        {\n            function: {}\n        }\n    ];\n    assert.deepEqual(formatTools(input), input);\n});\n\nit('should handle empty array input', () => {\n    assert.deepEqual(formatTools([]), []);\n});",
      "appName": "huggingface",
      "arguments": "(tools)",
      "appVersion": 1
    },
    "removeEmpty": {
      "rev": 3,
      "code": "function removeEmpty(input) {\n    if (Array.isArray(input)) {\n        return input\n            .map((item) => removeEmpty(item))\n            .filter((item) => item !== undefined);\n    }\n    if (\n        typeof input !== \"object\" ||\n        input === null ||\n        input instanceof Date\n    ) return input;\n    const output = Object.entries(input).reduce((acc, [key, value]) => {\n        const child = removeEmpty(value);\n        if (child !== undefined) acc[key] = child;\n        return acc;\n    }, {});\n    if (Object.keys(output).length === 0) return undefined;\n    return output;\n}",
      "name": "removeEmpty",
      "test": "it('Correct input', () => {\n    const input = {\n        a: {},\n        b: {\n            c: 1,\n            d: {},\n            e: {\n                f: {\n                    g: {},\n                    h: {\n                        i: {\n                            j: 2,\n                            k: null,\n                            l: [\n                                {\n                                    m: {\n                                        n: {}\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    const output = {\n        \"b\": {\n            \"c\": 1,\n            \"e\": {\n                \"f\": {\n                    \"h\": {\n                        \"i\": {\n                            \"j\": 2,\n                            \"k\": null,\n                            \"l\": []\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    assert.deepEqual(removeEmpty(input), output)\n});\n\nit('Correct input: array', () => {\n    const input = [\n        {\n            a: {},\n            b: {\n                c: 1,\n                d: {}\n            }\n        },\n        {\n            e: {\n                f: {\n                    g: {},\n                    h: {\n                        i: {\n                            j: 2,\n                            k: null,\n                            l: [\n                                {\n                                    m: {\n                                        n: {}\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    ];\n\n    const output =\n        [\n            {\n                \"b\": {\n                    \"c\": 1\n                }\n            },\n            {\n                \"e\": {\n                    \"f\": {\n                        \"h\": {\n                            \"i\": {\n                                \"j\": 2,\n                                \"k\": null,\n                                \"l\": []\n                            }\n                        }\n                    }\n                }\n            }\n        ];\n\n    assert.deepEqual(removeEmpty(input), output)\n});\n\nit('Input is a string', () => {\n    assert.ok(removeEmpty('text'), 'text')\n});\n\nit('input is null', () => {\n    assert.equal(removeEmpty(null), null)\n});\n\nit('Input is date', () => {\n    const input = \"2023-10-18T21:30:00.000Z\"\n    assert.ok(removeEmpty(input), input)\n})",
      "appName": "huggingface",
      "arguments": "(input)",
      "appVersion": 1
    },
    "formatMessages": {
      "rev": 8,
      "code": "function formatMessages(arr) {\n    return arr.map(item => {\n        return iml.omit(item, 'contentType')\n    });\n}",
      "name": "formatMessages",
      "test": "it('should return an array without contect type field', () => {\n    const input = [\n        {\n            \"role\": \"user\",\n            \"content\": \"Why sky is blue?\",\n            \"contentType\": \"text\"\n        }\n    ];\n    const output = [\n        {\n            \"role\": \"user\",\n            \"content\": \"Why sky is blue?\"\n        }\n    ];\n    assert.deepEqual(formatMessages(input), output);\n});\n\nit('should return the same array if contect type not exist', () => {\n    const data = [\n        {\n            \"role\": \"user\",\n            \"content\": \"Why sky is blue?\"\n        }\n    ];\n    assert.deepEqual(formatMessages(data), data);\n});",
      "appName": "huggingface",
      "arguments": "(arr)",
      "appVersion": 1
    },
    "formatToolChoice": {
      "rev": 9,
      "code": "function formatToolChoice(toolChoice, func) {\n    //let's save this func for future\n    switch(toolChoice) {\n        case \"function\":\n            return {\n                \"function\": func\n            }\n        default:\n            return toolChoice;\n    }\n}",
      "name": "formatToolChoice",
      "test": "it('should return the given object when toolChoice is an object with a function key', () => {\n    const output = {\n        function: {\n            name: \"value\"\n        }\n    };\n    const functionValue = {\n        name: \"value\"\n    };\n    assert.deepEqual(formatToolChoice('function', functionValue), output);\n});\n\nit('should return the same tool choice value', () => {\n    assert.strictEqual(formatToolChoice('randomValue'), 'randomValue');\n    assert.strictEqual(formatToolChoice('none'), 'none');\n});",
      "appName": "huggingface",
      "arguments": "(toolChoice, func)",
      "appVersion": 1
    },
    "generateImageName": {
      "rev": 5,
      "code": "function generateImageName(contentType) {\n    const mimeToExt = {\n        \"image/jpeg\": \"jpg\",\n        \"image/png\": \"png\",\n        \"image/gif\": \"gif\",\n        \"image/webp\": \"webp\",\n        \"image/svg+xml\": \"svg\"\n    };\n    const ext = mimeToExt[contentType];\n    return ext ? `output.${ext}` : null;\n}",
      "name": "generateImageName",
      "test": "it('should return correct image name and ext', () => {\n    assert.strictEqual(iml.generateImageName('image/jpeg'), 'output.jpg');\n    assert.strictEqual(iml.generateImageName('image/png'), 'output.png');\n    assert.strictEqual(iml.generateImageName('image/gif'), 'output.gif');\n});\n\nit('should return null for not correct type', () => {\n    assert.strictEqual(iml.generateImageName('image/unknown'), null);\n    assert.strictEqual(iml.generateImageName(''), null);\n    assert.strictEqual(iml.generateImageName(null), null);\n    assert.strictEqual(iml.generateImageName(undefined), null);\n});",
      "appName": "huggingface",
      "arguments": "(contentType)",
      "appVersion": 1
    }
  },
  "approvedAt": "2023-07-13T11:37:50.484621+00:00",
  "categories": [],
  "opensource": false,
  "description": "Hugging Face helps to make predictions on over 100,000 ML models.",
  "iconColor32": null,
  "iconColor64": null,
  "installSpec": [
    {
      "name": "timeout",
      "type": "uinteger",
      "label": "Module timeout",
      "default": 40000,
      "validate": {
        "max": 300000,
        "min": 1000
      }
    }
  ],
  "inviteToken": "9ce10b60c6c0c1d8cbec36d9a3546f68",
  "versionFull": "1.2.4",
  "compiledName": "huggingface",
  "iconColor128": null,
  "iconColor256": null,
  "iconColor512": null,
  "installJsonc": "{\n    \"common\": {\n        \"timeout\": \"{{parameters.timeout}}\"\n    }\n}",
  "manifestVersion": 2,
  "compilationError": null,
  "installSpecJsonc": "[\n    {\n        \"name\": \"timeout\",\n        \"label\": \"Module timeout\",\n        \"type\": \"uinteger\",\n        \"default\": 40000,\n        \"validate\": {\n            \"min\": 1000,\n            \"max\": 300000\n        }\n    }\n]"
}
