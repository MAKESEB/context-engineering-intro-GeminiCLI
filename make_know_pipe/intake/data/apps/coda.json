{
  "rev": 16,
  "base": {
    "log": {
      "sanitize": [
        "request.headers.Authorization"
      ]
    },
    "baseUrl": "https://coda.io/apis/v1",
    "headers": {
      "Authorization": "Bearer {{connection.apiKey}}"
    },
    "response": {
      "error": {
        "message": "[{{statusCode}}] {{body.statusMessage}}: {{body.message}}"
      }
    }
  },
  "beta": false,
  "docs": "List Folders Search - NEFUNGUJE",
  "name": "coda",
  "_rpcs": {
    "getDocs": {
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body.items}}"
        }
      },
      "rev": 4,
      "name": "getDocs",
      "label": "Get Docs",
      "appName": "coda",
      "apiJsonc": "{\n    \"url\": \"/docs\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"output\": {\n            \"label\": \"{{item.name}}\",\n            \"value\": \"{{item.id}}\"\n        }\n    }\n    //\"pagination\": {\n    //    \"qs\": {\n    //        \"pageToken\": \"{{body.nextPageToken}}\"\n    //    },\n    //    \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    //}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getAllDocs": {
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body.items}}"
        }
      },
      "rev": 2,
      "name": "getAllDocs",
      "label": "Get All Docs",
      "appName": "coda",
      "apiJsonc": "{\n    \"url\": \"/docs\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"output\": {\n            \"label\": \"{{item.name}}\",\n            \"value\": \"{{item.id}}\"\n        }\n    }\n    //\"pagination\": {\n    //    \"qs\": {\n    //        \"pageToken\": \"{{body.nextPageToken}}\"\n    //    },\n    //    \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    //}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "getColumnsShow": {
      "api": [
        {
          "qs": {
            "limit": 100,
            "pageToken": "{{temp.pageToken}}"
          },
          "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns",
          "temp": {
            "customFields": []
          },
          "method": "GET",
          "repeat": {
            "delay": 10,
            "limit": 30,
            "condition": "{{ifempty(body.nextPageToken, false)}}"
          },
          "response": {
            "temp": {
              "pageToken": "{{body.nextPageToken}}",
              "customFields": "{{merge(temp.customFields, buildColumns(body.items))}}"
            }
          }
        },
        {
          "response": {
            "output": [
              {
                "name": "columns",
                "spec": "{{temp.customFields}}",
                "type": "collection",
                "label": "Columns"
              }
            ]
          }
        }
      ],
      "rev": 4,
      "name": "getColumnsShow",
      "label": "Get Columns and show them (Create Row)",
      "appName": "coda",
      "apiJsonc": "[\n\t{\n\t\t\"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns\",\n\t\t\"method\": \"GET\",\n\t\t\"qs\": {\n\t\t\t\"limit\": 100,\n\t\t\t\"pageToken\": \"{{temp.pageToken}}\"\n\t\t},\n\t\t\"temp\": {\n\t\t\t\"customFields\": []\n\t\t},\n\t\t\"response\": {\n\t\t\t\"temp\": {\n\t\t\t\t\"customFields\": \"{{merge(temp.customFields, buildColumns(body.items))}}\",\n\t\t\t\t\"pageToken\": \"{{body.nextPageToken}}\"\n\t\t\t}\n\t\t},\n\t\t\"repeat\": {\n\t\t\t\"condition\": \"{{ifempty(body.nextPageToken, false)}}\",\n\t\t\t\"delay\": 10,\n\t\t\t\"limit\": 30\n\t\t}\n\t},\n\t{\n\t\t\"response\": {\n\t\t\t\"output\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"columns\",\n\t\t\t\t\t\"type\": \"collection\",\n\t\t\t\t\t\"label\": \"Columns\",\n\t\t\t\t\t\"spec\": \"{{temp.customFields}}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n]",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n\n]"
    },
    "getTablesUsingdocId": {
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/tables",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 3,
      "name": "getTablesUsingdocId",
      "label": "Get Tables using docId",
      "appName": "coda",
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"output\": {\n            \"label\": \"{{item.name}}\",\n            \"value\": \"{{item.id}}\"\n        }\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getFoldersUsingdocId": {
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/folders",
        "method": "GET",
        "response": {
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 3,
      "name": "getFoldersUsingdocId",
      "label": "Get Folders using docId",
      "appName": "coda",
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/folders\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"output\": {\n            \"label\": \"{{item.name}}\",\n            \"value\": \"{{item.id}}\"\n        }\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getControlsUsingDocId": {
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/controls",
        "method": "GET",
        "response": {
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 3,
      "name": "getControlsUsingDocId",
      "label": "Get Controls using docId",
      "appName": "coda",
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/controls\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"output\": {\n            \"label\": \"{{item.name}}\",\n            \"value\": \"{{item.id}}\"\n        }\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getFormulasUsingDocId": {
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/formulas",
        "method": "GET",
        "response": {
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 3,
      "name": "getFormulasUsingDocId",
      "label": "Get Formulas using docId",
      "appName": "coda",
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/formulas\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"output\": {\n            \"label\": \"{{item.name}}\",\n            \"value\": \"{{item.id}}\"\n        }\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getSectionsUsingdocId": {
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/pages",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 3,
      "name": "getSectionsUsingdocId",
      "label": "Get Sections using docId",
      "appName": "coda",
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/pages\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"output\": {\n            \"label\": \"{{item.name}}\",\n            \"value\": \"{{item.id}}\"\n        }\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getColumnsShowForUpdate": {
      "api": [
        {
          "qs": {
            "limit": 100,
            "pageToken": "{{temp.pageToken}}"
          },
          "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns",
          "temp": {
            "customFields": []
          },
          "method": "GET",
          "repeat": {
            "delay": 10,
            "limit": 30,
            "condition": "{{ifempty(body.nextPageToken, false)}}"
          },
          "response": {
            "temp": {
              "pageToken": "{{body.nextPageToken}}",
              "customFields": "{{merge(temp.customFields, buildColumns(body.items))}}"
            }
          }
        },
        {
          "response": {
            "output": {
              "name": "columns",
              "spec": "{{temp.customFields}}",
              "type": "collection",
              "label": "Columns"
            }
          }
        }
      ],
      "rev": 4,
      "name": "getColumnsShowForUpdate",
      "label": "Get Columns and show them (Update/Upsert Row)",
      "appName": "coda",
      "apiJsonc": "[\n\t{\n\t\t\"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns\",\n\t\t\"method\": \"GET\",\n\t\t\"qs\": {\n\t\t\t\"limit\": 100,\n\t\t\t\"pageToken\": \"{{temp.pageToken}}\"\n\t\t},\n\t\t\"temp\": {\n\t\t\t\"customFields\": []\n\t\t},\n\t\t\"response\": {\n\t\t\t\"temp\": {\n\t\t\t\t\"customFields\": \"{{merge(temp.customFields, buildColumns(body.items))}}\",\n\t\t\t\t\"pageToken\": \"{{body.nextPageToken}}\"\n\t\t\t}\n\t\t},\n\t\t\"repeat\": {\n\t\t\t\"condition\": \"{{ifempty(body.nextPageToken, false)}}\",\n\t\t\t\"delay\": 10,\n\t\t\t\"limit\": 30\n\t\t}\n\t},\n\t{\n\t\t\"response\": {\n\t\t\t\"output\": {\n\t\t\t\t\"name\": \"columns\",\n\t\t\t\t\"type\": \"collection\",\n\t\t\t\t\"label\": \"Columns\",\n\t\t\t\t\"spec\": \"{{temp.customFields}}\"\n\t\t\t}\n\t\t}\n\t}\n]",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getRowsUsingTableIdDocId": {
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows",
        "method": "GET",
        "response": {
          "output": {
            "label": "[{{item.index}}] {{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 3,
      "name": "getRowsUsingTableIdDocId",
      "label": "Get Rows using tableId, docId",
      "appName": "coda",
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"output\": {\n            \"label\": \"[{{item.index}}] {{item.name}}\",\n            \"value\": \"{{item.id}}\"\n        }\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getColumnsUsingTableIdDocId": {
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 3,
      "name": "getColumnsUsingTableIdDocId",
      "label": "Get Columns using tableId, docId",
      "appName": "coda",
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"output\": {\n            \"label\": \"{{item.name}}\",\n            \"value\": \"{{item.id}}\"\n        }\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "coda",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    }
  },
  "flags": {},
  "label": "Coda",
  "theme": "#f46a54",
  "_hooks": {},
  "global": true,
  "groups": [
    {
      "label": "Docs",
      "modules": [
        "watchNewDocs",
        "createDoc",
        "listDocs",
        "getDoc"
      ]
    },
    {
      "label": "Doc Structure",
      "modules": [
        "listSections",
        "getSection",
        "listFolders",
        "getFolder"
      ]
    },
    {
      "label": "Pages",
      "modules": [
        "UpdatePage"
      ]
    },
    {
      "label": "Tables",
      "modules": [
        "watchNewRows",
        "watchUpdatedRow",
        "createARow",
        "updateRow",
        "upsertRows",
        "deleteRow",
        "listRows",
        "getRow",
        "listTables",
        "getTable",
        "listColumns",
        "getColumn"
      ]
    },
    {
      "label": "Formulas & Controls",
      "modules": [
        "listFormulas",
        "getFormula",
        "listControls",
        "getControl"
      ]
    },
    {
      "label": "Buttons",
      "modules": [
        "pushButton"
      ]
    },
    {
      "label": "Links",
      "modules": [
        "resolveBrowserLink"
      ]
    },
    {
      "label": "Other",
      "modules": [
        "MakeAPICall"
      ]
    }
  ],
  "icon32": "\\x89504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af400000006624b474400ff00ff00ffa0bda793000001cc4944415458c3e5973f6b144118879fc95d3031229c01932a51d052041b1562632b08422ab1b1b10c821fc08fa0d8a8855f406c6c046d6c440f52a793041141d0d8c4102e5c7c2c6676592546a3b33785bf66996576df67febcbf7927a8005de032b0081ca43d7d03fac023601d0015f58afad9d168a8de55c755c6d2e8af02d32d8ebca94e9ae963400d707844c12b4d0253154051fdb7004360501260bb3440ad6e0bff1c00ef800f44e3e90127f845a6e504d8015e020f813744a793e8aca7819bc0a51473405c065027d4e719dced813a9d9cb5a6aada6a4fbdadbe566fa91d351bc033f54833f0cf4a1063ea541d3cd3127c05ee015ff6ea144220ed89cde6fb1c59f016586e04d99772007c0436fef6e31c00e3fff29f1c00f3c0d19200c789f9cd5e59d026400758229acdae100d2f98512fa427397d40b5af2ea45cdf2df879f595baa53e4e7e90d58acf024f80a7c00b759568b7b3c045e01a3097fa9e23ee9bb5dc87d10c7003b84e34a821700898009a2611aa761ba721c4d4ecfd49c752f5403d03a5000e102be36200d575a07c495612c00a601b783fe2e09f48f543975824dc07ce00a7f8315fdbd03a70a71a7468d8e6496081681afb3f557eaf9006bb42bca20f43087c07a4060b75d877bd5a0000000049454e44ae426082",
  "icon64": "\\x89504e470d0a1a0a0000000d4948445200000040000000400806000000aa6971de00000006624b474400ff00ff00ffa0bda793000003834944415478daeddacb8b1c5514c7f14ff5a8c944830f2484a89888864483ba7121282a880f0417625474eb4210e322e23fa020820a6623b8f3010a22d94445100241571a45f1812ee24445142312c66488c9f471716b989aea9ecc6432d3b77aaa7f5050dd5d75eb9cefbd555df7774fa1a28898d9bd003bb0c9f0aac07ff8098770128aa2e839a89efced780637617dee2cce525dfc890ff0320ed72114b5e4efc1ebb82277e42ba04ff0380e5701742a075c86e75669f270279e4651e9709dca873b7063ee285758f7634bf58bea08b81ee7e48e7085b5099be703d039a3a6865305c6e603d04a8d00e40e20b746007207905b6d03d0c5a936033886236d06700a27da0ca0472300b903c8add6031896d9dfb4e4ec7c2f595c2710d2e4e6126cc3565cbcda001cc7a7d88b03f81953245babf4323a9275b7033bf130362efa0a1131b3bd14cd5137220e46c4ce88583f13e322f2e844c42d1171a06ca3ae6f2262e31c47287717f7515732311fc27b982c8aa2c7cdadabfcbd2b8d98c7f0aeb9fff95378037f54cf6be22df03e76cd04ba50e2750865effe8a27f011eec21ac9147daba7cd86dd029f45c4e6c50cf98554c9ab536e7ddb6cd208388a1730d1d34b4b50e5fceee98e6bd233602f3e5e8ee4cf444d01700cef2897af06a9a600f8115f31d8de6f12801ff0778e0b3705c084051e56ab1dc074ae0b370540363505c086b603d82655a5b416c0b5b8a6cd0036e0419cf51c605801c023d83e68084d027095549cb56e90176dd26c101ec577783522a697fa5a1cb356d975b8196b254bed6b4493fd808888a311b12b22ce5bcaad50e6b22e229e8d88df62d61a9b88887b7b7c8106028888988c883d11b12516698e54f2b834225e8988a93eedee8f880ba3e19e20e99de049ecc36e5c1d11e7f68351f9ee22dc87b7254b6d6d9f76b7aabd7435ed195055477a3f78114fe10b7c8e4311f1bb54063b8ecba50ab75b7103ce3f4d9b854a756cd301cc680c5796db03d2c4694a9a3d8e95103af5c416ab6100505551c6bc6c35cc4d7d060c4c2300b903c8adb60128ea39b70dc0b8da127adb00ac51335eda06a0472300b903c8ad1180dc01e4d6084065ffc8925b191e1dc73f730054fcb1fd2d8070505a8a9f0550d9ff126fcab850b9c2fa0b7b30d903a01c0527f13c5ec3bfb9a35d46057e912cf70f2bf9a2e6a294deda386ec3dd52c5e560976a9657d35279ed3e7cab6e899bc746aa188fabe15fa2cbfca537ff03e708a539aa6a7ee00000000049454e44ae426082",
  "origin": "eu1.make.com",
  "public": true,
  "compile": false,
  "created": "2022-05-03T13:17:52.503188+00:00",
  "icon128": "\\x89504e470d0a1a0a0000000d4948445200000080000000800806000000c33e61cb00000006624b474400ff00ff00ffa0bda793000007394944415478daeddd6b885c6719c0f1df6c2e3549ab9536499bd656c1faa11493d60b2aa5428b5511b4a51441eb2d5ea0156fc5eb1715452852514444c47aa7d47eb0b5a00dd55602a5d868c4a24512d346884d4aedc5141273ddd70fef59677677e6ec99cdceceee799f3f0cc9ccbee7cc9979fee739ef3be73dcf21289a4e934629a5a9ffaec5cbf17a6c406ab27c30123a781e3bb007cf60b2d36914d2692b19484fe05f88eb702d2ec346ac1cf7371038294bb00bf7e1c7d80b4d4518d8aa27f8afc097708d9c0182a54992b3c12db847c36cd0b7c58ce07f17578dfbd3058dd98f9b7127d25c12d409f012dc86378dfb130543b31f37e157d41f0e2666be50057f156ec495e3fe24c1bcd884cfe082b91a4e0c78fd35d88a15e3fe24c1bc799ddc6feb3da4cf629a003d0daf927bfac1f265853c6a3bbbae51bf0cb01e6f1ef7d6070bc2165ccce02cd04f80f3e4de7fb0fc3913afaa6bd04f808ec17d8360f9b1baee8f11e8f653fb737d0850382140e18400851302144e0850382140e18400851302144e0850382140e18400851302144e08d06e4ee2605d8310a0dd1cc63feb1a8400ede6189eae6b1002b49b84130c9e1a1e02144e0850382140e18400851302144e0850382140e18400851302144ed4f9192d9338249f9421ff32775cfedea776be0ed619532c42808525e1281ec79fe413310fe23fbad558a604987abe52be96ff42f942ce97ca051e862bf7354f428085e1bf72b0b7e3013c8c0372b0e7acd895527a48ce0867c865f8ae976b346c96abb58c8c10e0d4388c87f0c3eadf7fa9d2fd30f5faaab69329a583d8593dcec33bf041f93aff91f4d74280f9714c0ef8f7b10dcf315cd0fbd1bb7c4ae909b942db367c12ef93eb350ec3211ca96b10020ccf33f81ebe8da738f5c0f7636a9d29a5c7e5824fffc0a7f0b22156f3b09810b2a03c26a7e4afe0a94ea73392e0f752adff28be830fe0af0d177d1e7757cb0e240468ce6e7c4caebd776cd481efa57aaf2477323f221f168ed72c7208dfc02f7b96ef4b08d08cdfe05db897d1a4fcb9e879cf3fe0bdf82c1e913ba2539c90471f5fc5d7cdb1f73363ac595592ba14bfc5598bfe2997267b70837c3c1d4bf06752c5a983f3e5785d58fde990fcfbc32e1c6db2add109ac672f3e6e0905bf673b12f6558f79138780c11cc1b78c31ed2f0621c060eec34f686ff009010671401e761d3cd5152d754280fefc1cf7d3eebd9f10a01f7b650126c7bd218b4108309b6d7894f6effd840033398cdfe94ee0683d21c0741ec31f2963ef270498c90e7904500c214097244fc43831ee0d594c42802e478cf0fcfe522504e8f26fcdcfb5b78610a0cbff8b29944408309d72727f450850382140e184005d92396eb0d44642802ea7197edefdb22704e8b25ebe14ab2842802e2bb181fa9b2db78d10603a5760cdb83762310901a673312ea09c2c10024ce77c5c3eee8d584c4280e9acc63bf1e2716fc8621102cce60db89a320e0321c06cd6e1fd0ac90221407faec05b687f160801fab3169fc645b45b821060305bf0392d3f1484008399c07be46bf13b4b310ba494a49456a494ce4e296d48299d5ebdd6781d7179783dabf105b92ed0ed29a5c971cf17eca90db009d7c8b50537cb27b39e906b3bfc22a5b48f21e73756f65c9a527a3a05bd3c9952ba21a53491c69809528ecf9a94d2f529a59d29a5a37db6f5784a697b4a69736a900de210d08c8db815efc68a714850bde719f8327e80cbe40c359395f228e656d5c9ad3a4280e66c940b2f7d0d1b9bec5d0b41cffb9c892fe2139acd5b7823b64ead631021c070acc7cdb81d6fc5ea518ad0b3de4bf023b94ad9690d175f85b79b230b8400c3b30a57e2677225cfcbb16a2125e8916a8d1cc4dbe40e5fd3e04f7111cead6b10a380f973965c34f26db80777a6941ec1b398d76821757bf8e7e0d57275b2abe5f43f12428053e71c7c583e8bb80bbfc7ce94d2a3f2b0eca01cd41cdd6e09d8a9e53b58210feb2e918774d7ca7313d61af1b50a21c0c2d0c18bf0daea7144ce047fc3feeaf90e1c4c294d057452be37c02be5defc66b9dedfe98bb9e121c0687881bc476faa9e277cc8ec69e713f2de3f364280c5a163897ed7310a289c10a0704280c209010a2704289c10a0704280c209010a2704289c10a0dd4ca8660d0d3a5d1d02b49bd5f22496818400ed66ad39ee341a02b49b09f95ac7da0641c18400851302144e0850382140e18400851302144e0850382140e18400851302144e0850382140fba9bdb8b49f00271574f3e4963329df107b20fd04d8275fd51a2c7f9e55dd0c7b10fd04780e0f8c7bcb8305e1cff83b83cbc54d13a0a7d136391304cb97e3f8b55ca06220833a817fc11df23124589edc2fc7b0b658e420014ee29bb84b81f7d26b01bb718bea6ee875cc12a0c79603f8bc5c002932c1f261376ec276e62e15db3703f42cb4071fc54fcd712c09c6ce313c881be5f4dfa84e706d8b9e8b09d6c9e547b7cae5cbced5bf4c69b0b84ce2497947bd037757cf1b17896ed4aa4784b5f29db5b6c8756ba37f305e4ec81df67df2f07db8eae0411014ceff00a2dfe78a81f961ad0000000049454e44ae426082",
  "icon256": "\\",
  "icon512": "\\",
  "install": {},
  "ipmRepo": "https://ipm.integromat.com",
  "ipmTags": null,
  "version": 1,
  "website": null,
  "_modules": {
    "getDoc": {
      "id": 26764,
      "api": {
        "url": "/docs/{{parameters.docId}}",
        "method": "GET",
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "getDoc",
      "epoch": null,
      "flags": {},
      "label": "Get a Doc",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": "rpc://app%23coda@1/getDocs",
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}\",\n    \"method\": \"GET\",\n    \"response\": {\n        \"output\": \"{{body}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Doc ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser link"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "owner",
          "type": "email",
          "label": "Owner"
        },
        {
          "name": "sourceDoc",
          "spec": [
            {
              "name": "id",
              "type": "text",
              "label": "ID"
            },
            {
              "name": "type",
              "type": "text",
              "label": "Type"
            },
            {
              "name": "href",
              "type": "text",
              "label": "Href"
            }
          ],
          "type": "collection",
          "label": "Source doc"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created at"
        },
        {
          "name": "updatedAt",
          "type": "date",
          "label": "Updated At"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns information about the specified doc.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": \"rpc://getDocs\",\n        \"mode\": \"edit\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"label\": \"Doc ID\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"type\",\n        \"label\": \"Type\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"href\",\n        \"label\": \"Href\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"browserLink\",\n        \"label\": \"Browser link\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"name\",\n        \"label\": \"Name\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"owner\",\n        \"label\": \"Owner\",\n        \"type\": \"email\"\n    },\n    {\n        \"label\": \"Source doc\",\n        \"name\": \"sourceDoc\",\n        \"spec\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"text\",\n                \"label\": \"ID\"\n            },\n            {\n                \"name\": \"type\",\n                \"type\": \"text\",\n                \"label\": \"Type\"\n            },\n            {\n                \"name\": \"href\",\n                \"type\": \"text\",\n                \"label\": \"Href\"\n            }\n        ],\n        \"type\": \"collection\"\n    },\n    {\n        \"name\": \"createdAt\",\n        \"label\": \"Created at\",\n        \"type\": \"date\"\n    },\n    {\n        \"name\": \"updatedAt\",\n        \"label\": \"Updated At\",\n        \"type\": \"date\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "getRow": {
      "id": 26765,
      "api": {
        "qs": {
          "valueFormat": "{{parameters.valueFormat}}",
          "useColumnNames": "{{parameters.useColumnNames}}"
        },
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows/{{parameters.rowIdOrName}}",
        "method": "GET",
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "getRow",
      "epoch": null,
      "flags": {},
      "label": "Get a Row",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the table.",
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table ID or Name",
                "options": {
                  "store": "rpc://app%23coda@1/getTablesUsingdocId",
                  "nested": [
                    {
                      "help": "ID or name of the row.",
                      "name": "rowIdOrName",
                      "type": "select",
                      "label": "Row ID or Name",
                      "options": "rpc://app%23coda@1/getRowsUsingTableIdDocId",
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "Use column names instead of column IDs in the returned output.",
          "name": "useColumnNames",
          "type": "boolean",
          "label": "Use column names"
        },
        {
          "name": "valueFormat",
          "type": "select",
          "label": "Value format",
          "options": [
            {
              "label": "Simple",
              "value": "simple"
            },
            {
              "label": "Simple with arrays",
              "value": "simpleWithArrays"
            },
            {
              "label": "Rich",
              "value": "rich"
            }
          ]
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows/{{parameters.rowIdOrName}}\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"useColumnNames\": \"{{parameters.useColumnNames}}\",\n\t\t\"valueFormat\": \"{{parameters.valueFormat}}\"\n    },\n    \"response\": {\n        \"output\": \"{{body}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Row ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "index",
          "type": "uinteger",
          "label": "Index"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser Link"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created At"
        },
        {
          "name": "updatedAt",
          "type": "date",
          "label": "Updated At"
        },
        {
          "name": "values",
          "spec": [],
          "type": "collection",
          "label": "Values"
        },
        {
          "name": "parent",
          "spec": [
            {
              "name": "id",
              "type": "text",
              "label": "ID"
            },
            {
              "name": "type",
              "type": "text",
              "label": "Type"
            },
            {
              "name": "href",
              "type": "url",
              "label": "Href"
            }
          ],
          "type": "collection",
          "label": "Parent"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns details about a row in a table.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table ID or Name\",\n                    \"help\": \"ID or name of the table.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": {\n                        \"store\": \"rpc://getTablesUsingdocId\",\n                        \"nested\": [\n                            {\n                                \"name\": \"rowIdOrName\",\n                                \"label\": \"Row ID or Name\",\n                                \"help\": \"ID or name of the row.\",\n                                \"required\": true,\n                                \"type\": \"select\",\n                                \"options\": \"rpc://getRowsUsingTableIdDocId\"\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    },\n    {\n        \"name\": \"useColumnNames\",\n        \"label\": \"Use column names\",\n        \"help\": \"Use column names instead of column IDs in the returned output.\",\n        \"type\": \"boolean\"\n    },\n    {\n        \"name\": \"valueFormat\",\n        \"label\": \"Value format\",\n        \"type\": \"select\",\n\t\t\"options\": [\n\t\t\t{\n\t\t\t\t\"label\": \"Simple\",\n\t\t\t\t\"value\": \"simple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Simple with arrays\",\n\t\t\t\t\"value\": \"simpleWithArrays\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Rich\",\n\t\t\t\t\"value\": \"rich\"\n\t\t\t}\n\t\t]\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"label\": \"Row ID\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"type\",\n        \"label\": \"Type\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"href\",\n        \"label\": \"Href\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"name\",\n        \"label\": \"Name\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"index\",\n        \"label\": \"Index\",\n        \"type\": \"uinteger\"\n    },\n    {\n        \"name\": \"browserLink\",\n        \"label\": \"Browser Link\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"createdAt\",\n        \"label\": \"Created At\",\n        \"type\": \"date\"\n    },\n    {\n        \"name\": \"updatedAt\",\n        \"label\": \"Updated At\",\n        \"type\": \"date\"\n    },\n    {\n        \"name\": \"values\",\n        \"label\": \"Values\",\n        \"type\": \"collection\",\n        \"spec\": []\n    },\n    {\n        \"name\": \"parent\",\n        \"label\": \"Parent\",\n        \"type\": \"collection\",\n        \"spec\": [\n            {\n                \"name\": \"id\",\n                \"label\": \"ID\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"type\",\n                \"label\": \"Type\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"href\",\n                \"label\": \"Href\",\n                \"type\": \"url\"\n            }\n        ]\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "getTable": {
      "id": 26766,
      "api": {
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}",
        "method": "GET",
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "getTable",
      "epoch": null,
      "flags": {},
      "label": "Get a Table",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the table.",
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table ID or Name",
                "options": "rpc://app%23coda@1/getTablesUsingdocId",
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}\",\n    \"method\": \"GET\",\n    \"response\": {\n        \"output\": \"{{body}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Table ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser Link"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "displayColumn",
          "spec": [
            {
              "name": "id",
              "type": "text",
              "label": "ID"
            },
            {
              "name": "type",
              "type": "text",
              "label": "Type"
            },
            {
              "name": "href",
              "type": "url",
              "label": "Href"
            }
          ],
          "type": "collection",
          "label": "Display column"
        },
        {
          "name": "rowCount",
          "type": "number",
          "label": "Row count"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created at"
        },
        {
          "name": "updatedAt",
          "type": "date",
          "label": "Updated at"
        },
        {
          "name": "sorts",
          "spec": {
            "spec": [
              {
                "name": "column",
                "spec": [
                  {
                    "name": "id",
                    "type": "text",
                    "label": "ID"
                  },
                  {
                    "name": "type",
                    "type": "text",
                    "label": "Type"
                  },
                  {
                    "name": "href",
                    "type": "url",
                    "label": "Href"
                  }
                ],
                "type": "collection",
                "label": "Column"
              },
              {
                "name": "direction",
                "type": "text",
                "label": "Direction"
              }
            ],
            "type": "collection"
          },
          "type": "array",
          "label": "Sorts"
        },
        {
          "name": "layout",
          "type": "text",
          "label": "Layout"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns details about a specific table.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table ID or Name\",\n                    \"help\": \"ID or name of the table.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getTablesUsingdocId\"\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"label\": \"Table ID\",\n        \"name\": \"id\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Type\",\n        \"name\": \"type\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Href\",\n        \"name\": \"href\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Browser Link\",\n        \"name\": \"browserLink\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Name\",\n        \"name\": \"name\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Display column\",\n        \"name\": \"displayColumn\",\n        \"spec\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"text\",\n                \"label\": \"ID\"\n            },\n            {\n                \"name\": \"type\",\n                \"type\": \"text\",\n                \"label\": \"Type\"\n            },\n            {\n                \"name\": \"href\",\n                \"type\": \"url\",\n                \"label\": \"Href\"\n            }\n        ],\n        \"type\": \"collection\"\n    },\n    {\n        \"label\": \"Row count\",\n        \"name\": \"rowCount\",\n        \"type\": \"number\"\n    },\n    {\n        \"label\": \"Created at\",\n        \"name\": \"createdAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Updated at\",\n        \"name\": \"updatedAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Sorts\",\n        \"name\": \"sorts\",\n        \"spec\": {\n            \"spec\": [\n                {\n                    \"name\": \"column\",\n                    \"label\": \"Column\",\n                    \"spec\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"text\",\n                            \"label\": \"ID\"\n                        },\n                        {\n                            \"name\": \"type\",\n                            \"type\": \"text\",\n                            \"label\": \"Type\"\n                        },\n                        {\n                            \"name\": \"href\",\n                            \"type\": \"url\",\n                            \"label\": \"Href\"\n                        }\n                    ],\n                    \"type\": \"collection\"\n                },\n                {\n                    \"name\": \"direction\",\n                    \"type\": \"text\",\n                    \"label\": \"Direction\"\n                }\n            ],\n            \"type\": \"collection\"\n        },\n        \"type\": \"array\"\n    },\n    {\n        \"label\": \"Layout\",\n        \"name\": \"layout\",\n        \"type\": \"text\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "listDocs": {
      "id": 26767,
      "api": {
        "qs": {
          "limit": 500,
          "query": "{{parameters.query}}",
          "isOwner": "{{parameters.isOwner}}",
          "sourceDoc": "{{parameters.sourceDoc}}"
        },
        "url": "/docs",
        "method": "GET",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "listDocs",
      "epoch": null,
      "flags": {},
      "label": "List Docs",
      "scope": [],
      "expect": [
        {
          "help": "Maximum number of docs to return.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2
        },
        {
          "help": "Search term used to filter down results.",
          "name": "query",
          "type": "text",
          "label": "Query"
        },
        {
          "help": "Show only docs owned by you.",
          "name": "isOwner",
          "type": "boolean",
          "label": "Created by me"
        },
        {
          "help": "Show only docs copied from the specified doc ID.",
          "mode": "edit",
          "name": "sourceDoc",
          "type": "select",
          "label": "Source document ID",
          "options": "rpc://app%23coda@1/getDocs"
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"isOwner\": \"{{parameters.isOwner}}\",\n        \"query\": \"{{parameters.query}}\",\n        \"sourceDoc\": \"{{parameters.sourceDoc}}\",\n        \"limit\": 500\n    },\n    \"response\": {\n        \"limit\": \"{{parameters.limit}}\",\n        \"output\": \"{{item}}\",\n        \"iterate\": \"{{body.items}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Doc ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser link"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "owner",
          "type": "email",
          "label": "Owner"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created at"
        },
        {
          "name": "updatedAt",
          "type": "date",
          "label": "Updated at"
        },
        {
          "name": "sourceDoc",
          "spec": [
            {
              "name": "id",
              "type": "text",
              "label": "ID"
            },
            {
              "name": "type",
              "type": "text",
              "label": "Type"
            },
            {
              "name": "href",
              "type": "text",
              "label": "Href"
            }
          ],
          "type": "collection",
          "label": "Source doc"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns a list of Coda docs accessible by the user. These are returned in the same order as on the docs page: reverse chronological by the latest event relevant to the user (last viewed, edited, or shared).",
      "expectJsonc": "[\n    {\n        \"name\": \"limit\",\n        \"label\": \"Limit\",\n        \"help\": \"Maximum number of docs to return.\",\n        \"type\": \"uinteger\",\n        \"default\": 2\n    },\n    {\n        \"name\": \"query\",\n        \"label\": \"Query\",\n        \"help\": \"Search term used to filter down results.\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"isOwner\",\n        \"label\": \"Created by me\",\n        \"help\": \"Show only docs owned by you.\",\n        \"type\": \"boolean\"\n    },\n    {\n        \"name\": \"sourceDoc\",\n        \"label\": \"Source document ID\",\n        \"help\": \"Show only docs copied from the specified doc ID.\",\n        \"type\": \"select\",\n        \"mode\": \"edit\",\n        \"options\": \"rpc://getDocs\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"label\": \"Doc ID\",\n        \"name\": \"id\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Type\",\n        \"name\": \"type\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Href\",\n        \"name\": \"href\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Browser link\",\n        \"name\": \"browserLink\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Name\",\n        \"name\": \"name\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Owner\",\n        \"name\": \"owner\",\n        \"type\": \"email\"\n    },\n    {\n        \"label\": \"Created at\",\n        \"name\": \"createdAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Updated at\",\n        \"name\": \"updatedAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Source doc\",\n        \"name\": \"sourceDoc\",\n        \"spec\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"text\",\n                \"label\": \"ID\"\n            },\n            {\n                \"name\": \"type\",\n                \"type\": \"text\",\n                \"label\": \"Type\"\n            },\n            {\n                \"name\": \"href\",\n                \"type\": \"text\",\n                \"label\": \"Href\"\n            }\n        ],\n        \"type\": \"collection\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "listRows": {
      "id": 26768,
      "api": {
        "qs": {
          "limit": 500,
          "query": "{{parameters.query}}",
          "sortBy": "{{parameters.sortBy}}",
          "valueFormat": "{{parameters.valueFormat}}",
          "useColumnNames": "{{parameters.useColumnNames}}"
        },
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows",
        "method": "GET",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "listRows",
      "epoch": null,
      "flags": {},
      "label": "List Rows",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the table.",
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table ID or Name",
                "options": "rpc://app%23coda@1/getTablesUsingdocId",
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "Maximum number of rows to return.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2
        },
        {
          "help": "Query used to filter returned rows, specified as `<column_id_or_name>:<value>`. If you'd like to use a column name instead of an ID, you must quote it (e.g., `\"My Column\":123`). Also note that `value` is a JSON value; if you'd like to use a string, you must surround it in quotes (e.g., `\"groceries\"`).",
          "name": "query",
          "type": "text",
          "label": "Query"
        },
        {
          "help": "Use column names instead of column IDs in the returned output.",
          "name": "useColumnNames",
          "type": "boolean",
          "label": "Use column names",
          "required": false
        },
        {
          "name": "sortBy",
          "type": "select",
          "label": "Sort By",
          "options": [
            {
              "label": "Created At",
              "value": "createdAt"
            },
            {
              "label": "Natural",
              "value": "natural"
            }
          ]
        },
        {
          "name": "valueFormat",
          "type": "select",
          "label": "Value format",
          "options": [
            {
              "label": "Simple",
              "value": "simple"
            },
            {
              "label": "Simple with arrays",
              "value": "simpleWithArrays"
            },
            {
              "label": "Rich",
              "value": "rich"
            }
          ]
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"query\": \"{{parameters.query}}\",\n        \"useColumnNames\": \"{{parameters.useColumnNames}}\",\n\t\t\"valueFormat\": \"{{parameters.valueFormat}}\",\n        \"sortBy\": \"{{parameters.sortBy}}\",\n        \"limit\": 500\n    },\n    \"response\": {\n        \"limit\": \"{{parameters.limit}}\",\n        \"output\": \"{{item}}\",\n        \"iterate\": \"{{body.items}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Row ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "index",
          "type": "uinteger",
          "label": "Index"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created at"
        },
        {
          "name": "updatedAt",
          "type": "date",
          "label": "Updated at"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser link"
        },
        {
          "name": "values",
          "spec": [],
          "type": "collection",
          "label": "Values"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns a list of rows in a table.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table ID or Name\",\n                    \"help\": \"ID or name of the table.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getTablesUsingdocId\"\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    },\n    {\n        \"name\": \"limit\",\n        \"label\": \"Limit\",\n        \"help\": \"Maximum number of rows to return.\",\n        \"type\": \"uinteger\",\n        \"default\": 2\n    },\n    {\n        \"name\": \"query\",\n        \"label\": \"Query\",\n        \"help\": \"Query used to filter returned rows, specified as `<column_id_or_name>:<value>`. If you'd like to use a column name instead of an ID, you must quote it (e.g., `\\\"My Column\\\":123`). Also note that `value` is a JSON value; if you'd like to use a string, you must surround it in quotes (e.g., `\\\"groceries\\\"`).\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"useColumnNames\",\n        \"label\": \"Use column names\",\n        \"help\": \"Use column names instead of column IDs in the returned output.\",\n        \"required\": false,\n        \"type\": \"boolean\"\n    },\n    {\n        \"name\": \"sortBy\",\n        \"label\": \"Sort By\",\n        \"type\": \"select\",\n        \"options\": [\n            {\n                \"label\": \"Created At\",\n                \"value\": \"createdAt\"\n            },\n            {\n                \"label\": \"Natural\",\n                \"value\": \"natural\"\n            }\n        ]\n    },\n    {\n        \"name\": \"valueFormat\",\n        \"label\": \"Value format\",\n        \"type\": \"select\",\n\t\t\"options\": [\n\t\t\t{\n\t\t\t\t\"label\": \"Simple\",\n\t\t\t\t\"value\": \"simple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Simple with arrays\",\n\t\t\t\t\"value\": \"simpleWithArrays\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Rich\",\n\t\t\t\t\"value\": \"rich\"\n\t\t\t}\n\t\t]\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\r\n    {\r\n        \"label\": \"Row ID\",\r\n        \"name\": \"id\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Type\",\r\n        \"name\": \"type\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Href\",\r\n        \"name\": \"href\",\r\n        \"type\": \"url\"\r\n    },\r\n    {\r\n        \"label\": \"Name\",\r\n        \"name\": \"name\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Index\",\r\n        \"name\": \"index\",\r\n        \"type\": \"uinteger\"\r\n    },\r\n    {\r\n        \"label\": \"Created at\",\r\n        \"name\": \"createdAt\",\r\n        \"type\": \"date\"\r\n    },\r\n    {\r\n        \"label\": \"Updated at\",\r\n        \"name\": \"updatedAt\",\r\n        \"type\": \"date\"\r\n    },\r\n    {\r\n        \"label\": \"Browser link\",\r\n        \"name\": \"browserLink\",\r\n        \"type\": \"url\"\r\n    },\r\n    {\r\n        \"label\": \"Values\",\r\n        \"name\": \"values\",\r\n        \"spec\": [],\r\n        \"type\": \"collection\"\r\n    }\r\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "createDoc": {
      "id": 26769,
      "api": {
        "qs": {},
        "url": "/docs",
        "body": {
          "title": "{{parameters.title}}",
          "sourceDoc": "{{parameters.sourceDoc}}"
        },
        "method": "POST",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "create",
      "name": "createDoc",
      "epoch": null,
      "flags": {},
      "label": "Create a Doc",
      "scope": [],
      "expect": [
        {
          "help": "Title of the new doc. If left blank, the new doc will have name 'Untitled'",
          "name": "title",
          "type": "text",
          "label": "Title"
        },
        {
          "help": "An optional doc ID from which to create a copy.",
          "mode": "edit",
          "name": "sourceDoc",
          "type": "select",
          "label": "Source doc ID",
          "options": "rpc://app%23coda@1/getDocs"
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs\",\n    \"method\": \"POST\",\n    \"headers\": {},\n    \"qs\": {},\n    \"response\": {\n        \"output\": \"{{body}}\"\n    },\n    \"body\": {\n        \"title\": \"{{parameters.title}}\",\n        \"sourceDoc\": \"{{parameters.sourceDoc}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Doc ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser link"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "owner",
          "type": "email",
          "label": "Owner"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created at"
        },
        {
          "name": "updatedAt",
          "type": "date",
          "label": "Updated at"
        },
        {
          "name": "sourceDoc",
          "spec": [
            {
              "name": "id",
              "type": "text",
              "label": "ID"
            },
            {
              "name": "type",
              "type": "text",
              "label": "Type"
            },
            {
              "name": "href",
              "type": "text",
              "label": "Href"
            }
          ],
          "type": "collection",
          "label": "Source doc"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Creates a new Coda doc, optionally copying an existing doc.",
      "expectJsonc": "[\n    {\n        \"name\": \"title\",\n        \"label\": \"Title\",\n        \"help\": \"Title of the new doc. If left blank, the new doc will have name 'Untitled'\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"sourceDoc\",\n        \"label\": \"Source doc ID\",\n        \"help\": \"An optional doc ID from which to create a copy.\",\n        \"type\": \"select\",\n        \"options\": \"rpc://getDocs\",\n        \"mode\": \"edit\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"label\": \"Doc ID\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"type\",\n        \"label\": \"Type\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"href\",\n        \"label\": \"Href\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"browserLink\",\n        \"label\": \"Browser link\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"name\",\n        \"label\": \"Name\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"owner\",\n        \"label\": \"Owner\",\n        \"type\": \"email\"\n    },\n    {\n        \"name\": \"createdAt\",\n        \"label\": \"Created at\",\n        \"type\": \"date\"\n    },\n    {\n        \"name\": \"updatedAt\",\n        \"label\": \"Updated at\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Source doc\",\n        \"name\": \"sourceDoc\",\n        \"spec\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"text\",\n                \"label\": \"ID\"\n            },\n            {\n                \"name\": \"type\",\n                \"type\": \"text\",\n                \"label\": \"Type\"\n            },\n            {\n                \"name\": \"href\",\n                \"type\": \"text\",\n                \"label\": \"Href\"\n            }\n        ],\n        \"type\": \"collection\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "deleteRow": {
      "id": 26770,
      "api": {
        "qs": {},
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows/{{parameters.rowIdOrName}}",
        "body": {},
        "method": "DELETE",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "delete",
      "name": "deleteRow",
      "epoch": null,
      "flags": {},
      "label": "Delete a Row",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the table.",
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table ID or Name",
                "options": {
                  "store": "rpc://app%23coda@1/getTablesUsingdocId",
                  "nested": [
                    {
                      "help": "ID or name of the row.",
                      "name": "rowIdOrName",
                      "type": "select",
                      "label": "Row ID or Name",
                      "options": "rpc://app%23coda@1/getRowsUsingTableIdDocId",
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows/{{parameters.rowIdOrName}}\",\n    \"method\": \"DELETE\",\n    \"headers\": {},\n    \"qs\": {},\n    \"response\": {\n        \"output\": \"{{body}}\"\n    },\n    \"body\": {}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Row ID"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Deletes a specified row from the table. When deleting using a name as opposed to an ID, an arbitrary row will be removed.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table ID or Name\",\n                    \"help\": \"ID or name of the table.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": {\n                        \"store\": \"rpc://getTablesUsingdocId\",\n                        \"nested\": [\n                            {\n                                \"name\": \"rowIdOrName\",\n                                \"label\": \"Row ID or Name\",\n                                \"help\": \"ID or name of the row.\",\n                                \"required\": true,\n                                \"type\": \"select\",\n                                \"options\": \"rpc://getRowsUsingTableIdDocId\"\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"label\": \"Row ID\",\n        \"type\": \"text\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "getColumn": {
      "id": 26771,
      "api": {
        "qs": {},
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns/{{parameters.columnIdOrName}}",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "getColumn",
      "epoch": null,
      "flags": {},
      "label": "Get a Column",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the table.",
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table ID or Name",
                "options": {
                  "store": "rpc://app%23coda@1/getTablesUsingdocId",
                  "nested": [
                    {
                      "help": "ID or name of the column.",
                      "name": "columnIdOrName",
                      "type": "select",
                      "label": "Column ID or Name",
                      "options": "rpc://app%23coda@1/getColumnsUsingTableIdDocId",
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns/{{parameters.columnIdOrName}}\",\n    \"method\": \"GET\",\n    \"headers\": {},\n    \"qs\": {},\n    \"response\": {\n        \"output\": \"{{body}}\"\n    },\n    \"body\": {}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Column ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "display",
          "type": "boolean",
          "label": "Display"
        },
        {
          "name": "calculated",
          "type": "boolean",
          "label": "Calculated"
        },
        {
          "name": "parent",
          "spec": [
            {
              "name": "id",
              "type": "text",
              "label": "ID"
            },
            {
              "name": "type",
              "type": "text",
              "label": "Type"
            },
            {
              "name": "href",
              "type": "url",
              "label": "Href"
            }
          ],
          "type": "collection",
          "label": "Parent"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns details about a column in a table.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table ID or Name\",\n                    \"help\": \"ID or name of the table.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": {\n                        \"store\": \"rpc://getTablesUsingdocId\",\n                        \"nested\": [\n                            {\n                                \"name\": \"columnIdOrName\",\n                                \"label\": \"Column ID or Name\",\n                                \"help\": \"ID or name of the column.\",\n                                \"required\": true,\n                                \"type\": \"select\",\n                                \"options\": \"rpc://getColumnsUsingTableIdDocId\"\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"label\": \"Column ID\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"type\",\n        \"label\": \"Type\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"href\",\n        \"label\": \"Href\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"name\",\n        \"label\": \"Name\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"display\",\n        \"label\": \"Display\",\n        \"type\": \"boolean\"\n    },\n    {\n        \"name\": \"calculated\",\n        \"label\": \"Calculated\",\n        \"type\": \"boolean\"\n    },\n    {\n        \"name\": \"parent\",\n        \"label\": \"Parent\",\n        \"type\": \"collection\",\n        \"spec\": [\n            {\n                \"name\": \"id\",\n                \"label\": \"ID\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"type\",\n                \"label\": \"Type\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"href\",\n                \"label\": \"Href\",\n                \"type\": \"url\"\n            }\n        ]\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "getFolder": {
      "id": 26772,
      "api": {
        "url": "/docs/{{parameters.docId}}/folders/{{parameters.folderIdOrName}}",
        "method": "GET",
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 5,
      "crud": "read",
      "name": "getFolder",
      "epoch": null,
      "flags": {},
      "label": "Get a Folder (Deprecated)",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the folder.",
                "name": "folderIdOrName",
                "type": "select",
                "label": "Folder ID or Name",
                "options": "rpc://app%23coda@1/getFoldersUsingdocId",
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/folders/{{parameters.folderIdOrName}}\",\n    \"method\": \"GET\",\n    \"response\": {\n        \"output\": \"{{body}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Folder ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "children",
          "spec": {
            "spec": [
              {
                "name": "id",
                "type": "text",
                "label": "ID"
              },
              {
                "name": "type",
                "type": "text",
                "label": "Type"
              },
              {
                "name": "href",
                "type": "url",
                "label": "Href"
              }
            ],
            "type": "collection"
          },
          "type": "array",
          "label": "Children"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns details about a folder.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"folderIdOrName\",\n                    \"label\": \"Folder ID or Name\",\n                    \"help\": \"ID or name of the folder.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getFoldersUsingdocId\"\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"label\": \"Folder ID\",\n        \"name\": \"id\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Type\",\n        \"name\": \"type\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Href\",\n        \"name\": \"href\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Name\",\n        \"name\": \"name\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Children\",\n        \"name\": \"children\",\n        \"spec\": {\n            \"spec\": [\n                {\n                    \"name\": \"id\",\n                    \"type\": \"text\",\n                    \"label\": \"ID\"\n                },\n                {\n                    \"name\": \"type\",\n                    \"type\": \"text\",\n                    \"label\": \"Type\"\n                },\n                {\n                    \"name\": \"href\",\n                    \"type\": \"url\",\n                    \"label\": \"Href\"\n                }\n            ],\n            \"type\": \"collection\"\n        },\n        \"type\": \"array\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "updateRow": {
      "id": 26773,
      "api": {
        "qs": {},
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows/{{parameters.rowIdOrName}}",
        "body": {
          "row": {
            "cells": "{{prepareColumns(parameters.columns)}}"
          }
        },
        "method": "PUT",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 7,
      "crud": "update",
      "name": "updateRow",
      "epoch": null,
      "flags": {},
      "label": "Update a Row",
      "scope": [],
      "expect": [
        {
          "name": "mode",
          "type": "select",
          "label": "Method",
          "default": "select",
          "options": [
            {
              "label": "Select",
              "value": "select",
              "nested": [
                {
                  "name": "docId",
                  "type": "select",
                  "label": "Doc",
                  "options": {
                    "store": "rpc://app%23coda@1/getDocs",
                    "nested": [
                      {
                        "name": "tableIdOrName",
                        "type": "select",
                        "label": "Table",
                        "options": {
                          "store": "rpc://app%23coda@1/getTablesUsingdocId",
                          "nested": [
                            {
                              "help": "ID or name of the row.",
                              "name": "rowIdOrName",
                              "type": "select",
                              "label": "Row ID or Name",
                              "options": "rpc://app%23coda@1/getRowsUsingTableIdDocId",
                              "required": true
                            },
                            "rpc://app%23coda@1/getColumnsShowForUpdate"
                          ]
                        },
                        "required": true
                      }
                    ]
                  },
                  "required": true
                }
              ]
            },
            {
              "label": "Map",
              "value": "map",
              "nested": [
                {
                  "name": "docId",
                  "type": "text",
                  "label": "Doc",
                  "required": true
                },
                {
                  "name": "tableIdOrName",
                  "type": "text",
                  "label": "Table",
                  "required": true
                },
                {
                  "help": "ID or name of the row.",
                  "name": "rowIdOrName",
                  "type": "text",
                  "label": "Row ID or Name",
                  "required": true
                },
                {
                  "name": "columns",
                  "spec": [
                    {
                      "help": "ID or name of the column.",
                      "name": "column",
                      "type": "text",
                      "label": "Column ID or Name"
                    },
                    {
                      "name": "value",
                      "type": "text",
                      "label": "Value"
                    }
                  ],
                  "type": "array",
                  "label": "Columns",
                  "required": true
                }
              ]
            }
          ],
          "mappable": false,
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows/{{parameters.rowIdOrName}}\",\n    \"method\": \"PUT\",\n    \"headers\": {},\n    \"qs\": {},\n    \"response\": {\n        \"output\": \"{{body}}\"\n    },\n    \"body\": {\n        \"row\": {\n            \"cells\": \"{{prepareColumns(parameters.columns)}}\"\n        }\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Row ID"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Updates a specified row in the table.jj",
      "expectJsonc": "[\n    {\n        \"name\": \"mode\",\n        \"label\": \"Method\",\n        \"type\": \"select\",\n        \"required\": true,\n        \"default\": \"select\",\n        \"mappable\": false,\n        \"options\": [\n            {\n                \"label\": \"Select\",\n                \"value\": \"select\",\n                \"nested\": [\n                    {\n                      \"name\": \"docId\",\n                      \"label\": \"Doc\",\n                      \"required\": true,\n                      \"type\": \"select\",\n                      \"options\": {\n                          \"store\": \"rpc://getDocs\",\n                          \"nested\": [\n                              {\n                                  \"name\": \"tableIdOrName\",\n                                  \"label\": \"Table\",\n                                  \"required\": true,\n                                  \"type\": \"select\",\n                                  \"options\": {\n                                      \"store\": \"rpc://getTablesUsingdocId\",\n                                      \"nested\": [\n                                          {\n                                              \"name\": \"rowIdOrName\",\n                                              \"label\": \"Row ID or Name\",\n                                              \"help\": \"ID or name of the row.\",\n                                              \"required\": true,\n                                              \"type\": \"select\",\n                                              \"options\": \"rpc://getRowsUsingTableIdDocId\"\n                                          },\n                                          \"rpc://getColumnsShowForUpdate\"\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                ]\n            },\n            {\n                \"label\": \"Map\",\n                \"value\": \"map\",\n                \"nested\": [\n                    {\n                      \"name\": \"docId\",\n                      \"label\": \"Doc\",\n                      \"required\": true,\n                      \"type\": \"text\"\n                    },\n                    {\n                        \"name\": \"tableIdOrName\",\n                        \"label\": \"Table\",\n                        \"required\": true,\n                        \"type\": \"text\"\n                    },\n                    {\n                        \"name\": \"rowIdOrName\",\n                        \"label\": \"Row ID or Name\",\n                        \"help\": \"ID or name of the row.\",\n                        \"required\": true,\n                        \"type\": \"text\"\n                    },\n                    {\n                      \"name\": \"columns\",\n                      \"type\": \"array\",\n                      \"label\": \"Columns\",\n                      \"required\": true,\n                      \"spec\": [\n                          {\n                              \"name\": \"column\",\n                              \"label\": \"Column ID or Name\",\n                              \"help\": \"ID or name of the column.\",\n                              \"type\": \"text\"\n                          },\n                          {\n                              \"name\": \"value\",\n                              \"label\": \"Value\",\n                              \"type\": \"text\"\n                          }\n                      ]\n                    }\n                ]\n            }\n        ]\n    }\n    /*\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getTablesUsingdocId\"\n                }\n            ]\n        }\n    },\n    {\n        \"name\": \"cells\",\n        \"label\": \"Cells\",\n        \"type\": \"array\",\n        \"spec\": [\n            {\n                \"name\": \"column\",\n                \"type\": \"text\",\n                \"label\": \"Column\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ]\n    }*/\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"label\": \"Row ID\",\n        \"type\": \"text\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "UpdatePage": {
      "id": 26774,
      "api": {
        "qs": {},
        "url": "/docs/{{parameters.docId}}/pages/{{parameters.sectionIdOrName}}",
        "body": {
          "name": "{{parameters.name}}",
          "iconName": "{{parameters.iconName}}",
          "imageUrl": "{{parameters.imageUrl}}",
          "subtitle": "{{parameters.subtitle}}"
        },
        "method": "PUT",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "update",
      "name": "UpdatePage",
      "epoch": null,
      "flags": {},
      "label": "Update a Page",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the page.",
                "name": "sectionIdOrName",
                "type": "select",
                "label": "Page ID or Name",
                "options": "rpc://app%23coda@1/getSectionsUsingdocId",
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name",
          "required": false
        },
        {
          "name": "subtitle",
          "type": "text",
          "label": "Subtitle",
          "required": false
        },
        {
          "name": "iconName",
          "type": "text",
          "label": "Icon name",
          "required": false
        },
        {
          "name": "imageUrl",
          "type": "text",
          "label": "Image URL",
          "required": false
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/pages/{{parameters.sectionIdOrName}}\",\n    \"method\": \"PUT\",\n    \"headers\": {},\n    \"qs\": {},\n    \"response\": {\n        \"output\": \"{{body}}\"\n    },\n\t\"body\": {\n\t\t\"name\": \"{{parameters.name}}\",\n\t\t\"subtitle\": \"{{parameters.subtitle}}\",\n\t\t\"iconName\": \"{{parameters.iconName}}\",\n\t\t\"imageUrl\": \"{{parameters.imageUrl}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Id"
        },
        {
          "name": "requestId",
          "type": "text",
          "label": "Request id"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Updates properties for a page.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"sectionIdOrName\",\n                    \"label\": \"Page ID or Name\",\n                    \"help\": \"ID or name of the page.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getSectionsUsingdocId\"\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    },\n\t{\n\t\t\"name\": \"name\",\n\t\t\"label\": \"Name\",\n\t\t\"required\": false,\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"subtitle\",\n\t\t\"label\": \"Subtitle\",\n\t\t\"required\": false,\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"iconName\",\n\t\t\"label\": \"Icon name\",\n\t\t\"required\": false,\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"imageUrl\",\n\t\t\"label\": \"Image URL\",\n\t\t\"required\": false,\n\t\t\"type\": \"text\"\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"type\": \"text\",\n\t\t\"label\": \"Id\"\n    },\n    {\n        \"name\": \"requestId\",\n        \"type\": \"text\",\n\t\t\"label\": \"Request id\"\n    }\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "createARow": {
      "id": 26775,
      "api": {
        "qs": {},
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows",
        "body": {
          "rows": [
            {
              "cells": "{{prepareColumns(parameters.columns)}}"
            }
          ]
        },
        "method": "POST",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 5,
      "crud": "create",
      "name": "createARow",
      "epoch": null,
      "flags": {},
      "label": "Create a Row",
      "scope": [],
      "expect": [
        {
          "name": "docId",
          "type": "select",
          "label": "Doc",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table",
                "options": {
                  "store": "rpc://app%23coda@1/getTablesUsingdocId",
                  "nested": "rpc://app%23coda@1/getColumnsShow"
                },
                "mappable": false,
                "required": true
              }
            ]
          },
          "mappable": false,
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows\",\n    \"method\": \"POST\",\n    \"headers\": {},\n    \"qs\": {},\n    \"response\": {\n        \"output\": \"{{body}}\"\n    },\n    \"body\": {\n        \"rows\": [\n            {\n                \"cells\": \"{{prepareColumns(parameters.columns)}}\"\n            }\n        ]\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "requestId",
          "type": "text",
          "label": "Request ID"
        },
        {
          "name": "addedRowIds",
          "spec": {
            "type": "text"
          },
          "type": "array",
          "label": "Added Row Ids"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Creates a new row in a selected table.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc\",\n        \"mappable\": false,\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table\",\n                    \"mappable\": false,\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": {\n                        \"store\": \"rpc://getTablesUsingdocId\",\n                        \"nested\": \"rpc://getColumnsShow\"\n                    }\n                }\n            ]\n        }\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"requestId\",\n        \"type\": \"text\",\n        \"label\": \"Request ID\"\n    },\n    {\n        \"name\": \"addedRowIds\",\n        \"type\": \"array\",\n        \"spec\": {\n            \"type\": \"text\"\n        },\n        \"label\": \"Added Row Ids\"\n    }\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "getControl": {
      "id": 26776,
      "api": {
        "qs": {},
        "url": "/docs/{{parameters.docId}}/controls/{{parameters.controlIdOrName}}",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "getControl",
      "epoch": null,
      "flags": {},
      "label": "Get a Control",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the control.",
                "name": "controlIdOrName",
                "type": "select",
                "label": "Control ID or Name",
                "options": "rpc://app%23coda@1/getControlsUsingDocId",
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/controls/{{parameters.controlIdOrName}}\",\n    \"method\": \"GET\",\n    \"headers\": {},\n    \"qs\": {},\n    \"response\": {\n        \"output\": \"{{body}}\"\n    },\n    \"body\": {}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Control ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "controlType",
          "type": "text",
          "label": "Control type"
        },
        {
          "name": "value",
          "type": "text",
          "label": "Value"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns info on a control.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"controlIdOrName\",\n                    \"label\": \"Control ID or Name\",\n                    \"help\": \"ID or name of the control.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getControlsUsingDocId\"\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"label\": \"Control ID\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"type\",\n        \"label\": \"Type\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"href\",\n        \"label\": \"Href\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"name\",\n        \"label\": \"Name\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"controlType\",\n        \"label\": \"Control type\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"value\",\n        \"label\": \"Value\",\n        \"type\": \"text\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "getFormula": {
      "id": 26777,
      "api": {
        "qs": {},
        "url": "/docs/{{parameters.docId}}/formulas/{{parameters.formulaIdOrName}}",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "getFormula",
      "epoch": null,
      "flags": {},
      "label": "Get a Formula",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the formula.",
                "name": "formulaIdOrName",
                "type": "select",
                "label": "Formula ID or Name",
                "options": "rpc://app%23coda@1/getFormulasUsingDocId",
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/formulas/{{parameters.formulaIdOrName}}\",\n    \"method\": \"GET\",\n    \"headers\": {},\n    \"qs\": {},\n    \"response\": {\n        \"output\": \"{{body}}\"\n    },\n    \"body\": {}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Formula ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "value",
          "type": "text",
          "label": "Value"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns info on a formula.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"formulaIdOrName\",\n                    \"label\": \"Formula ID or Name\",\n                    \"help\": \"ID or name of the formula.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getFormulasUsingDocId\"\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"label\": \"Formula ID\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"type\",\n        \"label\": \"Type\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"href\",\n        \"label\": \"Href\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"name\",\n        \"label\": \"Name\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"value\",\n        \"label\": \"Value\",\n        \"type\": \"text\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "getSection": {
      "id": 26778,
      "api": {
        "url": "/docs/{{parameters.docId}}/pages/{{parameters.sectionIdOrName}}",
        "method": "GET",
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "getSection",
      "epoch": null,
      "flags": {},
      "label": "Get a Page",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the page.",
                "name": "sectionIdOrName",
                "type": "select",
                "label": "Page ID or Name",
                "options": "rpc://app%23coda@1/getSectionsUsingdocId",
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/pages/{{parameters.sectionIdOrName}}\",\n    \"method\": \"GET\",\n    \"response\": {\n        \"output\": \"{{body}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Page ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser Link"
        },
        {
          "name": "parent",
          "spec": [
            {
              "name": "id",
              "type": "text",
              "label": "ID"
            },
            {
              "name": "type",
              "type": "text",
              "label": "Type"
            },
            {
              "name": "href",
              "type": "url",
              "label": "Href"
            }
          ],
          "type": "collection",
          "label": "Parent"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns details about a section.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"sectionIdOrName\",\n                    \"label\": \"Page ID or Name\",\n                    \"help\": \"ID or name of the page.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getSectionsUsingdocId\"\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"label\": \"Page ID\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"type\",\n        \"label\": \"Type\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"href\",\n        \"label\": \"Href\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"name\",\n        \"label\": \"Name\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"browserLink\",\n        \"label\": \"Browser Link\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"parent\",\n        \"label\": \"Parent\",\n        \"type\": \"collection\",\n        \"spec\": [\n            {\n                \"name\": \"id\",\n                \"label\": \"ID\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"type\",\n                \"label\": \"Type\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"href\",\n                \"label\": \"Href\",\n                \"type\": \"url\"\n            }\n        ]\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "listTables": {
      "id": 26779,
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/tables",
        "method": "GET",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "listTables",
      "epoch": null,
      "flags": {},
      "label": "List Tables",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": "rpc://app%23coda@1/getDocs",
          "required": true
        },
        {
          "help": "Maximum number of tables to return.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"limit\": \"{{parameters.limit}}\",\n        \"output\": \"{{item}}\",\n        \"iterate\": \"{{body.items}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Table ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns a list of tables in a Coda doc.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": \"rpc://getDocs\",\n        \"mode\": \"edit\"\n    },\n    {\n        \"name\": \"limit\",\n        \"label\": \"Limit\",\n        \"help\": \"Maximum number of tables to return.\",\n        \"type\": \"uinteger\",\n        \"default\": 2\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\r\n    {\r\n        \"label\": \"Table ID\",\r\n        \"name\": \"id\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Type\",\r\n        \"name\": \"type\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Href\",\r\n        \"name\": \"href\",\r\n        \"type\": \"url\"\r\n    },\r\n    {\r\n        \"label\": \"Name\",\r\n        \"name\": \"name\",\r\n        \"type\": \"text\"\r\n    }\r\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "pushButton": {
      "id": 26780,
      "api": {
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows/{{parameters.rowIdOrName}}/buttons/{{parameters.columnIdOrName}}",
        "method": "POST",
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "create",
      "name": "pushButton",
      "epoch": null,
      "flags": {},
      "label": "Push a Button",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the table. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it.",
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table ID or Name",
                "options": {
                  "store": "rpc://app%23coda@1/getTablesUsingdocId",
                  "nested": [
                    {
                      "help": "ID or name of the row. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it. If there are multiple rows with the same value in the identifying column, an arbitrary one will be selected.",
                      "name": "rowIdOrName",
                      "type": "select",
                      "label": "Row ID or Name",
                      "options": {
                        "store": "rpc://app%23coda@1/getRowsUsingTableIdDocId",
                        "nested": [
                          {
                            "help": "ID or name of the column. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it.",
                            "name": "columnIdOrName",
                            "type": "select",
                            "label": "Column ID or Name",
                            "options": "rpc://app%23coda@1/getColumnsUsingTableIdDocId",
                            "required": true
                          }
                        ]
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows/{{parameters.rowIdOrName}}/buttons/{{parameters.columnIdOrName}}\",\n\t\"method\": \"POST\",\n\t\"response\": {\n\t\t\"output\": \"{{body}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "rowId",
          "type": "text",
          "label": "Row ID"
        },
        {
          "name": "columnId",
          "type": "text",
          "label": "Column ID"
        },
        {
          "name": "requestId",
          "type": "text",
          "label": "Request ID"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Pushes a button on a row in a table.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"docId\",\n\t\t\"type\": \"select\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://getDocs\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"tableIdOrName\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://getTablesUsingdocId\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"rowIdOrName\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://getRowsUsingTableIdDocId\",\n\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"name\": \"columnIdOrName\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\"options\": \"rpc://getColumnsUsingTableIdDocId\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Column ID or Name\",\n\t\t\t\t\t\t\t\t\t\t\t\"help\": \"ID or name of the column. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it.\",\n\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"label\": \"Row ID or Name\",\n\t\t\t\t\t\t\t\t\"help\": \"ID or name of the row. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it. If there are multiple rows with the same value in the identifying column, an arbitrary one will be selected.\",\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"label\": \"Table ID or Name\",\n\t\t\t\t\t\"help\": \"ID or name of the table. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it.\",\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"label\": \"Doc ID\",\n\t\t\"help\": \"ID of the doc.\",\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"rowId\",\n        \"type\": \"text\",\n        \"label\": \"Row ID\"\n    },\n    {\n        \"name\": \"columnId\",\n        \"type\": \"text\",\n        \"label\": \"Column ID\"\n    },\n    {\n        \"name\": \"requestId\",\n        \"type\": \"text\",\n        \"label\": \"Request ID\"\n    }\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "upsertRows": {
      "id": 26781,
      "api": {
        "qs": {},
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows",
        "body": {
          "rows": [
            {
              "cells": "{{prepareColumns(parameters.columns)}}"
            }
          ],
          "keyColumns": "{{fetchKeys(parameters.keyColumns)}}"
        },
        "method": "POST",
        "headers": {},
        "response": {
          "output": ""
        }
      },
      "rev": 6,
      "crud": null,
      "name": "upsertRows",
      "epoch": null,
      "flags": {},
      "label": "Upsert a Row",
      "scope": [],
      "expect": [
        {
          "name": "mode",
          "type": "select",
          "label": "Method",
          "default": "select",
          "options": [
            {
              "label": "Select",
              "value": "select",
              "nested": [
                {
                  "name": "docId",
                  "type": "select",
                  "label": "Doc",
                  "options": {
                    "store": "rpc://app%23coda@1/getDocs",
                    "nested": [
                      {
                        "name": "tableIdOrName",
                        "type": "select",
                        "label": "Table",
                        "options": {
                          "store": "rpc://app%23coda@1/getTablesUsingdocId",
                          "nested": [
                            {
                              "name": "keyColumns",
                              "type": "select",
                              "label": "Key columns",
                              "options": "rpc://app%23coda@1/getColumnsUsingTableIdDocId",
                              "multiple": true
                            },
                            "rpc://app%23coda@1/getColumnsShowForUpdate"
                          ]
                        },
                        "required": true
                      }
                    ]
                  },
                  "required": true
                }
              ]
            },
            {
              "label": "Map",
              "value": "map",
              "nested": [
                {
                  "name": "docId",
                  "type": "text",
                  "label": "Doc",
                  "required": true
                },
                {
                  "name": "tableIdOrName",
                  "type": "text",
                  "label": "Table",
                  "required": true
                },
                {
                  "name": "columns",
                  "spec": [
                    {
                      "help": "ID or name of the column.",
                      "name": "column",
                      "type": "text",
                      "label": "Column ID or Name"
                    },
                    {
                      "name": "value",
                      "type": "text",
                      "label": "Value"
                    }
                  ],
                  "type": "array",
                  "label": "Columns",
                  "required": true
                },
                {
                  "help": "Column IDs or names to use as upsert keys for matching rows to update. Omit for insert-only operations.",
                  "name": "keyColumns",
                  "spec": [
                    {
                      "name": "column",
                      "type": "text",
                      "label": "Column ID or Name"
                    }
                  ],
                  "type": "array",
                  "label": "Key columns"
                }
              ]
            }
          ],
          "mappable": false,
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows\",\n    \"method\": \"POST\",\n    \"headers\": {},\n    \"qs\": {},\n    \"response\": {\n        \"output\": \"\"\n    },\n    \"body\": {\n        \"rows\": [\n            {\n                \"cells\": \"{{prepareColumns(parameters.columns)}}\"\n            }\n        ],\n        \"keyColumns\": \"{{fetchKeys(parameters.keyColumns)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Creates a new row or updates existing rows if any upsert key columns are provided. When upserting, if multiple rows match the specified key column(s), they will all be updated with the specified value.",
      "expectJsonc": " [\n  {\n      \"name\": \"mode\",\n      \"label\": \"Method\",\n      \"type\": \"select\",\n      \"required\": true,\n      \"default\": \"select\",\n      \"mappable\": false,\n      \"options\": [\n          {\n              \"label\": \"Select\",\n              \"value\": \"select\",\n              \"nested\": [\n                  {\n                      \"name\": \"docId\",\n                      \"label\": \"Doc\",\n                      \"required\": true,\n                      \"type\": \"select\",\n                      \"options\": {\n                          \"store\": \"rpc://getDocs\",\n                          \"nested\": [\n                              {\n                                  \"name\": \"tableIdOrName\",\n                                  \"label\": \"Table\",\n                                  \"required\": true,\n                                  \"type\": \"select\",\n                                  \"options\": {\n                                      \"store\": \"rpc://getTablesUsingdocId\",\n                                      \"nested\": [\n                                          {\n                                              \"name\": \"keyColumns\",\n                                              \"label\": \"Key columns\",\n                                              \"type\": \"select\",\n                                              \"options\": \"rpc://getColumnsUsingTableIdDocId\",\n                                              \"multiple\": true\n                                          },\n                                          \"rpc://getColumnsShowForUpdate\"\n                                      ]\n                                  }\n                              }\n                          ]\n                      }\n                  }\n              ]\n          },\n          {\n              \"label\": \"Map\",\n              \"value\": \"map\",\n              \"nested\": [\n                  {\n                      \"name\": \"docId\",\n                      \"label\": \"Doc\",\n                      \"required\": true,\n                      \"type\": \"text\"\n                  },\n                  {\n                      \"name\": \"tableIdOrName\",\n                      \"label\": \"Table\",\n                      \"required\": true,\n                      \"type\": \"text\"\n                  },\n                  {\n                    \"name\": \"columns\",\n                    \"type\": \"array\",\n                    \"label\": \"Columns\",\n                    \"required\": true,\n                    \"spec\": [\n                        {\n                            \"name\": \"column\",\n                            \"label\": \"Column ID or Name\",\n                            \"help\": \"ID or name of the column.\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"value\",\n                            \"label\": \"Value\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                  },\n                  {\n                    \"name\": \"keyColumns\",\n                    \"type\": \"array\",\n                    \"label\": \"Key columns\",\n                    \"help\": \"Column IDs or names to use as upsert keys for matching rows to update. Omit for insert-only operations.\",\n                    \"spec\": [\n                        {\n                            \"name\": \"column\",\n                            \"label\": \"Column ID or Name\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                  }\n              ]\n          }\n      ]\n  }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "MakeAPICall": {
      "id": 26782,
      "api": {
        "qs": {
          "{{...}}": "{{toCollection(parameters.qs, 'key', 'value')}}"
        },
        "url": "https://coda.io/apis/{{parameters.url}}",
        "body": "{{parameters.body}}",
        "type": "text",
        "method": "{{parameters.method}}",
        "headers": {
          "{{...}}": "{{toCollection(parameters.headers, 'key', 'value')}}"
        },
        "response": {
          "output": {
            "body": "{{body}}",
            "headers": "{{headers}}",
            "statusCode": "{{statusCode}}"
          }
        }
      },
      "rev": 3,
      "crud": null,
      "name": "MakeAPICall",
      "epoch": null,
      "flags": {},
      "label": "Make an API Call",
      "scope": [],
      "expect": [
        {
          "help": "Enter a path relative to `https://coda.io/apis`. For example: `/v1/docs`.",
          "name": "url",
          "type": "text",
          "label": "URL",
          "required": true
        },
        {
          "name": "method",
          "type": "select",
          "label": "Method",
          "default": "GET",
          "options": [
            {
              "label": "GET",
              "value": "GET"
            },
            {
              "label": "POST",
              "value": "POST"
            },
            {
              "label": "PUT",
              "value": "PUT"
            },
            {
              "label": "PATCH",
              "value": "PATCH"
            },
            {
              "label": "DELETE",
              "value": "DELETE"
            }
          ],
          "required": true
        },
        {
          "help": "You don't have to add authorization headers; we already did that for you.",
          "name": "headers",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Headers",
          "default": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        {
          "name": "qs",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Query String"
        },
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        }
      ],
      "public": true,
      "typeId": 12,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"https://coda.io/apis/{{parameters.url}}\",\n    \"method\": \"{{parameters.method}}\",\n    \"qs\": {\n\t\t\"{{...}}\": \"{{toCollection(parameters.qs, 'key', 'value')}}\"\n\t},\n    \"headers\": {\n\t\t\"{{...}}\": \"{{toCollection(parameters.headers, 'key', 'value')}}\"\n\t},\n\t\"body\": \"{{parameters.body}}\",\n\t\"type\": \"text\",\n    \"response\": {\n        \"output\": {\n            \"headers\": \"{{headers}}\",\n            \"body\": \"{{body}}\",\n\t\t\t\"statusCode\": \"{{statusCode}}\"\n        }\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        },
        {
          "name": "headers",
          "type": "collection",
          "label": "Headers"
        },
        {
          "name": "statusCode",
          "type": "number",
          "label": "Status code"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Performs an arbitrary authorized API call.",
      "expectJsonc": "[\n    {\n        \"name\": \"url\",\n        \"type\": \"text\",\n        \"label\": \"URL\",\n        \"help\": \"Enter a path relative to `https://coda.io/apis`. For example: `/v1/docs`.\",\n        \"required\": true\n    },\n    {\n        \"name\": \"method\",\n        \"type\": \"select\",\n        \"label\": \"Method\",\n        \"required\": true,\n        \"default\": \"GET\",\n        \"options\": [\n            {\n                \"label\": \"GET\",\n                \"value\": \"GET\"\n            },\n            {\n                \"label\": \"POST\",\n                \"value\": \"POST\"\n            },\n            {\n                \"label\": \"PUT\",\n                \"value\": \"PUT\"\n            },\n            {\n                \"label\": \"PATCH\",\n                \"value\": \"PATCH\"\n            },\n            {\n                \"label\": \"DELETE\",\n                \"value\": \"DELETE\"\n            }\n        ]\n    },\n    {\n        \"name\": \"headers\",\n        \"label\": \"Headers\",\n\t\t\"help\": \"You don't have to add authorization headers; we already did that for you.\",\n        \"type\": \"array\",\n        \"spec\": [\n            {\n                \"name\": \"key\",\n                \"label\": \"Key\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ],\n\t\t\"default\": [\n\t\t\t{\n\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\"value\": \"application/json\"\n\t\t\t}\n\t\t]\n    },\n    {\n        \"name\": \"qs\",\n        \"label\": \"Query String\",\n        \"type\": \"array\",\n        \"spec\": [\n            {\n                \"name\": \"key\",\n                \"label\": \"Key\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ]\n    },\n    {\n        \"name\": \"body\",\n        \"label\": \"Body\",\n        \"type\": \"any\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"body\",\n\t\t\"label\": \"Body\",\n\t\t\"type\": \"any\"\n\t},\n\t{\n\t\t\"name\": \"headers\",\n\t\t\"label\": \"Headers\",\n\t\t\"type\": \"collection\"\n\t},\n\t{\n\t\t\"name\": \"statusCode\",\n\t\t\"label\": \"Status code\",\n\t\t\"type\": \"number\"\n\t}\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "listColumns": {
      "id": 26783,
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns",
        "method": "GET",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "listColumns",
      "epoch": null,
      "flags": {},
      "label": "List Columns",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": {
            "store": "rpc://app%23coda@1/getDocs",
            "nested": [
              {
                "help": "ID or name of the table.",
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table ID or Name",
                "options": "rpc://app%23coda@1/getTablesUsingdocId",
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "Maximum number of columns to return.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/columns\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"limit\": \"{{parameters.limit}}\",\n        \"output\": \"{{item}}\",\n        \"iterate\": \"{{body.items}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns a list of columns in a table.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table ID or Name\",\n                    \"help\": \"ID or name of the table.\",\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getTablesUsingdocId\"\n                }\n            ]\n        },\n        \"mode\": \"edit\"\n    },\n    {\n        \"name\": \"limit\",\n        \"label\": \"Limit\",\n        \"help\": \"Maximum number of columns to return.\",\n        \"type\": \"uinteger\",\n        \"default\": 2\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\r\n    {\r\n        \"label\": \"ID\",\r\n        \"name\": \"id\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Type\",\r\n        \"name\": \"type\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Name\",\r\n        \"name\": \"name\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Href\",\r\n        \"name\": \"href\",\r\n        \"type\": \"url\"\r\n    }\r\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "listFolders": {
      "id": 26784,
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/folders",
        "method": "GET",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "listFolders",
      "epoch": null,
      "flags": {},
      "label": "List Folders",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": "rpc://app%23coda@1/getDocs",
          "required": true
        },
        {
          "help": "Maximum number of folders to return.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/folders\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"limit\": \"{{parameters.limit}}\",\n        \"output\": \"{{item}}\",\n        \"iterate\": \"{{body.items}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Folder ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "children",
          "spec": {
            "spec": [
              {
                "name": "id",
                "type": "text",
                "label": "ID"
              },
              {
                "name": "type",
                "type": "text",
                "label": "Type"
              },
              {
                "name": "href",
                "type": "url",
                "label": "Href"
              }
            ],
            "type": "collection"
          },
          "type": "array",
          "label": "Children"
        }
      ],
      "appVersion": 1,
      "deprecated": true,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns a list of folders in a Coda doc.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": \"rpc://getDocs\",\n        \"mode\": \"edit\"\n    },\n    {\n        \"name\": \"limit\",\n        \"label\": \"Limit\",\n        \"help\": \"Maximum number of folders to return.\",\n        \"type\": \"uinteger\",\n        \"default\": 2\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\r\n    {\r\n        \"label\": \"Folder ID\",\r\n        \"name\": \"id\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Type\",\r\n        \"name\": \"type\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Href\",\r\n        \"name\": \"href\",\r\n        \"type\": \"url\"\r\n    },\r\n    {\r\n        \"label\": \"Name\",\r\n        \"name\": \"name\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Children\",\r\n        \"name\": \"children\",\r\n        \"spec\": {\r\n            \"spec\": [\r\n                {\r\n                    \"name\": \"id\",\r\n                    \"type\": \"text\",\r\n                    \"label\": \"ID\"\r\n                },\r\n                {\r\n                    \"name\": \"type\",\r\n                    \"type\": \"text\",\r\n                    \"label\": \"Type\"\r\n                },\r\n                {\r\n                    \"name\": \"href\",\r\n                    \"type\": \"url\",\r\n                    \"label\": \"Href\"\r\n                }\r\n            ],\r\n            \"type\": \"collection\"\r\n        },\r\n        \"type\": \"array\"\r\n    }\r\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "listControls": {
      "id": 26785,
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/controls",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "listControls",
      "epoch": null,
      "flags": {},
      "label": "List Controls",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": "rpc://app%23coda@1/getDocs",
          "required": true
        },
        {
          "help": "Maximum number of controls to return.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/controls\",\n    \"method\": \"GET\",\n    \"headers\": {},\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"limit\": \"{{parameters.limit}}\",\n        \"output\": \"{{item}}\",\n        \"iterate\": \"{{body.items}}\"\n    },\n    \"body\": {}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Control ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns a list of controls in a Coda doc.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": \"rpc://getDocs\"\n    },\n    {\n        \"name\": \"limit\",\n        \"label\": \"Limit\",\n        \"help\": \"Maximum number of controls to return.\",\n        \"type\": \"uinteger\",\n        \"default\": 2\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\r\n    {\r\n        \"label\": \"Control ID\",\r\n        \"name\": \"id\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Type\",\r\n        \"name\": \"type\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Href\",\r\n        \"name\": \"href\",\r\n        \"type\": \"url\"\r\n    },\r\n    {\r\n        \"label\": \"Name\",\r\n        \"name\": \"name\",\r\n        \"type\": \"text\"\r\n    }\r\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "listFormulas": {
      "id": 26786,
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/formulas",
        "method": "GET",
        "headers": {},
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "listFormulas",
      "epoch": null,
      "flags": {},
      "label": "List Formulas",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": "rpc://app%23coda@1/getDocs",
          "required": true
        },
        {
          "help": "Maximum number of formulas to return.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/formulas\",\n    \"method\": \"GET\",\n    \"headers\": {},\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"limit\": \"{{parameters.limit}}\",\n        \"output\": \"{{item}}\",\n        \"iterate\": \"{{body.items}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Formula ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns a list of named formulas in a Coda doc.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": \"rpc://getDocs\"\n    },\n    {\n        \"name\": \"limit\",\n        \"label\": \"Limit\",\n        \"help\": \"Maximum number of formulas to return.\",\n        \"type\": \"uinteger\",\n        \"default\": 2\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\r\n    {\r\n        \"label\": \"Formula ID\",\r\n        \"name\": \"id\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Type\",\r\n        \"name\": \"type\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"label\": \"Href\",\r\n        \"name\": \"href\",\r\n        \"type\": \"url\"\r\n    },\r\n    {\r\n        \"label\": \"Name\",\r\n        \"name\": \"name\",\r\n        \"type\": \"text\"\r\n    }\r\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "listSections": {
      "id": 26787,
      "api": {
        "qs": {
          "limit": 500
        },
        "url": "/docs/{{parameters.docId}}/pages",
        "method": "GET",
        "headers": {},
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}"
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "listSections",
      "epoch": null,
      "flags": {},
      "label": "List Pages",
      "scope": [],
      "expect": [
        {
          "help": "ID of the doc.",
          "mode": "edit",
          "name": "docId",
          "type": "select",
          "label": "Doc ID",
          "options": "rpc://app%23coda@1/getDocs",
          "required": true
        },
        {
          "help": "Maximum number of sections to return.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/pages\",\n    \"method\": \"GET\",\n    \"headers\": {},\n    \"qs\": {\n        \"limit\": 500\n    },\n    \"response\": {\n        \"limit\": \"{{parameters.limit}}\",\n        \"output\": \"{{item}}\",\n        \"iterate\": \"{{body.items}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Page ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser link"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Returns a list of pages in a Coda doc.",
      "expectJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc ID\",\n        \"help\": \"ID of the doc.\",\n        \"required\": true,\n        \"type\": \"select\",\n        \"options\": \"rpc://getDocs\",\n        \"mode\": \"edit\"\n    },\n    {\n        \"name\": \"limit\",\n        \"label\": \"Limit\",\n        \"help\": \"Maximum number of sections to return.\",\n        \"type\": \"uinteger\",\n        \"default\": 2\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"label\": \"Page ID\",\n        \"name\": \"id\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Type\",\n        \"name\": \"type\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Href\",\n        \"name\": \"href\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Name\",\n        \"name\": \"name\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Browser link\",\n        \"name\": \"browserLink\",\n        \"type\": \"url\"\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "watchNewDocs": {
      "id": 26788,
      "api": {
        "qs": {
          "limit": 500,
          "isOwner": "{{parameters.isOwner}}"
        },
        "url": "/docs",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}",
          "trigger": {
            "id": "{{item.id}}",
            "date": "{{if(parameters.sortBy == 'updated', item.updatedAt, item.createdAt)}}",
            "type": "date",
            "order": "desc"
          }
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 3,
      "crud": "read",
      "name": "watchNewDocs",
      "epoch": {
        "response": {
          "limit": 100,
          "output": {
            "date": "{{if(parameters.sortBy == 'updated', item.updatedAt, item.createdAt)}}",
            "label": "{{item.name}}"
          }
        }
      },
      "flags": {},
      "label": "Watch Docs",
      "scope": [],
      "expect": [],
      "public": true,
      "typeId": 1,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"isOwner\": \"{{parameters.isOwner}}\",\n        \"limit\": 500\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"trigger\": {\n            \"id\": \"{{item.id}}\",\n            \"date\": \"{{if(parameters.sortBy == 'updated', item.updatedAt, item.createdAt)}}\",\n            \"type\": \"date\",\n            \"order\": \"desc\"\n        },\n        \"output\": \"{{item}}\",\n        \"limit\": \"{{parameters.limit}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Doc ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser link"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "owner",
          "type": "email",
          "label": "Owner"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created at"
        },
        {
          "name": "updatedAt",
          "type": "date",
          "label": "Updated at"
        },
        {
          "name": "sourceDoc",
          "spec": [
            {
              "name": "id",
              "type": "text",
              "label": "ID"
            },
            {
              "name": "type",
              "type": "text",
              "label": "Type"
            },
            {
              "name": "href",
              "type": "text",
              "label": "Href"
            }
          ],
          "type": "collection",
          "label": "Source doc"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": "{\n    \"response\": {\n        \"limit\": 100,\n        \"output\": {\n            \"date\": \"{{if(parameters.sortBy == 'updated', item.updatedAt, item.createdAt)}}\",\n            \"label\": \"{{item.name}}\"\n        }\n    }\n}",
      "parameters": [
        {
          "help": "Check only for docs created by you.",
          "name": "isOwned",
          "type": "boolean",
          "label": "Created by me"
        },
        {
          "name": "sortBy",
          "type": "select",
          "label": "Triggers when",
          "options": [
            {
              "label": "a document is created",
              "value": "new",
              "default": true
            },
            {
              "label": "a document is updated",
              "value": "updated"
            }
          ]
        },
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2,
          "required": true
        }
      ],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Triggers when a doc is created or updated.",
      "expectJsonc": "[\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"label\": \"Doc ID\",\n        \"name\": \"id\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Type\",\n        \"name\": \"type\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Href\",\n        \"name\": \"href\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Browser link\",\n        \"name\": \"browserLink\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Name\",\n        \"name\": \"name\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Owner\",\n        \"name\": \"owner\",\n        \"type\": \"email\"\n    },\n    {\n        \"label\": \"Created at\",\n        \"name\": \"createdAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Updated at\",\n        \"name\": \"updatedAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Source doc\",\n        \"name\": \"sourceDoc\",\n        \"spec\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"text\",\n                \"label\": \"ID\"\n            },\n            {\n                \"name\": \"type\",\n                \"type\": \"text\",\n                \"label\": \"Type\"\n            },\n            {\n                \"name\": \"href\",\n                \"type\": \"text\",\n                \"label\": \"Href\"\n            }\n        ],\n        \"type\": \"collection\"\n    }\n]",
      "parametersJsonc": "[\n    {\n        \"name\": \"isOwned\",\n        \"type\": \"boolean\",\n        \"label\": \"Created by me\",\n        \"help\": \"Check only for docs created by you.\"\n    },\n\t{\n        \"name\": \"sortBy\",\n        \"type\": \"select\",\n        \"label\": \"Triggers when\",\n\t\t\"options\": [\n\t\t\t{\n\t\t\t\t\"label\": \"a document is created\",\n\t\t\t\t\"value\": \"new\",\n\t\t\t\t\"default\": true\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"a document is updated\",\n\t\t\t\t\"value\": \"updated\"\n\t\t\t}\n\t\t]\n    },\n    {\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 2,\n        \"required\": true\n    }\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "watchNewRows": {
      "id": 26789,
      "api": {
        "qs": {
          "limit": 500,
          "valueFormat": "{{parameters.valueFormat}}"
        },
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}",
          "trigger": {
            "id": "{{item.id}}",
            "date": "{{item.createdAt}}",
            "type": "date",
            "order": "desc"
          }
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 5,
      "crud": "read",
      "name": "watchNewRows",
      "epoch": {
        "response": {
          "limit": 500,
          "output": {
            "date": "{{item.createdAt}}",
            "label": "{{item.name}}"
          }
        }
      },
      "flags": {},
      "label": "Watch New Rows",
      "scope": [],
      "expect": [],
      "public": true,
      "typeId": 1,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500,\n\t\t\"valueFormat\": \"{{parameters.valueFormat}}\"\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"trigger\": {\n            \"id\": \"{{item.id}}\",\n            \"date\": \"{{item.createdAt}}\",\n            \"type\": \"date\",\n            \"order\": \"desc\"\n        },\n        \"output\": \"{{item}}\",\n        \"limit\": \"{{parameters.limit}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Row ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "index",
          "type": "uinteger",
          "label": "Index"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created at"
        },
        {
          "name": "updatedAt",
          "type": "date",
          "label": "Updated at"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser link"
        },
        {
          "name": "values",
          "spec": [],
          "type": "collection",
          "label": "Values"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": "{\n    \"response\": {\n        \"limit\": 500,\n        \"output\": {\n            \"date\": \"{{item.createdAt}}\",\n            \"label\": \"{{item.name}}\"\n        }\n    }\n}",
      "parameters": [
        {
          "name": "docId",
          "type": "select",
          "label": "Doc",
          "options": {
            "store": "rpc://app%23coda@1/getAllDocs",
            "nested": [
              {
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table",
                "options": "rpc://app%23coda@1/getTablesUsingdocId",
                "mappable": false,
                "required": true
              }
            ]
          },
          "mappable": false,
          "required": true
        },
        {
          "name": "valueFormat",
          "type": "select",
          "label": "Value format",
          "options": [
            {
              "label": "Simple",
              "value": "simple"
            },
            {
              "label": "Simple with arrays",
              "value": "simpleWithArrays"
            },
            {
              "label": "Rich",
              "value": "rich"
            }
          ]
        },
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2,
          "required": true
        }
      ],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Triggers when a new row is created in selected table.",
      "expectJsonc": "[\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"label\": \"Row ID\",\n        \"name\": \"id\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Type\",\n        \"name\": \"type\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Href\",\n        \"name\": \"href\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Name\",\n        \"name\": \"name\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Index\",\n        \"name\": \"index\",\n        \"type\": \"uinteger\"\n    },\n    {\n        \"label\": \"Created at\",\n        \"name\": \"createdAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Updated at\",\n        \"name\": \"updatedAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Browser link\",\n        \"name\": \"browserLink\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Values\",\n        \"name\": \"values\",\n        \"spec\": [],\n        \"type\": \"collection\"\n    }\n]",
      "parametersJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc\",\n        \"required\": true,\n        \"mappable\": false,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getAllDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table\",\n                    \"mappable\": false,\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getTablesUsingdocId\"\n                }\n            ]\n        }\n    },\n    {\n        \"name\": \"valueFormat\",\n        \"label\": \"Value format\",\n        \"type\": \"select\",\n\t\t\"options\": [\n\t\t\t{\n\t\t\t\t\"label\": \"Simple\",\n\t\t\t\t\"value\": \"simple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Simple with arrays\",\n\t\t\t\t\"value\": \"simpleWithArrays\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Rich\",\n\t\t\t\t\"value\": \"rich\"\n\t\t\t}\n\t\t]\n    },\n    {\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 2,\n        \"required\": true\n    }\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "watchUpdatedRow": {
      "id": 26790,
      "api": {
        "qs": {
          "limit": 500,
          "valueFormat": "{{parameters.valueFormat}}"
        },
        "url": "/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body.items}}",
          "trigger": {
            "id": "{{item.id}}",
            "date": "{{item.updatedAt}}",
            "type": "date",
            "order": "desc"
          }
        },
        "pagination": {
          "qs": {
            "pageToken": "{{body.nextPageToken}}"
          },
          "condition": "{{ifempty(body.nextPageToken, false)}}"
        }
      },
      "rev": 5,
      "crud": "read",
      "name": "watchUpdatedRow",
      "epoch": {
        "response": {
          "limit": 500,
          "output": {
            "date": "{{item.updatedAt}}",
            "label": "{{item.name}}"
          }
        }
      },
      "flags": {},
      "label": "Watch Updated Rows",
      "scope": [],
      "expect": [],
      "public": true,
      "typeId": 1,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/docs/{{parameters.docId}}/tables/{{parameters.tableIdOrName}}/rows\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"limit\": 500,\n\t\t\"valueFormat\": \"{{parameters.valueFormat}}\"\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"iterate\": \"{{body.items}}\",\n        \"trigger\": {\n            \"id\": \"{{item.id}}\",\n            \"date\": \"{{item.updatedAt}}\",\n            \"type\": \"date\",\n            \"order\": \"desc\"\n        },\n        \"output\": \"{{item}}\",\n        \"limit\": \"{{parameters.limit}}\"\n    },\n    \"pagination\": {\n        \"qs\": {\n            \"pageToken\": \"{{body.nextPageToken}}\"\n        },\n        \"condition\": \"{{ifempty(body.nextPageToken, false)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Row ID"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name"
        },
        {
          "name": "index",
          "type": "uinteger",
          "label": "Index"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created at"
        },
        {
          "name": "updatedAt",
          "type": "date",
          "label": "Updated at"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser link"
        },
        {
          "name": "values",
          "spec": [],
          "type": "collection",
          "label": "Values"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": "{\n    \"response\": {\n        \"limit\": 500,\n        \"output\": {\n            \"date\": \"{{item.updatedAt}}\",\n            \"label\": \"{{item.name}}\"\n        }\n    }\n}",
      "parameters": [
        {
          "name": "docId",
          "type": "select",
          "label": "Doc",
          "options": {
            "store": "rpc://app%23coda@1/getAllDocs",
            "nested": [
              {
                "name": "tableIdOrName",
                "type": "select",
                "label": "Table",
                "options": "rpc://app%23coda@1/getTablesUsingdocId",
                "mappable": false,
                "required": true
              }
            ]
          },
          "mappable": false,
          "required": true
        },
        {
          "name": "valueFormat",
          "type": "select",
          "label": "Value format",
          "options": [
            {
              "label": "Simple",
              "value": "simple"
            },
            {
              "label": "Simple with arrays",
              "value": "simpleWithArrays"
            },
            {
              "label": "Rich",
              "value": "rich"
            }
          ]
        },
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2,
          "required": true
        }
      ],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Triggers when an existing row is updated in selected table.",
      "expectJsonc": "[\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"label\": \"Row ID\",\n        \"name\": \"id\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Type\",\n        \"name\": \"type\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Href\",\n        \"name\": \"href\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Name\",\n        \"name\": \"name\",\n        \"type\": \"text\"\n    },\n    {\n        \"label\": \"Index\",\n        \"name\": \"index\",\n        \"type\": \"uinteger\"\n    },\n    {\n        \"label\": \"Created at\",\n        \"name\": \"createdAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Updated at\",\n        \"name\": \"updatedAt\",\n        \"type\": \"date\"\n    },\n    {\n        \"label\": \"Browser link\",\n        \"name\": \"browserLink\",\n        \"type\": \"url\"\n    },\n    {\n        \"label\": \"Values\",\n        \"name\": \"values\",\n        \"spec\": [],\n        \"type\": \"collection\"\n    }\n]",
      "parametersJsonc": "[\n    {\n        \"name\": \"docId\",\n        \"label\": \"Doc\",\n        \"required\": true,\n        \"mappable\": false,\n        \"type\": \"select\",\n        \"options\": {\n            \"store\": \"rpc://getAllDocs\",\n            \"nested\": [\n                {\n                    \"name\": \"tableIdOrName\",\n                    \"label\": \"Table\",\n                    \"mappable\": false,\n                    \"required\": true,\n                    \"type\": \"select\",\n                    \"options\": \"rpc://getTablesUsingdocId\"\n                }\n            ]\n        }\n    },\n    {\n        \"name\": \"valueFormat\",\n        \"label\": \"Value format\",\n        \"type\": \"select\",\n\t\t\"options\": [\n\t\t\t{\n\t\t\t\t\"label\": \"Simple\",\n\t\t\t\t\"value\": \"simple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Simple with arrays\",\n\t\t\t\t\"value\": \"simpleWithArrays\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Rich\",\n\t\t\t\t\"value\": \"rich\"\n\t\t\t}\n\t\t]\n    },\n    {\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 2,\n        \"required\": true\n    }\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "resolveBrowserLink": {
      "id": 26791,
      "api": {
        "qs": {
          "url": "{{parameters.url}}",
          "degradeGracefully": "{{parameters.degradeGracefully}}"
        },
        "url": "/resolveBrowserLink",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 3,
      "crud": "read",
      "name": "resolveBrowserLink",
      "epoch": null,
      "flags": {},
      "label": "Resolve Browser Link",
      "scope": [],
      "expect": [
        {
          "help": "The browser link to try to resolve.",
          "name": "url",
          "type": "url",
          "label": "Url",
          "required": true
        },
        {
          "help": "By default, attempting to resolve the Coda URL of a deleted object will result in an error. If this flag is set, the next-available object, all the way up to the doc itself, will be resolved.",
          "name": "degradeGracefully",
          "type": "boolean",
          "label": "Degrade gracefully"
        }
      ],
      "public": false,
      "typeId": 4,
      "appName": "coda",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/resolveBrowserLink\",\n    \"method\": \"GET\",\n    \"headers\": {},\n    \"qs\": {\n        \"url\": \"{{parameters.url}}\",\n        \"degradeGracefully\": \"{{parameters.degradeGracefully}}\"\n    },\n    \"response\": {\n        \"output\": \"{{body}}\"\n    },\n    \"body\": {}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        },
        {
          "name": "href",
          "type": "url",
          "label": "Href"
        },
        {
          "name": "browserLink",
          "type": "url",
          "label": "Browser Link"
        },
        {
          "name": "resource",
          "spec": [
            {
              "name": "href",
              "type": "url",
              "label": "Href"
            }
          ],
          "type": "collection",
          "label": "Resource"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "coda",
      "description": "Given a browser link to a Coda object, attempts to find it and return metadata that can be used to get more info on it.",
      "expectJsonc": "[\n    {\n        \"name\": \"url\",\n        \"label\": \"Url\",\n        \"help\": \"The browser link to try to resolve.\",\n        \"required\": true,\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"degradeGracefully\",\n        \"label\": \"Degrade gracefully\",\n        \"help\": \"By default, attempting to resolve the Coda URL of a deleted object will result in an error. If this flag is set, the next-available object, all the way up to the doc itself, will be resolved.\",\n        \"type\": \"boolean\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"type\",\n        \"label\": \"Type\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"href\",\n        \"label\": \"Href\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"browserLink\",\n        \"label\": \"Browser Link\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"resource\",\n        \"label\": \"Resource\",\n        \"type\": \"collection\",\n        \"spec\": [\n            {\n                \"name\": \"href\",\n                \"label\": \"Href\",\n                \"type\": \"url\"\n            }\n        ]\n    }\n]",
      "parametersJsonc": "[]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    }
  },
  "approved": true,
  "authorId": 671322,
  "billable": true,
  "inReview": false,
  "keywords": null,
  "language": "en",
  "_accounts": {
    "coda": {
      "api": {
        "log": {
          "sanitize": [
            "request.headers.authorization"
          ]
        },
        "url": "https://coda.io/apis/v1/whoami",
        "method": "GET",
        "headers": {
          "Authorization": "Bearer {{parameters.apiKey}}"
        },
        "response": {
          "error": {
            "message": "[{{statusCode}}] {{body.statusMessage}}: {{body.message}}"
          },
          "metadata": {
            "type": "text",
            "value": "{{body.loginId}}"
          }
        }
      },
      "rev": 7,
      "name": "coda",
      "type": "basic",
      "label": "Coda",
      "scope": [],
      "scopes": {},
      "aliasTo": null,
      "appName": "coda",
      "install": {},
      "apiJsonc": "{\n    \"url\": \"https://coda.io/apis/v1/whoami\",\n    \"method\": \"GET\",\n    \"headers\": {\n        \"Authorization\": \"Bearer {{parameters.apiKey}}\"\n    },\n    \"response\": {\n        \"error\": {\n            \"message\": \"[{{statusCode}}] {{body.statusMessage}}: {{body.message}}\"\n        },\n        \"metadata\": {\n\t\t\t\"type\": \"text\",\n\t\t\t\"value\": \"{{body.loginId}}\"\n\t\t}\n    },\n    \"log\": {\n        \"sanitize\": [\n            \"request.headers.authorization\"\n        ]\n    }\n}",
      "authorId": 671322,
      "appVersion": 1,
      "parameters": [
        {
          "name": "apiKey",
          "type": "password",
          "label": "API token",
          "editable": true,
          "required": true
        }
      ],
      "scopeJsonc": "[\n]",
      "installSpec": [],
      "scopesJsonc": "{\n}",
      "installJsonc": "{\n}",
      "depAccountName": null,
      "depAccountScope": null,
      "parametersJsonc": "[\n\t{\n\t\t\"name\": \"apiKey\",\n\t\t\"type\": \"password\",\n\t\t\"label\": \"API token\",\n\t\t\"required\": true,\n\t\t\"editable\": true\n\t}\n]",
      "installSpecJsonc": "[\n]",
      "connectedSystemName": null,
      "depAccountScopeJsonc": null
    }
  },
  "baseJsonc": "{\n    \"baseUrl\": \"https://coda.io/apis/v1\", \n    \"headers\": {\n        \"Authorization\": \"Bearer {{connection.apiKey}}\"\n    },\n    \"response\": {\n        \"error\": {\n            \"message\": \"[{{statusCode}}] {{body.statusMessage}}: {{body.message}}\"\n        }\n    },\n    \"log\": {\n        \"sanitize\": [\n            \"request.headers.Authorization\"\n        ]\n    }\n}",
  "countries": null,
  "_functions": {
    "fetchKeys": {
      "rev": 80,
      "code": "function fetchKeys(keys) {\n  if (!keys) {\n    return;\n  } else if (typeof keys[0] === 'object') {\n    return keys.map(key => key.column);\n  }\n  \n  return keys;\n}",
      "name": "fetchKeys",
      "test": "it(\"handle empty inputs\", function() {\n  assert.equal(fetchKeys(undefined), undefined);\n  assert.deepEqual(fetchKeys([]), []);\n});\n\nit(\"handle multiple object inputs\", function () {\n  const keyObjects = [\n    { column: \"c-06GA7GheB_\" },\n    { column: \"c-eZqAWBtIrB\" },\n    { column: \"c-lYEuP77-Zi\" }\n  ];\n\n  const keys = [\n    \"c-06GA7GheB_\",\n    \"c-eZqAWBtIrB\",\n    \"c-lYEuP77-Zi\"\n  ];\n  assert.deepEqual(fetchKeys(keyObjects), keys);\n});\n\nit(\"handle multiple inputs\", function () {\n  const inputs = [\n    \"c-06GA7GheB_\",\n    \"c-eZqAWBtIrB\",\n    \"c-lYEuP77-Zi\"\n  ];\n\n  const result = [\n    \"c-06GA7GheB_\",\n    \"c-eZqAWBtIrB\",\n    \"c-lYEuP77-Zi\"\n  ];\n  assert.deepEqual(fetchKeys(inputs), result);\n});\n\nit(\"handle single input\", function () {\n  const input = [\n    \"c-06GA7GheB_\"\n  ];\n\n  const result = [\n    \"c-06GA7GheB_\"\n  ];\n  assert.deepEqual(fetchKeys(input), result);\n});\n\nit(\"handle single input object\", function () {\n  const keyObject = [\n    { column: \"c-06GA7GheB_\" }\n  ];\n\n  const key = [\n    \"c-06GA7GheB_\"\n  ];\n  assert.deepEqual(fetchKeys(keyObject), key);\n});",
      "appName": "coda",
      "arguments": "(keys)",
      "appVersion": 1
    },
    "buildColumns": {
      "rev": 5,
      "code": "function buildColumns(items) {\n\tlet outputArray = [];\n\n\titems.forEach(fields => {\n\t\t\n\t\tvar obj = {}\n\t\tobj.name = fields.id;\n\t\tobj.label = fields.name;\n\t\t\n\t\toutputArray.push(obj);\n\t\n\t});\n\t\n\treturn outputArray;\n}",
      "name": "buildColumns",
      "test": null,
      "appName": "coda",
      "arguments": "(items)",
      "appVersion": 1
    },
    "prepareColumns": {
      "rev": 56,
      "code": "function prepareColumns(columns) {\n  if (Array.isArray(columns)) {\n    return columns;\n  };\n\n    return Object.keys(columns).map(name => {\n        return {\n            column: name,\n            value: columns[name]\n        }\n    })\n}",
      "name": "prepareColumns",
      "test": "it(\"return an array if the input is already an array.\", function () {\n  const input = [\n    {\n      \"column\": \"c-06GA7GheB_\",\n      \"value\": \"create a doc\"\n    },\n    {\n        \"column\": \"c-9_S8vQnkwY\",\n        \"value\": \"Feb 25\"\n    },\n    {\n        \"column\": \"c-lYEuP77-Zi\",\n        \"value\": \"to do\"\n    }\n  ];\n\n  const result = [\n    {\n        \"column\": \"c-06GA7GheB_\",\n        \"value\": \"create a doc\"\n    },\n    {\n        \"column\": \"c-9_S8vQnkwY\",\n        \"value\": \"Feb 25\"\n    },\n    {\n        \"column\": \"c-lYEuP77-Zi\",\n        \"value\": \"to do\"\n    }\n]\n  assert.deepEqual(prepareColumns(input), result);\n});\n\nit(\"parse an object into an array of column values.\", function () {\n  const input = {\n    \"c-06GA7GheB_\": \"create a doc\",\n    \"c-9_S8vQnkwY\": \"Feb 25\",\n    \"c-lYEuP77-Zi\": \"to do\"\n  };\n\n  const result = [\n    {\n        \"column\": \"c-06GA7GheB_\",\n        \"value\": \"create a doc\"\n    },\n    {\n        \"column\": \"c-9_S8vQnkwY\",\n        \"value\": \"Feb 25\"\n    },\n    {\n        \"column\": \"c-lYEuP77-Zi\",\n        \"value\": \"to do\"\n    }\n]\n  assert.deepEqual(prepareColumns(input), result);\n});",
      "appName": "coda",
      "arguments": "(columns)",
      "appVersion": 1
    }
  },
  "approvedAt": "2022-05-03T13:18:03.032044+00:00",
  "categories": [],
  "opensource": false,
  "description": "Automate data flows between Coda and Google Drive, Gmail, Telegram Bot, ClickUp and more apps. Back up, share, inform, duplicate. With {{integromat}}, there's no limit to what you can do!",
  "iconColor32": null,
  "iconColor64": null,
  "installSpec": [],
  "inviteToken": "004385f5f45cb40f0bca57b3c6584450",
  "versionFull": "1.5.8",
  "compiledName": "coda",
  "iconColor128": null,
  "iconColor256": null,
  "iconColor512": null,
  "installJsonc": "{\n}",
  "manifestVersion": 2,
  "compilationError": null,
  "installSpecJsonc": "[\n]"
}
