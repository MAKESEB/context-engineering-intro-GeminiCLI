{
  "rev": 7,
  "base": {
    "log": {
      "sanitize": [
        "request.headers.authorization"
      ]
    },
    "baseUrl": "{{connection.Host}}/",
    "headers": {
      "accept": "application/json",
      "Authorization": "Bearer {{connection.accessToken}}"
    },
    "response": {
      "error": {
        "message": "[{{statusCode}}] {{body.error.message.value}}"
      }
    }
  },
  "beta": false,
  "docs": null,
  "name": "sap-successfactors",
  "_rpcs": {
    "interfaceAll": {
      "api": {
        "qs": {
          "$format": "JSON"
        },
        "url": "/odata/v2/Entity('{{parameters.recordType}}')",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{parseMetadataToInterface(body.d)}}"
        }
      },
      "rev": 2,
      "name": "interfaceAll",
      "label": "Interface: All",
      "appName": "sap-successfactors",
      "apiJsonc": "{\n    \"url\": \"/odata/v2/Entity('{{parameters.recordType}}')\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"$format\":\"JSON\"\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"output\": \"{{parseMetadataToInterface(body.d)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [
        {
          "help": "e.g. PerPerson",
          "name": "recordType",
          "type": "text",
          "label": "recordType",
          "default": "PerPerson"
        }
      ],
      "accountName": "sap-successfactors",
      "altAccountName": null,
      "parametersJsonc": "[\r\n    {\r\n        \"name\": \"recordType\",\r\n        \"label\": \"recordType\",\r\n        \"type\": \"text\",\r\n        \"default\": \"PerPerson\",\r\n        \"help\": \"e.g. PerPerson\"\r\n    }\r\n]"
    },
    "listEndpoints": {
      "api": {
        "qs": {},
        "url": "/odata/v2/",
        "body": {},
        "temp": {
          "whitelist": [
            "Candidate",
            "JobApplicationSnapshot_Education",
            "JobProfile",
            "JobRequisition",
            "JobRequisitionPosting",
            "OnboardingInfo",
            "PerEmail",
            "PerPerson",
            "Position"
          ]
        },
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{sortEndpoints(body.EntitySets,temp.whitelist)}}"
        }
      },
      "rev": 2,
      "name": "listEndpoints",
      "label": "List Endpoints",
      "appName": "sap-successfactors",
      "apiJsonc": "{\n\t\"url\": \"/odata/v2/\",\n\t\"method\": \"GET\",\n\t\"qs\": { },\n\t\"body\": { },\n\t\"headers\": { },\n\t\"response\": {\n\t\t\"output\": \"{{sortEndpoints(body.EntitySets,temp.whitelist)}}\"\n\t},\n\t\"temp\": {\n\t\t\"whitelist\": [\n\t\t\t\"Candidate\",\n\t\t\t\"JobApplicationSnapshot_Education\",\n\t\t\t\"JobProfile\",\n\t\t\t\"JobRequisition\",\n\t\t\t\"JobRequisitionPosting\",\n\t\t\t\"OnboardingInfo\",\n\t\t\t\"PerEmail\",\n\t\t\t\"PerPerson\",\n\t\t\t\"Position\"\n\t\t]\n\t}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "sap-successfactors",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "parametersExpand": {
      "api": {
        "qs": {
          "$format": "JSON"
        },
        "url": "/odata/v2/Entity('{{parameters.recordType}}')",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{parseMetadataToSelect(body.d.navigationProperties.results,'viewable')}}"
        }
      },
      "rev": 2,
      "name": "parametersExpand",
      "label": "Parameters: Expand",
      "appName": "sap-successfactors",
      "apiJsonc": "{\n    \"url\": \"/odata/v2/Entity('{{parameters.recordType}}')\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"$format\":\"JSON\"\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"output\": \"{{parseMetadataToSelect(body.d.navigationProperties.results,'viewable')}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "sap-successfactors",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "parametersOrderBy": {
      "api": {
        "qs": {
          "$format": "JSON"
        },
        "url": "/odata/v2/Entity('{{parameters.recordType}}')",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{parseMetadataToSelect(body.d.nonNavigationProperties.results,'sortable')}}"
        }
      },
      "rev": 2,
      "name": "parametersOrderBy",
      "label": "Parameters: Order by",
      "appName": "sap-successfactors",
      "apiJsonc": "{\n    \"url\": \"/odata/v2/Entity('{{parameters.recordType}}')\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"$format\":\"JSON\"\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"output\": \"{{parseMetadataToSelect(body.d.nonNavigationProperties.results,'sortable')}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "sap-successfactors",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "parametersIdForGet": {
      "api": {
        "qs": {
          "$format": "JSON"
        },
        "url": "/odata/v2/Entity('{{parameters.recordType}}')",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{parseMetadataForID(body.d.keyProperties.results)}}"
        }
      },
      "rev": 2,
      "name": "parametersIdForGet",
      "label": "Parameters: ID for Get",
      "appName": "sap-successfactors",
      "apiJsonc": "{\n    // Get a Record module sometimes require more than 1 ID\n    \"url\": \"/odata/v2/Entity('{{parameters.recordType}}')\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"$format\": \"JSON\"\n    },\n    \"body\": { },\n    \"headers\": { },\n    \"response\": {\n        \"output\": \"{{parseMetadataForID(body.d.keyProperties.results)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [
        {
          "name": "recordType",
          "type": "text",
          "label": "recordType",
          "default": "PerEmail"
        }
      ],
      "accountName": "sap-successfactors",
      "altAccountName": null,
      "parametersJsonc": "[\r\n    {\r\n        \"name\": \"recordType\",\r\n        \"label\": \"recordType\",\r\n        \"type\": \"text\",\r\n        \"default\": \"PerEmail\"\r\n    }\r\n]"
    },
    "parametersSelectOutput": {
      "api": {
        "qs": {
          "$format": "JSON"
        },
        "url": "/odata/v2/Entity('{{parameters.recordType}}')",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": "{{parseMetadataToSelect(body.d.nonNavigationProperties.results,'viewable')}}"
        }
      },
      "rev": 2,
      "name": "parametersSelectOutput",
      "label": "Parameters: Select output",
      "appName": "sap-successfactors",
      "apiJsonc": "{\n    \"url\": \"/odata/v2/Entity('{{parameters.recordType}}')\",\n    \"method\": \"GET\",\n    \"qs\": {\n        \"$format\":\"JSON\"\n    },\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"output\": \"{{parseMetadataToSelect(body.d.nonNavigationProperties.results,'viewable')}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [
        {
          "name": "recordType",
          "type": "text",
          "label": "recordType",
          "default": "PerPerson"
        }
      ],
      "accountName": "sap-successfactors",
      "altAccountName": null,
      "parametersJsonc": "[\r\n    {\r\n        \"name\": \"recordType\",\r\n        \"label\": \"recordType\",\r\n        \"type\": \"text\",\r\n        \"default\": \"PerPerson\"\r\n    }\r\n]"
    }
  },
  "flags": {
    "sandboxes": [
      {
        "allowed": false,
        "version": 1
      },
      {
        "allowed": true,
        "version": 2
      }
    ],
    "imlIsUserEditable": true
  },
  "label": "SAP SuccessFactors",
  "theme": "#014185",
  "_hooks": {},
  "global": true,
  "groups": [
    {
      "label": "Other",
      "modules": [
        "searchRecords",
        "getRecord",
        "makeAnApiCall"
      ]
    }
  ],
  "icon32": "\\x89504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af400000006624b474400ff00ff00ffa0bda793000002884944415458c3ed954b884e6118c77f67cc8ccbb84f24c6b59848d98885c594ec2c140d59b112b2b164dc53564a6ea55cca8e8492722bf7dccb6da164a14664168cb9329ff9597ccf994e33cc47a3becdf7afd339e77d9febff79dee785124a28a1c848d4ea62fa4fd49745729e03ce24aa45727e0cd85e9e59ec003e01edc008601c3034f6045a804ea00c180554005d4033d01d7265c0b0d04bfa717e04d806b4a276abd7d5a56a8d5aad4e5597a827d49cdaa6ae556bd57921affa4a5da0ce8e67ae5aa76e51dfda175dea0175780ff1eadd70885aa54e8837eace507ca88e8d35d40db1fe581d196b83d56119993af563bfce2380cda150a91e55dfabf7d5c36a63286fcb18469d197b4f33016c529fc43b51cbd573fd3a8f9a55c4f70fe03cf008980e6c0426019f81cb21333feaff0eb8ddabce13637f45f4400e688abd9e9a2749afd6509f45edd2ec2ad4596a83daa45e08762ad553eaa2905ba9decb30b04a3d1dbd9496e46230d927f36c00aa2fd475ea347550269835619868c00fead6f89f144d3a266b3ca3bb4cddad8ee8efa4276a771c33800fc00d6007d0080c099a3b801a6035f012b81ae5ab07ae015f8029c0646034b0288eed11e05b1fda7b31d0acee524faacfd59bea9c42f329b21c1325236c74aa1deaa1b43485501e19ef075ac90fa01cf961541653d268b07ae06bc8bc066e45e6292a81c1c041a0e1b70df787006a81f5c01de063accf0016020f82cac5c0be904f802b11643a0105c60387ffc579da0386a116f26355a03ab269cf643734a397b26404f413380eec0dd99f293b8502f91f97510e380a6c8df22c07be03678196420194036f06e03c012e017b8036f2175133f94babfbaf0ca8e307c84073649ca22a9c7740e1129450420945c72f5c1b8a68a54b0ca60000000049454e44ae426082",
  "icon64": "\\x89504e470d0a1a0a0000000d4948445200000040000000400806000000aa6971de00000006624b474400ff00ff00ffa0bda793000005714944415478daed995b88955514c77fe7cc3872b4cc52d3d2bc1096d145a32c4aa21ea2ab85854176b1a088e8a5347a297b081f22a2e821228288b2a40b649668e14b3d2846626a419414488829792bafa3737e3decfd39dbcfef1c679c998ee0f787e19bb32feb5bebbfd65e6beffd418912254a942851a2448912254a942871daa1a20e69b5122d44b5a27ed76a2d5a800a20f04d45b5d5dab400029f01f3db5bad498b8cff187806d85e6db536ff33eac04799f100a75304d4810f81f9c00e804aa5d290804ee06f024bfb08449d058c0486d39cb823c00142a865a800b5827987e3d82254e2f80ea01a7ff7abf11428b41b580e2c0136c4c187a2024380d1c025c00ce026e0e2a8608a65c02b3902aac002e08edcd8d5c0f3405781d2d548da086032702d701d30aabf8c07c06efca4dea90e5269541c625f451da52e54bb121987d4d9e9fcec7f75ae7ad863b1446d6b568892f91dea7475b1da69cfd0a5beaf8e6868531cb8599dd1ccf002a56a519914ebd5d1791971fc78f5d7de125020e70cf54db5de67e313021634f0da50754cf4762d6947bd5fdd977be9cb452f4ba2e6ad660424b207c5bf4a5e5efc3d56fdb1cfc61372c056e0ab6c6d2483ef06e601e71392d576601d2147fc492825e9367a572aa788ebd8ff486e5e1ee30839e4ecf8ce15c052f56022770b21d74c2b98df7ccd1744c0ba346c236355f58306ecfea3fee2f1ebf96b75482e4af251758efafd0922608aba3519b35f7dbc40d63d053af4d8f319aa310ada0a587c8d500dfecdf59d094ce1d80a22b014d89fb4750097110e5c59dbcee8d1dea006dc1c754db19350ae4fcef309016381095943326903f010300b7803584fe39abd1958999b3f96b08486e5da9747e57b83ddd1c014a97527653c703409bed1281b27096ca4a14c7ea8eeca85debb71d9a4a13f5bfd4bbd2617ba3575450f97c021f5874c466edc9c18f2bd0efb220276ab8f664634189766e85ba362d91abdab60edbf1dfb9f2be87baa0901c322790fabb7abe715189f569493373e214075a7a18c4d6a262c31e252f567756da640d23fc6b0b1ca92632dd77f91ba455d6aeff701a85719f62e8bfa647c8e802c8bfe1689b83e7aa3515d477d4c7da1c0c333d50351e636756a8e8036c326eacb9e1290c89ea4ae8c4bb16fc6171090a11e97c52af525755a0cbbbc42a3d47139e3501f5037aa9be252b9a960cc1cf513b5bd9901c9f8e1eabd8632da77cf47a43742d9b3287d6e019e246c3ef21b260adab2d3e36042e5d803d4b3cc1cc75d003c012c043a93f9c3805b08e5af12e54c06ae01ae003e079ea6b7d9be0711b02632bba341543cdb1f8c6704c4d0bfc170c849dbd32a50b77bcfdf65d89cf58be7534f11bdf42af005301db80d984a38fb77026b81c5fdc23847a3a50b5843b83f6838343e4fbecef7c01baacb0ca7ac74cdb5c7ec3db8278cdb5de32f8cc9b3cd5056db0d5be0093629b3898cfc56b86f75fe046807f602efc467caec9122ef4405da0839a39ef3c4d5c07b84dba4ad84cb9421c0f828ffbed8de530c9ce71383f6aaafab97dbe43224898c89ea8386a372be6f818d71509dd5cc8b051130609ecfd00e0c251c6de700ab806f818dea56ba0f3735c279e14682177f27464c2ef3cf6cf2aec1c0dce8d54a0383ea8468e9001631909e8f28fa3062347c0fdd879f1a212166a5a92b332437b78de69797758e3fd41ca713e1ea7ac08d6f44402b91dddbcfcb8c27ec03260207813f80c3fd49c8a9f45de0b88447b8119e4b58121dc026e053b5de5f249c2a5f868a8c07b892b01c6bf1390938b73f5f7c2a10d0acd4ed2324e96db1ef08c7de02f519ed848bce56a14ad80dbe4871c25b47a80a35c27e6235bdbf4d6a8a8a7a560b098050693a0b8ccf4a6c9550810e13ef2707b22a942851a2448912254a942851a2448912a701fe035df673ac8bbb31ba0000000049454e44ae426082",
  "origin": "eu1.make.com",
  "public": true,
  "compile": false,
  "created": "2025-01-13T08:31:57.789472+00:00",
  "icon128": "\\x89504e470d0a1a0a0000000d4948445200000080000000800806000000c33e61cb00000006624b474400ff00ff00ffa0bda79300000b244944415478daed9d79ac5c551dc73f33af7b6d4bdf2b20a5222965511009884014454445508280415114a352a3a821c62d1a83a8444dd49a1808125c126553b1b25440a820fb8e4576044aa1a02d6da174e195375ffff89debdc379d997beecc9de5bdfe3ec94dfad27bcffd9df3fbdeb3fece19701cc7711cc7711cc7711cc7711cc7711cc7711cc7711cc7711cc7711cc7711cc7711cc7711cc7711cc7711cc771c6002549bdb6c1e91de509c079bdb6c2e90925e0e192bc0ad856b913f8d2845e5be1f4843b80cf00f7977b6d89d375ee003e0bdc0fe002d8b6489cbf0ca0542ab900b621b6723e780db0ad701b759c0f2e806d811b804f51c7f9003e0a18dfdc002c041e81ad9d0f5e038c67329d0f2e80f14a94f3217f13206003f09f70ad06d6039b80a9c06b8041607b600e300b98584086045422ef2d63d39c315442da7929a5de11fbae6e11ed7c8813808017b09ee452e06ee029602de6f84ab8cae19a0ccc007604e6036f06de02ec03cca535415c002c26bbc612f051e04391e9fe0eb80c18c869cf24603a26f0ed8179c0aec02ee1ef2244df0ab99c6f25d69ce7242d9274a0a42992c8b37490dc2f69b2a4dd249d24e9b7929e9234a238d6487a7bcc7bc3bbde2f694364daa7b7b31492ca5f59d24c497b493a51d2b9921ecf91c722b85ed29e797dd448005b245d21e9604903ed14529dc21a90b47b28fcfb223276b5a4e939043024e9f66e08a0890d6549f3257d3308a13f9ddf40009b25fd54d2604b09e62ba44519191b91f485583b52223ba35702a863cb3e92fe24e9d5be737e1d018c04a74ced42c11c226b629af1a4acb6c89bfe419256f7520035791d94749e8a6f12da737e3032cddf24edd08542992ee992880cfe4a399ba090fe34494b7a2d801a9be648baacaf9ccfe85ef55ae0c7c07f3b5910816380a3336edf84f5fc475a78d546e00ae2878edd6035f03de0d902d2cadfdb6f405a00d700ff884950a37bf783a1d6981dbebc72862ae702a703d3326c7b00b8256f0653f75e0bac68bd8c8b2365d35dc01fda4cae30e743751e6018b81478a5d9cd29a7ee017c0438041bef4fc2bed89781e78147817b24dd8b293efd157f1a3820c2b62bb1afa655fe8d09fae4760a28e479a790ce346cae610458053c860556ac82e6ce28954ac812bb145b9c99d58239853a3fc9a0243d2d6941565ba26aaff69e88366ab3a447659d9f2343bbbf7f785716ab64730f2d3b2d5c27043b5aee0384740e90f442cdb315492f4bba5bd24245749c435ab3153f4c2dbccd6f2480db256d179981afb660fccb92ae91f4f7c8fb2f5398786a235f48da49d2b20e0920cd26d998bfdc2cbd905649d2affbc2f954fb009b812d91cfac24a3a9a8c374e03dc06111f78e007f0936b5cb7358dfa6d34c013e0fbc31e25e014fe648bbf86a3f45228001e217351663a38575855a52e509e0ba669955756cddb0da4d3d7b25f052876c4d3317d8bfd90d299b5645a6d951e743550083d857da9460c006e04ce0446c21657dc1365d0b2c6ff49f29879f842d32657137706fc136d6a30c0c45de3b4cf62a64c79d9f180df05a6c252b9360c8ab58d59aacbc9d83f588639b91466cc0aa7f6564783a701c703890d52ebe04fcb523a5371a115fd36479b32bce87aa00660387426661921814ae8d58757d1ad6c67f02381f1b060eb760cf7dc0ed11f7ed09ec07bc93263557aae0aec286a79de40542dc5d04d3682c82ae391f464f041d8f0571e42208a1522a9596031701a70247009f042ec6661663bbae57d0a46f9112e73b30d1be09d82b22dd87815b3b588e0a79bdafe94d55fbe735b8a5abce4f8c4ad8920c8bda1d6aa83a0e9f1486503f93b43263a8b352d2be11c3a829922eaf1dca357a2e65cb29218f450e032b929e97f41349db47a635b9c6fe8e0ff5b28c4af38ca4238a3442d5a5df0325fd51d22b0d047049104c565a7b4b7a36f5dce5ca983308cfed2a9b986a4500f3259d2fe962491749ba50d2d9924e93b49fa40931e515d25a205be5ecbdf38351b53c24e9b00e88004933247d5dd2da9a770e4bfa58e497bc50a397559f0da2c87a7f4916a9d38a001211a7af56a3a3166a746c40ef9c1f0cabc753924e0d0e2b5a0803923e27697dea7d0f48da39c28913b5f532f248b09588e78f96b4318f000a2ce76449f8c6be717e30ac119b656161ef53987029c2c894237f246b43256b43631cb82088b3964b429a310eb8a3db02487dfd5f4b7dfdbd777e302e8b1765214dc7aaa030b190c63c49f7869ae0b008e721e9646ddd914b6aac0591699cd94d01a4defb015987b17f9c1f0c8c65a3a4db247d4716ce35b3d50ca40ae5db92962a343519f70fc8228aebb145d2c7236b914354edd1772324ac246b7a9ee83be70723f3529175e26e92f40349ef525849cc93215563f74e8974dceb243dd2c4aedf286e356e9aa4ab3a298094c0b70bef48621ffbcbf9c1d876a8c8aaf05b247d4556ade789e09d92d42411f70ec9dad0c5b235f807659dc7db245d201b45348d1f4c39e68b9d10402afd21491f96c55826c3defe737e30ba284624dda5828790750a77a2ac2fb263b866258ecf21bcbd24ad08a28d7d6fb9ce3510443c14d23c46d20f25dd298b1148e84fe753ecf6f03216ea7516f0416c6ebc3052d3a25b80356d26f7387023f19b63e703dfc2f63ea63d38110bed1ac242e306b1ad7169ba3fbd9b834602783a647417f26f7e7c7d288842055030af624bd9b16b1fb3816343bef2d0d7ce87fa5fc03070067014f00b2c02284fbdf5081d0c2d6f9794136ec2562d3b45df3b1fa8db07582a0b5c4c865efb4afaae2c6e709d1aef6e199674aba443fbb1adabc973d2a667ee39545c4c602d7ddbe6d752db046c067e896d12a1542a8d485a86ad732fc2d6e1f7c69a86d9d899009bb110a77f013763e706f4afe2abb655b00094a2191b5f7e428d72af52fcb06cd4355ec959038c992f3f215d036c00ce2522aca91baa0e05380b782bb6c96325215238fdfe5441978199c082909787ba656b606c7df981b400ae238450f791f107619136ebb098c3c7806724adc17af2252c247b07ec848e3db15d4b4b8053683f46319631e97ce0ff4dc08bb255bf8e555da94e65394713f3fd3ad56ca5ce55cb72497b149197882660cc55fb699261e0162c4e6d5692e9a24815cc1c6c3fe1ccc847671002556b28d5b96a9947d884d261a78cdd2f3f900860081bf32fc6366fee2c5bc56a2bf1f0fc042c88f3f7d84ce1bac8c7931147abf93a92ad67e58a64cc3b1fa83b0f302c5b68f9b9a4a324cd5588798b1144aafa9e25e970d9e6d0d5925e0a7fc73effe51ce3ee7aac946d646db77cea350163bada4f93f58b219bb05d3acb807f62e1d5cf60d3bc1ba91ec050c2e604e600bb615ba4de86856dcf08f7acc5f6c6af276e7af90860df36f236826d0b7b94f60ec4ac60dbc38fc73a9ce3e3cb0fe4f9c918613def0da92bd9f75fc23668ccc0164cc6eb19c4e3caf9904f00db3ae3cef9e06705c7322e9d0fe3b7aa2e9286ce4f559e3b62c7e5ccc3fa387762fda54abf8bc56b80e6c438ff50e06c4c00ebb18ef099d886d949fddec2ba001a1353edef8e397b09362ada0dd80ef83316157502747c32aa2d5c00f569eafc94438fc54e41bb12780376b6c10a6c01eb22ecfc84a9bdce4c335c005b93a7c3b73b769ee1466c1afd54ec9c845bb1f888415a3b0eae6bb8004693b7b7bf069b469f00bc08dc83cd8d5c8d05cc0c53cc61571dc3055025daf935a7911e8cd504cf614dc0cdd831b8c7857fafeb75c69ae102305a1de75f8f1d3ff30d6ce83701fb6595f76255ff3939d3eb3a25494b7a6d442ff38f45309f450b933ca13338198ba07e3776642ec083c0858c85f84849bdfa7d9b7ea14258d368c551a911c144ecf0a7616c11adaf1def388ee3388ee3388ee3388ee3388ee3388ee3388ee3388ee3388ee3388ee3388ee3388ee3388ee3388ee3388ee38c29fe072b709d6088662acd0000000049454e44ae426082",
  "icon256": "\\",
  "icon512": "\\",
  "install": {},
  "ipmRepo": null,
  "ipmTags": null,
  "version": 1,
  "website": null,
  "_modules": {
    "getRecord": {
      "id": 169918,
      "api": {
        "qs": {
          "$expand": "{{join(parameters.expand, ',')}}",
          "$select": "{{join(parameters.select, ',')}}"
        },
        "url": "/odata/v2/{{parameters.recordType}}({{buildGetParameters(omit(parameters,'select','expand','recordType'))}})",
        "response": {
          "output": "{{parseResponse(body.d)}}"
        }
      },
      "rev": 2,
      "crud": "read",
      "name": "getRecord",
      "epoch": null,
      "flags": {},
      "label": "Get a record",
      "scope": [],
      "expect": [
        {
          "name": "recordType",
          "type": "select",
          "label": "Record type",
          "nested": [
            "rpc://app%23sap-successfactors@1/parametersIdForGet",
            {
              "help": "Select parameters for response. Leave empty for default response. Mutually exclusive with __Expand__ field.",
              "name": "select",
              "type": "select",
              "label": "Select output",
              "options": "rpc://app%23sap-successfactors@1/parametersSelectOutput",
              "multiple": true
            },
            {
              "help": "Expand related entities. Leave empty for default response. If __Select Output__ is used, this field will be ignored.",
              "name": "expand",
              "type": "select",
              "label": "Expand",
              "options": "rpc://app%23sap-successfactors@1/parametersExpand",
              "multiple": true
            }
          ],
          "grouped": true,
          "options": "rpc://app%23sap-successfactors@1/listEndpoints",
          "editable": false,
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "sap-successfactors",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/odata/v2/{{parameters.recordType}}({{buildGetParameters(omit(parameters,'select','expand','recordType'))}})\",\n\t\"qs\": {\n\t\t\"$select\": \"{{join(parameters.select, ',')}}\",\n\t\t\"$expand\": \"{{join(parameters.expand, ',')}}\"\n\t},\n\t\"response\": {\n\t\t\"output\": \"{{parseResponse(body.d)}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        "rpc://app%23sap-successfactors@1/interfaceAll"
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "sap-successfactors",
      "description": " Retrieves details about specified record of selected record type.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"recordType\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Record type\",\n\t\t\"options\": \"rpc://listEndpoints\",\n\t\t\"required\": true,\n\t\t\"grouped\":true,\n\t\t\"editable\": false,\n\t\t\"nested\": [\n\t\t\t\"rpc://parametersIdForGet\",\n\t\t\t{\n\t\t\t\t\"name\": \"select\",\n\t\t\t\t\"type\": \"select\",\n\t\t\t\t\"label\": \"Select output\",\n\t\t\t\t\"multiple\": true,\n\t\t\t\t\"options\": \"rpc://parametersSelectOutput\",\n\t\t\t\t\"help\": \"Select parameters for response. Leave empty for default response. Mutually exclusive with __Expand__ field.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"expand\",\n\t\t\t\t\"type\": \"select\",\n\t\t\t\t\"label\": \"Expand\",\n\t\t\t\t\"multiple\": true,\n\t\t\t\t\"options\": \"rpc://parametersExpand\",\n\t\t\t\t\"help\": \"Expand related entities. Leave empty for default response. If __Select Output__ is used, this field will be ignored.\"\n\t\t\t}\n\t\t]\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\r\n   \"rpc://interfaceAll\"\r\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "makeAnApiCall": {
      "id": 170803,
      "api": {
        "qs": {
          "{{...}}": "{{toCollection(parameters.qs, 'key', 'value')}}"
        },
        "url": "{{connection.Host}}/{{parameters.url}}",
        "body": "{{parameters.body}}",
        "type": "text",
        "method": "{{parameters.method}}",
        "headers": {
          "{{...}}": "{{toCollection(parameters.headers, 'key', 'value')}}"
        },
        "response": {
          "output": {
            "body": "{{body}}",
            "headers": "{{headers}}",
            "statusCode": "{{statusCode}}"
          }
        }
      },
      "rev": 2,
      "crud": null,
      "name": "makeAnApiCall",
      "epoch": null,
      "flags": {},
      "label": "Make an API call",
      "scope": [],
      "expect": [
        {
          "help": "Enter a path relative to `https://<yourDamain>`. For example, `/odata/v2/PerPerson`.",
          "name": "url",
          "type": "text",
          "label": "URL",
          "required": true
        },
        {
          "name": "method",
          "type": "select",
          "label": "Method",
          "default": "GET",
          "options": [
            {
              "label": "GET",
              "value": "GET"
            },
            {
              "label": "POST",
              "value": "POST"
            },
            {
              "label": "PUT",
              "value": "PUT"
            },
            {
              "label": "PATCH",
              "value": "PATCH"
            },
            {
              "label": "DELETE",
              "value": "DELETE"
            }
          ],
          "required": true
        },
        {
          "help": "You don't have to add authorization headers; we already did that for you.",
          "name": "headers",
          "spec": {
            "spec": [
              {
                "name": "key",
                "type": "text",
                "label": "Key"
              },
              {
                "name": "value",
                "type": "text",
                "label": "Value"
              }
            ],
            "type": "collection",
            "label": "Header"
          },
          "type": "array",
          "label": "Headers",
          "labels": {
            "add": "Add header"
          },
          "default": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        {
          "name": "qs",
          "spec": {
            "spec": [
              {
                "name": "key",
                "type": "text",
                "label": "Key"
              },
              {
                "name": "value",
                "type": "text",
                "label": "Value"
              }
            ],
            "type": "collection",
            "label": "Parameter"
          },
          "type": "array",
          "label": "Query String",
          "labels": {
            "add": "Add parameter"
          }
        },
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        }
      ],
      "public": true,
      "typeId": 12,
      "appName": "sap-successfactors",
      "samples": null,
      "apiJsonc": "{\n    \"qs\": {\n        \"{{...}}\": \"{{toCollection(parameters.qs, 'key', 'value')}}\"\n    },\n    \"url\": \"{{connection.Host}}/{{parameters.url}}\",  // Defines the fixed base URL and maps the relative path URL from the user.\n    \"body\": \"{{parameters.body}}\",\n    \"type\": \"text\",\n    \"method\": \"{{parameters.method}}\",\n    \"headers\": {\n        \"{{...}}\": \"{{toCollection(parameters.headers, 'key', 'value')}}\"\n    },\n    \"response\": {\n        \"output\": {\n            \"body\": \"{{body}}\",\n            \"headers\": \"{{headers}}\",\n            \"statusCode\": \"{{statusCode}}\"\n        }\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        },
        {
          "name": "headers",
          "type": "collection",
          "label": "Headers"
        },
        {
          "name": "statusCode",
          "type": "number",
          "label": "Status code"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "sap-successfactors",
      "description": "Performs an arbitrary authorized API call.",
      "expectJsonc": "[\n    {\n        \"help\": \"Enter a path relative to `https://<yourDamain>`. For example, `/odata/v2/PerPerson`.\",\n        \"name\": \"url\",\n        \"type\": \"text\",\n        \"label\": \"URL\",\n        \"required\": true\n    },\n    {\n        \"name\": \"method\",\n        \"type\": \"select\",\n        \"label\": \"Method\",\n        \"default\": \"GET\",\n        \"options\": [\n            {\n                \"label\": \"GET\",\n                \"value\": \"GET\"\n            },\n            {\n                \"label\": \"POST\",\n                \"value\": \"POST\"\n            },\n            {\n                \"label\": \"PUT\",\n                \"value\": \"PUT\"\n            },\n            {\n                \"label\": \"PATCH\",\n                \"value\": \"PATCH\"\n            },\n            {\n                \"label\": \"DELETE\",\n                \"value\": \"DELETE\"\n            }\n        ],\n        \"required\": true\n    },\n    {\n        \"name\": \"headers\",\n        \"label\": \"Headers\",\n        \"help\": \"You don't have to add authorization headers; we already did that for you.\",\n        \"type\": \"array\",\n        \"spec\": {\n            \"label\": \"Header\",\n            \"type\": \"collection\",\n            \"spec\": [\n                {\n                    \"name\": \"key\",\n                    \"label\": \"Key\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"value\",\n                    \"label\": \"Value\",\n                    \"type\": \"text\"\n                }\n            ]\n        },\n        \"labels\": {\n            \"add\": \"Add header\"\n        },\n        \"default\": [\n            {\n                \"key\": \"Content-Type\",\n                \"value\": \"application/json\"\n            }\n        ]\n    },\n    {\n        \"name\": \"qs\",\n        \"label\": \"Query String\",\n        \"type\": \"array\",\n        \"spec\": {\n            \"label\": \"Parameter\",\n            \"type\": \"collection\",\n            \"spec\": [\n                {\n                    \"name\": \"key\",\n                    \"label\": \"Key\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"value\",\n                    \"label\": \"Value\",\n                    \"type\": \"text\"\n                }\n            ]\n        },\n        \"labels\": {\n            \"add\": \"Add parameter\"\n        }\n    },\n    {\n        \"name\": \"body\",\n        \"type\": \"any\",\n        \"label\": \"Body\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": null,
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "searchRecords": {
      "id": 169916,
      "api": {
        "qs": {
          "$top": 100,
          "$expand": "{{join(parameters.expand, ',')}}",
          "$filter": "{{parameters.odataFilter}}",
          "$search": "{{parameters.search}}",
          "$select": "{{join(parameters.select, ',')}}",
          "$orderby": "{{join(parameters.orderby, ',')}}"
        },
        "url": "/odata/v2/{{parameters.recordType}}",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{parseResponse(item)}}",
          "iterate": "{{body.d.results}}"
        },
        "pagination": {
          "qs": {
            "$skip": "{{pagination.page * 100 }}"
          }
        }
      },
      "rev": 2,
      "crud": "read",
      "name": "searchRecords",
      "epoch": null,
      "flags": {},
      "label": "Search records",
      "scope": [],
      "expect": [
        {
          "name": "recordType",
          "type": "select",
          "label": "Record type",
          "nested": [
            {
              "help": "Use OData Filter string to filter the results. For more details see the [Odata Documentation](https://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_The_$filter_System).",
              "name": "odataFilter",
              "type": "text",
              "label": "Filter"
            },
            {
              "help": "Select parameters for response. Leave empty for default response. Mutually exclusive with __Expand__ field.",
              "name": "select",
              "type": "select",
              "label": "Select output",
              "options": "rpc://app%23sap-successfactors@1/parametersSelectOutput",
              "multiple": true
            },
            {
              "help": "Expand related entities. Leave empty for default response. If __Select Output__ is used, this field will be ignored.",
              "name": "expand",
              "type": "select",
              "label": "Expand",
              "options": "rpc://app%23sap-successfactors@1/parametersExpand",
              "multiple": true
            },
            {
              "name": "orderby",
              "type": "select",
              "label": "Order by",
              "options": "rpc://app%23sap-successfactors@1/parametersOrderBy",
              "multiple": true
            }
          ],
          "grouped": true,
          "options": "rpc://app%23sap-successfactors@1/listEndpoints",
          "required": true
        },
        {
          "help": "The search is only available in fields that are configured as `searchable` in your instance.",
          "name": "search",
          "type": "text",
          "label": "Search",
          "advanced": true
        },
        {
          "help": "Maximum number of returned results (bundles).",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 10
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "sap-successfactors",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/odata/v2/{{parameters.recordType}}\",\n\t\"qs\": {\n\t\t\"$top\": 100,\n\t\t\"$filter\": \"{{parameters.odataFilter}}\",\n\t\t\"$search\": \"{{parameters.search}}\",\n\t\t\"$orderby\": \"{{join(parameters.orderby, ',')}}\",\n\t\t\"$select\": \"{{join(parameters.select, ',')}}\",\n\t\t\"$expand\": \"{{join(parameters.expand, ',')}}\"\n\t},\n\t\"pagination\": {\n\t\t\"qs\": {\n\t\t\t\"$skip\": \"{{pagination.page * 100 }}\"\n\t\t}\n\t},\n\t\"response\": {\n\t\t\"iterate\": \"{{body.d.results}}\",\n\t\t\"output\": \"{{parseResponse(item)}}\",\n\t\t\"limit\": \"{{parameters.limit}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        "rpc://app%23sap-successfactors@1/interfaceAll"
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "sap-successfactors",
      "description": " Searches for records of the selected record type.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"recordType\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Record type\",\n\t\t\"options\": \"rpc://listEndpoints\",\n\t\t\"required\": true,\n\t\t\"grouped\": true,\n\t\t\"nested\": [\n\t\t\t{\n\t\t\t\t\"name\": \"odataFilter\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Filter\",\n\t\t\t\t\"help\": \"Use OData Filter string to filter the results. For more details see the [Odata Documentation](https://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_The_$filter_System).\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"select\",\n\t\t\t\t\"type\": \"select\",\n\t\t\t\t\"label\": \"Select output\",\n\t\t\t\t\"multiple\": true,\n\t\t\t\t\"options\": \"rpc://parametersSelectOutput\",\n\t\t\t\t\"help\": \"Select parameters for response. Leave empty for default response. Mutually exclusive with __Expand__ field.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"expand\",\n\t\t\t\t\"type\": \"select\",\n\t\t\t\t\"label\": \"Expand\",\n\t\t\t\t\"multiple\": true,\n\t\t\t\t\"options\": \"rpc://parametersExpand\",\n\t\t\t\t\"help\": \"Expand related entities. Leave empty for default response. If __Select Output__ is used, this field will be ignored.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"orderby\",\n\t\t\t\t\"type\": \"select\",\n\t\t\t\t\"label\": \"Order by\",\n\t\t\t\t\"multiple\": true,\n\t\t\t\t\"options\": \"rpc://parametersOrderBy\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"search\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Search\",\n\t\t\"advanced\": true,\n\t\t\"help\": \"The search is only available in fields that are configured as `searchable` in your instance.\"\n\t},\n\t{\n\t\t\"name\": \"limit\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Limit\",\n\t\t\"default\": 10,\n\t\t\"help\": \"Maximum number of returned results (bundles).\"\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    \"rpc://interfaceAll\"\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    }
  },
  "approved": true,
  "authorId": 671322,
  "billable": true,
  "inReview": false,
  "keywords": null,
  "language": "en",
  "_accounts": {
    "sap-successfactors": {
      "api": {
        "info": {
          "log": {
            "sanitize": [
              "request.headers.authorization"
            ]
          },
          "url": "{{parameters.Host}}/oauth/validate",
          "headers": {
            "authorization": "Bearer {{connection.accessToken}}"
          },
          "response": {
            "uid": "{{body.id}}",
            "metadata": {
              "type": "text",
              "value": "User ID: {{connection.UserID}}, Company ID: {{connection.company_id}}"
            }
          }
        },
        "token": {
          "log": {
            "sanitize": [
              "request.body.client_id",
              "request.body.assertion",
              "response.body.access_token"
            ]
          },
          "url": "{{parameters.Host}}/oauth/token",
          "body": {
            "assertion": "{{base64(replace(temp.Assertion, temp.SignatureValue, cryptoSign('RSA-SHA256', temp.SignedInfo, parameters.privateKey, 'base64') ))}}",
            "client_id": "{{parameters.api_key}}",
            "company_id": "{{parameters.company_id}}",
            "grant_type": "urn:ietf:params:oauth:grant-type:saml2-bearer"
          },
          "temp": {
            "{{...}}": "{{signAssertion(parameters, uuid, uuid)}}"
          },
          "type": "urlencoded",
          "method": "POST",
          "response": {
            "data": {
              "accessToken": "{{body.access_token}}"
            }
          },
          "condition": "{{if(!parameters.forceRefresh && data.accessToken, data.expires < addMinutes(now, 1), true)}}"
        }
      },
      "rev": 4,
      "name": "sap-successfactors",
      "type": "oauth",
      "label": "SAP SuccessFactors",
      "scope": [],
      "scopes": {},
      "aliasTo": null,
      "appName": "sap-successfactors",
      "install": {},
      "apiJsonc": "{\n\t\"token\": {\n\t\t\"condition\": \"{{if(!parameters.forceRefresh && data.accessToken, data.expires < addMinutes(now, 1), true)}}\",\n\t\t\"temp\": {\n\t\t\t\"{{...}}\": \"{{signAssertion(parameters, uuid, uuid)}}\"\n\t\t},\n\t\t\"url\": \"{{parameters.Host}}/oauth/token\",\n\t\t\"method\": \"POST\",\n\t\t\"body\": {\n\t\t\t\"company_id\": \"{{parameters.company_id}}\",\n\t\t\t\"client_id\": \"{{parameters.api_key}}\",\n\t\t\t\"grant_type\": \"urn:ietf:params:oauth:grant-type:saml2-bearer\",\n\t\t\t\"assertion\": \"{{base64(replace(temp.Assertion, temp.SignatureValue, cryptoSign('RSA-SHA256', temp.SignedInfo, parameters.privateKey, 'base64') ))}}\"\n\t\t},\n\t\t\"type\": \"urlencoded\",\n\t\t\"response\": {\n\t\t\t\"data\": {\n\t\t\t\t\"accessToken\": \"{{body.access_token}}\"\n\t\t\t}\n\t\t},\n\t\t\"log\": {\n\t\t\t\"sanitize\": [\n\t\t\t\t\"request.body.client_id\",\n\t\t\t\t\"request.body.assertion\",\n\t\t\t\t\"response.body.access_token\"\n\t\t\t]\n\t\t}\n\t},\n\t\"info\": {\n\t\t\"url\": \"{{parameters.Host}}/oauth/validate\",\n\t\t\"headers\": {\n\t\t\t\"authorization\": \"Bearer {{connection.accessToken}}\"\n\t\t},\n\t\t\"response\": {\n\t\t\t\"uid\": \"{{body.id}}\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"value\": \"User ID: {{connection.UserID}}, Company ID: {{connection.company_id}}\"\n\t\t\t}\n\t\t},\n\t\t\"log\": {\n\t\t\t\"sanitize\": [ \"request.headers.authorization\" ]\n\t\t}\n\t}\n}",
      "authorId": 671322,
      "appVersion": 1,
      "parameters": [
        {
          "name": "Host",
          "type": "text",
          "label": "Host",
          "required": true
        },
        {
          "name": "utc",
          "type": "select",
          "label": "Server migrated to UTC",
          "options": [
            {
              "label": "Yes",
              "value": true
            },
            {
              "label": "No",
              "value": false,
              "nested": [
                {
                  "name": "tz",
                  "type": "timezone",
                  "label": "Server timezone",
                  "editable": true,
                  "required": true
                }
              ]
            }
          ],
          "editable": true,
          "mappable": false,
          "required": true
        },
        {
          "name": "UserID",
          "type": "text",
          "label": "User ID",
          "editable": true,
          "required": true
        },
        {
          "name": "company_id",
          "type": "text",
          "label": "Company ID",
          "editable": true,
          "required": true
        },
        {
          "name": "api_key",
          "type": "password",
          "label": "Api Key",
          "editable": true,
          "required": true
        },
        {
          "name": "privateKey",
          "type": "pkey",
          "label": "Private key",
          "editable": true,
          "required": true
        },
        {
          "help": "Force refresh the access token if you are editing the connection.",
          "name": "forceRefresh",
          "type": "boolean",
          "label": "Force refresh",
          "advanced": true,
          "editable": true,
          "required": true
        }
      ],
      "scopeJsonc": null,
      "installSpec": [],
      "scopesJsonc": null,
      "installJsonc": null,
      "depAccountName": null,
      "depAccountScope": null,
      "parametersJsonc": "[\n    {\n        \"name\": \"Host\",\n        \"type\": \"text\",\n        \"label\": \"Host\",\n        \"required\": true\n    },\n    {\n        \"name\": \"utc\",\n        \"type\": \"select\",\n        \"label\": \"Server migrated to UTC\",\n        \"required\": true,\n        \"mappable\": false,\n        \"editable\": true,\n        \"options\": [\n            {\n                \"value\": true,\n                \"label\": \"Yes\"\n            },\n            {\n                \"value\": false,\n                \"label\": \"No\",\n                \"nested\": [\n                    {\n                        \"name\": \"tz\",\n                        \"label\": \"Server timezone\",\n                        \"required\": true,\n                        \"editable\": true,\n                        \"type\": \"timezone\"\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"name\": \"UserID\",\n        \"type\": \"text\",\n        \"label\": \"User ID\",\n        \"required\": true,\n        \"editable\": true\n    },\n    {\n        \"name\": \"company_id\",\n        \"type\": \"text\",\n        \"label\": \"Company ID\",\n        \"required\": true,\n        \"editable\": true\n    },\n    {\n        \"name\": \"api_key\",\n        \"type\": \"password\",\n        \"label\": \"Api Key\",\n        \"required\": true,\n        \"editable\": true\n    },\n    {\n        \"name\": \"privateKey\",\n        \"type\": \"pkey\",\n        \"label\": \"Private key\",\n        \"required\": true,\n        \"editable\": true\n    },\n    {\n        \"name\": \"forceRefresh\",\n        \"type\": \"boolean\",\n        \"label\": \"Force refresh\",\n        \"help\": \"Force refresh the access token if you are editing the connection.\",\n        \"editable\": true,\n        \"required\": true,\n        \"advanced\": true\n    }\n]",
      "installSpecJsonc": null,
      "connectedSystemName": null,
      "depAccountScopeJsonc": null
    }
  },
  "baseJsonc": "{\n\t\"baseUrl\": \"{{connection.Host}}/\",\n\t\"headers\": {\n\t\t\"accept\": \"application/json\",\n\t\t\"Authorization\": \"Bearer {{connection.accessToken}}\"\n\t},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"message\": \"[{{statusCode}}] {{body.error.message.value}}\"\n\t\t}\n\t},\n\t\"log\": {\n\t\t\"sanitize\": [\n\t\t\t\"request.headers.authorization\"\n\t\t]\n\t}\n}",
  "countries": null,
  "_functions": {
    "sortByKey": {
      "rev": 2,
      "code": "function sortByKey(key, direction = 'asc') {\n    // author: Ness (copied from Oracle), used in fn parseMetadataToSelect\n    if (typeof key !== \"string\" || key === \"\") return undefined;\n\n    switch (direction) {\n        case \"desc\":\n            return (a, b) => a[key] < b[key] ? 1 : a[key] > b[key] ? -1 : 0;\n        default:\n            return (a, b) => a[key] > b[key] ? 1 : a[key] < b[key] ? -1 : 0;\n    }\n}",
      "name": "sortByKey",
      "test": "it('should sort input default to ascending', () => {\r\n    const input = [{ label: 'a' }, { label: 'c' }, { label: 'b' }];\r\n    const output = [{ label: 'a' }, { label: 'b' }, { label: 'c' }];\r\n    assert.deepStrictEqual(input.sort(sortByKey('label')), output);\r\n});\r\n\r\nit('should sort input ascending', () => {\r\n    const input = [{ label: 'a' }, { label: 'c' }, { label: 'b' }];\r\n    const output = [{ label: 'a' }, { label: 'b' }, { label: 'c' }];\r\n    assert.deepStrictEqual(input.sort(sortByKey('label', 'asc')), output);\r\n});\r\n\r\nit('should sort input descending', () => {\r\n    const input = [{ label: 'a' }, { label: 'c' }, { label: 'b' }];\r\n    const output = [{ label: 'c' }, { label: 'b' }, { label: 'a' }];\r\n    assert.deepStrictEqual(input.sort(sortByKey('label', 'desc')), output);\r\n});\r\n",
      "appName": "sap-successfactors",
      "arguments": "(key, direction = 'asc')",
      "appVersion": 1
    },
    "nameToLabel": {
      "rev": 2,
      "code": "function nameToLabel(str) {\n    // author: Kat Ben\n\n    if (typeof str !== \"string\") return str;\n    const abbrv = ['id', 'url', 'uri', 'html', 'vat', 'zip', 'crm', 'bcws', 'bcwp', 'eac',\n        'mdf','uuid','wf' ];\n    const nameArr = str.includes(' ') ? str.split(' ') : str.split(/(?<=[a-z\\d])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-z])(?=[\\d])|\\s|_/);\n\n    return nameArr.map((word, index) => {\n        if (/^[A-Z]+$/gm.test(word)) return word //all caps word are considered abreviations \n        if (abbrv.includes(word.toLowerCase())) return word.toUpperCase(); // Capitalize abbreviations\n        if (index === 0) return word.replace(word.charAt(0), word.charAt(0).toUpperCase()); // Capitalize the first character of first word\n        return word.toLowerCase()\n    }).join(' ');\n}",
      "name": "nameToLabel",
      "test": "// test for Sentence case only\r\nit('Should return Sentence case label for expected input', () => {\r\n\r\n    assert.strictEqual(nameToLabel(\"IdCustom_url\",\"SC\"), \"ID custom URL\", \"Abbreviation\");\r\n    assert.strictEqual(nameToLabel(\"testCRMTest\",\"SC\"), \"Test CRM test\", \"camelCase\");\r\n    assert.strictEqual(nameToLabel(\"test123Test\",\"SC\"), \"Test 123 test\", \"with number\");\r\n    assert.strictEqual(nameToLabel(\"Title Case\",\"SC\"), \"Title case\", \"Title Case with space\");\r\n    assert.strictEqual(nameToLabel(\"vivaMEX\",\"SC\"), \"Viva MEX\", \"vivaMEX\");\r\n});\r\n\r\nit('Should return input for unexpected input', () => {\r\n    assert.strictEqual(nameToLabel(true), true, \"Input is boolean\");\r\n    assert.strictEqual(nameToLabel(123), 123, \"Input is a number\");\r\n    assert.deepStrictEqual(nameToLabel([\"a\",\"b\",\"c\"]),[\"a\",\"b\",\"c\"], \"Input is an array\");\r\n    assert.strictEqual(nameToLabel(undefined), undefined, \"Input is undefined\");\r\n    assert.strictEqual(nameToLabel(null), null, \"Input is null\");\r\n    assert.strictEqual(nameToLabel(\"Customer ID\"), \"Customer ID\", \"Input is already formatted\");\r\n});",
      "appName": "sap-successfactors",
      "arguments": "(str)",
      "appVersion": 1
    },
    "parseResponse": {
      "rev": 2,
      "code": "function parseResponse(parameters) {\n\t// formats dates in API response\n\t//author: Simo and Kat\n\n\t//guards\n\tif (typeof parameters !== 'object' || parameters === null) return parameters;\n\tif(typeof parameters === 'object' && Object.keys(parameters).length === 0) return parameters;\n\tif (Array.isArray(parameters) && parameters.length === 0) return parameters;\n\n\tif (Array.isArray(parameters)) return parameters.map(item => iml.parseResponse(item));\n\n\tlet params = Object.assign({}, parameters);\n\n\tObject.entries(parameters).forEach(([key, value]) => {\n\t\tif (Array.isArray(value)) {\n\t\t\tparams[key] = value.map(item => iml.parseResponse(item));\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tparams[key] = iml.parseResponse(value);\n\t\t\treturn;\n\t\t}\n\n        const TimestampOffset = /\\/Date\\((\\-?[\\d]{1,}[+][\\d]{4})\\)\\//;\n        const TimestampDate = /\\/Date\\((\\-?[\\d]{1,})\\)\\//;\n        const manualDates = ['dateOfBirth'];\n\n        //for some fields we want Date with no Time\n         if ( value && manualDates.includes(key)) {\n            date = value.match(TimestampDate)[1]\n\t\t\tparams[key] = iml.formatDate(iml.parseDate(date+'+0000', 'x'), 'YYYY-MM-DD');\n\t\t\treturn;\n        } \n\n        //if the field contains timestamp and timezone, we parse it as date\n\t\tif (typeof value === 'string' && TimestampOffset.test(value)) {\n            const date = value.match(TimestampOffset)[1]\n\t\t\tparams[key] = iml.parseDate(date, 'x');\n\t\t\treturn;\n\t\t}\n\n        //if the field contains only the timestamp but no timezone, we keep it as raw data\n\t\tif (typeof value === 'string' && TimestampDate.test(value)) {\n            const date = value.match(TimestampDate)[1]\n\t\t\tparams[key] = date;\n\t\t\treturn;\n\t\t}\n\t});\n\n\treturn params;\n}",
      "name": "parseResponse",
      "test": "it('should return input for incorrect input', () => {\r\n    assert.deepStrictEqual(parseResponse([]), [], 'empty array');\r\n    assert.deepStrictEqual(parseResponse({}), {}, 'empty object');\r\n    assert.strictEqual(parseResponse(null), null, 'null');\r\n    assert.strictEqual(parseResponse(undefined), undefined, 'undefined');\r\n});\r\n\r\nit('should return correctly formatted dates in nested parameters', () => {\r\n    const input = {\r\n        \"__metadata\": {\r\n            \"uri\": \"https://apisalesdemo2.successfactors.eu/odata/v2/PerPerson('76_d100')\",\r\n            \"type\": \"SFOData.PerPerson\"\r\n        },\r\n        \"personIdExternal\": \"76_d100\",\r\n        \"lastModifiedDateTime\": \"/Date(1421927296000+0000)/\",\r\n        \"lastModifiedBy\": \"sfadmin\",\r\n        \"createdDateTime\": \"/Date(1421927296000+0000)/\",\r\n        \"dateOfBirth\": \"/Date(1384041600000)/\",\r\n        \"createdOn\": \"/Date(1421927296000)/\",\r\n        \"lastModifiedOn\": \"/Date(1421927296000)/\",\r\n        \"personId\": \"100\",\r\n        \"homeAddressNavDEFLT\": {\r\n            \"results\": [\r\n                {\r\n                    \"addressType\": \"home\",\r\n                    \"personIdExternal\": \"76_d100\",\r\n                    \"startDate\": \"/Date(1384041600000)/\",\r\n                    \"lastModifiedDateTime\": \"/Date(1421927296000+0000)/\",\r\n                    \"endDate\": \"/Date(253402214400000)/\",\r\n                    \"createdDateTime\": \"/Date(1421927296000+0000)/\",\r\n                    \"createdOn\": \"/Date(1421927296000)/\",\r\n                    \"lastModifiedBy\": \"sfadmin\",\r\n                    \"lastModifiedOn\": \"/Date(1421927296000)/\",\r\n\r\n                }\r\n            ]\r\n        }\r\n    };\r\n    const output =\r\n    {\r\n        \"__metadata\": {\r\n            \"uri\": \"https://apisalesdemo2.successfactors.eu/odata/v2/PerPerson('76_d100')\",\r\n            \"type\": \"SFOData.PerPerson\"\r\n        },\r\n        \"personIdExternal\": \"76_d100\",\r\n        \"lastModifiedDateTime\": iml.parseDate(\"2015-01-22T11:48:16.000Z\"),\r\n        \"lastModifiedBy\": \"sfadmin\",\r\n        \"createdDateTime\": iml.parseDate(\"2015-01-22T11:48:16.000Z\"),\r\n        \"dateOfBirth\": \"2013-11-10\",\r\n        \"createdOn\": \"1421927296000\",\r\n        \"lastModifiedOn\": \"1421927296000\",\r\n        \"personId\": \"100\",\r\n        \"homeAddressNavDEFLT\": {\r\n            \"results\": [\r\n                {\r\n                    \"addressType\": \"home\",\r\n                    \"personIdExternal\": \"76_d100\",\r\n                    \"startDate\": \"1384041600000\",\r\n                    \"lastModifiedDateTime\": iml.parseDate(\"2015-01-22T11:48:16.000Z\"),\r\n                    \"endDate\": \"253402214400000\",\r\n                    \"createdDateTime\": iml.parseDate(\"2015-01-22T11:48:16.000Z\"),\r\n                    \"createdOn\": \"1421927296000\",\r\n                    \"lastModifiedBy\": \"sfadmin\",\r\n                    \"lastModifiedOn\": \"1421927296000\"\r\n                }\r\n            ]\r\n        }\r\n    };\r\n    assert.deepStrictEqual(parseResponse(input), output);\r\n});",
      "appName": "sap-successfactors",
      "arguments": "(parameters)",
      "appVersion": 1
    },
    "signAssertion": {
      "rev": 2,
      "code": "function signAssertion(parameters, assertionID, sessionIndex) {\n    //author: Ness\n    const {\n        UserID,\n        Host,\n        api_key,\n        privateKey,\n    } = parameters;\n\n    const IssueInstant = iml.parseDate(Date.now(), 'x');\n    const IssueInstantString = iml.formatDate(IssueInstant, 'YYYY-MM-DDTHH:mm:ss.SSS\\\\Z', 'UTC');\n    const NotBeforeString = IssueInstantString;\n    const NotOnOrAfter = iml.addMinutes(IssueInstant, 5);\n    const NotOnOrAfterString = iml.formatDate(NotOnOrAfter, 'YYYY-MM-DDTHH:mm:ss.SSS\\\\Z', 'UTC');\n    const AssertionID = assertionID;\n    const SessionIndex = sessionIndex;\n    const SignatureAlgorithm = \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\";\n\n    const AssertionFactory = (DTD = '', Signature = '') => `${DTD}<saml2:Assertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" ID=\"${AssertionID}\" IssueInstant=\"${IssueInstantString}\" Version=\"2.0\"><saml2:Issuer>www.successfactors.com</saml2:Issuer>${Signature}<saml2:Subject><saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">${UserID}</saml2:NameID><saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"><saml2:SubjectConfirmationData NotOnOrAfter=\"${NotOnOrAfterString}\" Recipient=\"${Host}/oauth/token\"></saml2:SubjectConfirmationData></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore=\"${NotBeforeString}\" NotOnOrAfter=\"${NotOnOrAfterString}\"><saml2:AudienceRestriction><saml2:Audience>www.successfactors.com</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:AuthnStatement AuthnInstant=\"${IssueInstantString}\" SessionIndex=\"${SessionIndex}\"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name=\"api_key\"><saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">${api_key}</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>`;\n    const CanonicalizedAssertion = AssertionFactory();\n    const Digest = iml.sha1(CanonicalizedAssertion, 'base64');\n    const SignedInfo = `<ds:SignedInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></ds:CanonicalizationMethod><ds:SignatureMethod Algorithm=\"${SignatureAlgorithm}\"></ds:SignatureMethod><ds:Reference URI=\"#${AssertionID}\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"></ds:Transform><ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"><ec:InclusiveNamespaces xmlns:ec=\"http://www.w3.org/2001/10/xml-exc-c14n#\" PrefixList=\"xs\"></ec:InclusiveNamespaces></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"></ds:DigestMethod><ds:DigestValue>${Digest}</ds:DigestValue></ds:Reference></ds:SignedInfo>`;\n\n    // SignatureValue is just a placeholder for cryptoSign()\n    // Once we migrate the cryptoSign() to imt-iml we can sign here\n    // Not explicitly signing in the communication\n    const SignatureValue = iml.sha256(SignedInfo, 'base64', privateKey);\n    const Signature = `<ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/><ds:SignatureMethod Algorithm=\"${SignatureAlgorithm}\"/><ds:Reference URI=\"#${AssertionID}\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/><ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"><ec:InclusiveNamespaces xmlns:ec=\"http://www.w3.org/2001/10/xml-exc-c14n#\" PrefixList=\"xs\"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/><ds:DigestValue>${Digest}</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>${SignatureValue}</ds:SignatureValue></ds:Signature>`;\n\n    const Assertion = AssertionFactory(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>`, Signature);\n\n    return {\n        IssueInstant, \n        IssueInstantString,\n        NotBeforeString,\n        NotOnOrAfterString,\n        CanonicalizedAssertion,\n        Digest,\n        SignedInfo,\n        SignatureValue,\n        Signature,\n        Assertion,\n    };\n}",
      "name": "signAssertion",
      "test": "it(\"should generate a signed assertion with expected structure\", () => {\r\n    const parameters = {\r\n        UserID: \"test-user\",\r\n        Host: \"https://apisalesdemo2.successfactors.eu\",\r\n        api_key: \"test-api-key\",\r\n        privateKey: \"test-private-key\",\r\n    };\r\n    const assertionID = \"test-assertion-id\";\r\n    const sessionIndex = \"test-session-index\";\r\n\r\n    const actual = signAssertion(parameters, assertionID, sessionIndex);\r\n    const { IssueInstant, IssueInstantString, NotBeforeString, NotOnOrAfterString, Digest, SignatureValue } = actual;\r\n\r\n    const output = {\r\n        IssueInstant,\r\n        IssueInstantString,\r\n        NotBeforeString,\r\n        NotOnOrAfterString,\r\n        \"CanonicalizedAssertion\": `<saml2:Assertion xmlns:saml2=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" ID=\\\"test-assertion-id\\\" IssueInstant=\\\"${IssueInstantString}\\\" Version=\\\"2.0\\\"><saml2:Issuer>www.successfactors.com</saml2:Issuer><saml2:Subject><saml2:NameID Format=\\\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\\\">test-user</saml2:NameID><saml2:SubjectConfirmation Method=\\\"urn:oasis:names:tc:SAML:2.0:cm:bearer\\\"><saml2:SubjectConfirmationData NotOnOrAfter=\\\"${NotOnOrAfterString}\\\" Recipient=\\\"https://apisalesdemo2.successfactors.eu/oauth/token\\\"></saml2:SubjectConfirmationData></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore=\\\"${NotBeforeString}\\\" NotOnOrAfter=\\\"${NotOnOrAfterString}\\\"><saml2:AudienceRestriction><saml2:Audience>www.successfactors.com</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:AuthnStatement AuthnInstant=\\\"${IssueInstantString}\\\" SessionIndex=\\\"test-session-index\\\"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name=\\\"api_key\\\"><saml2:AttributeValue xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:type=\\\"xs:string\\\">test-api-key</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>`,\r\n        Digest,\r\n        \"SignedInfo\": `<ds:SignedInfo xmlns:ds=\\\"http://www.w3.org/2000/09/xmldsig#\\\"><ds:CanonicalizationMethod Algorithm=\\\"http://www.w3.org/2001/10/xml-exc-c14n#\\\"></ds:CanonicalizationMethod><ds:SignatureMethod Algorithm=\\\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\\\"></ds:SignatureMethod><ds:Reference URI=\\\"#test-assertion-id\\\"><ds:Transforms><ds:Transform Algorithm=\\\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\\\"></ds:Transform><ds:Transform Algorithm=\\\"http://www.w3.org/2001/10/xml-exc-c14n#\\\"><ec:InclusiveNamespaces xmlns:ec=\\\"http://www.w3.org/2001/10/xml-exc-c14n#\\\" PrefixList=\\\"xs\\\"></ec:InclusiveNamespaces></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm=\\\"http://www.w3.org/2000/09/xmldsig#sha1\\\"></ds:DigestMethod><ds:DigestValue>${Digest}</ds:DigestValue></ds:Reference></ds:SignedInfo>`,\r\n        SignatureValue,\r\n        \"Signature\": `<ds:Signature xmlns:ds=\\\"http://www.w3.org/2000/09/xmldsig#\\\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\\\"http://www.w3.org/2001/10/xml-exc-c14n#\\\"/><ds:SignatureMethod Algorithm=\\\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\\\"/><ds:Reference URI=\\\"#test-assertion-id\\\"><ds:Transforms><ds:Transform Algorithm=\\\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\\\"/><ds:Transform Algorithm=\\\"http://www.w3.org/2001/10/xml-exc-c14n#\\\"><ec:InclusiveNamespaces xmlns:ec=\\\"http://www.w3.org/2001/10/xml-exc-c14n#\\\" PrefixList=\\\"xs\\\"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm=\\\"http://www.w3.org/2000/09/xmldsig#sha1\\\"/><ds:DigestValue>${Digest}</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>${SignatureValue}</ds:SignatureValue></ds:Signature>`,\r\n        \"Assertion\": `<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><saml2:Assertion xmlns:saml2=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" ID=\\\"test-assertion-id\\\" IssueInstant=\\\"${IssueInstantString}\\\" Version=\\\"2.0\\\"><saml2:Issuer>www.successfactors.com</saml2:Issuer><ds:Signature xmlns:ds=\\\"http://www.w3.org/2000/09/xmldsig#\\\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\\\"http://www.w3.org/2001/10/xml-exc-c14n#\\\"/><ds:SignatureMethod Algorithm=\\\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\\\"/><ds:Reference URI=\\\"#test-assertion-id\\\"><ds:Transforms><ds:Transform Algorithm=\\\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\\\"/><ds:Transform Algorithm=\\\"http://www.w3.org/2001/10/xml-exc-c14n#\\\"><ec:InclusiveNamespaces xmlns:ec=\\\"http://www.w3.org/2001/10/xml-exc-c14n#\\\" PrefixList=\\\"xs\\\"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm=\\\"http://www.w3.org/2000/09/xmldsig#sha1\\\"/><ds:DigestValue>${Digest}</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>${SignatureValue}</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format=\\\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\\\">test-user</saml2:NameID><saml2:SubjectConfirmation Method=\\\"urn:oasis:names:tc:SAML:2.0:cm:bearer\\\"><saml2:SubjectConfirmationData NotOnOrAfter=\\\"${NotOnOrAfterString}\\\" Recipient=\\\"https://apisalesdemo2.successfactors.eu/oauth/token\\\"></saml2:SubjectConfirmationData></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore=\\\"${NotBeforeString}\\\" NotOnOrAfter=\\\"${NotOnOrAfterString}\\\"><saml2:AudienceRestriction><saml2:Audience>www.successfactors.com</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:AuthnStatement AuthnInstant=\\\"${IssueInstantString}\\\" SessionIndex=\\\"test-session-index\\\"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name=\\\"api_key\\\"><saml2:AttributeValue xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:type=\\\"xs:string\\\">test-api-key</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>`\r\n\r\n    };\r\n\r\n    assert.deepStrictEqual(actual, output);\r\n});\r\n\r\nit(\"should return correctly formatted dates\", () => {\r\n    const parameters = {\r\n        UserID: \"test-user\",\r\n        Host: \"https://apisalesdemo2.successfactors.eu\",\r\n        api_key: \"test-api-key\",\r\n        privateKey: \"test-private-key\",\r\n    };\r\n    const assertionID = \"test-assertion-id\";\r\n    const sessionIndex = \"test-session-index\";\r\n\r\n    const actual = signAssertion(parameters, assertionID, sessionIndex);\r\n    const IssueInstant = actual.IssueInstant;\r\n\r\n    const output = {\r\n         \"IssueInstantString\":iml.formatDate(IssueInstant, 'YYYY-MM-DDTHH:mm:ss.SSS\\\\Z', 'UTC'),\r\n         \"NotBeforeString\":iml.formatDate(IssueInstant, 'YYYY-MM-DDTHH:mm:ss.SSS\\\\Z', 'UTC'),\r\n         \"NotOnOrAfterString\":iml.formatDate(iml.addMinutes(IssueInstant, 5), 'YYYY-MM-DDTHH:mm:ss.SSS\\\\Z', 'UTC')\r\n    };\r\n\r\n    assert.deepStrictEqual(actual.IssueInstantString, output.IssueInstantString,'IssueInstantString');\r\n    assert.deepStrictEqual(actual.NotBeforeString, output.NotBeforeString,'NotBeforeString');\r\n    assert.deepStrictEqual(actual.NotOnOrAfterString, output.NotOnOrAfterString,'NotOnOrAfterString');\r\n});",
      "appName": "sap-successfactors",
      "arguments": "(parameters, assertionID, sessionIndex)",
      "appVersion": 1
    },
    "sortEndpoints": {
      "rev": 2,
      "code": "function sortEndpoints(input, whitelist) {\n    /*  \n        Creates options for RecordType dropdown list from API response\n        Splits endpoints to Verified and Beta sections based on whitelist, sorted alphabetically\n        Adds '(Beta)' to beta options\n        Used in RPC ListEndpoints where the whitelist temp variable is specified\n        Author: Kat Ben\n    */\n\n    if (!Array.isArray(input) || input.length === 0) return undefined;\n    if (!whitelist) throw new Error('Argument temp.whitelist must be present.');\n\n    const verifiedArr = input.filter(item => whitelist.includes(item))\n        .map(item => ({\n            label: iml.nameToLabel(item),\n            value: item\n        }))\n        .sort(iml.sortByKey(\"label\"));\n\n    const betaArr = input.filter(item => !whitelist.includes(item))\n        .map(item => ({\n            label: `${iml.nameToLabel(item)} (Beta)`,\n            value: item\n        }))\n        .sort(iml.sortByKey(\"label\"));\n\n    const output = [];\n\n    if (verifiedArr.length > 0) output.push({\n        label: \"Verified\",\n        options: verifiedArr\n    });\n\n    if (betaArr.length > 0) output.push({\n        label: \"Beta\",\n        options: betaArr\n    });\n\n    return output;\n}",
      "name": "sortEndpoints",
      "test": "it('should return sorted verified and beta options', () => {\r\n    const input = [\r\n        \"JobRequisition\",\r\n        \"Candidate\",\r\n        \"JobApplicationSnapshot_Education\",\r\n        \"JobProfile\"\r\n    ];\r\n    const whitelist = [\r\n        \"Candidate\",\r\n        \"JobProfile\"\r\n    ];\r\n    const output = [\r\n        {\r\n            label: \"Verified\",\r\n            options: [\r\n                {\r\n                    label: \"Candidate\",\r\n                    value: \"Candidate\"\r\n                },\r\n                {\r\n                    label: \"Job profile\",\r\n                    value: \"JobProfile\"\r\n                }\r\n            ]\r\n        },\r\n\t\t{\r\n            label: \"Beta\",\r\n            options: [\r\n                {\r\n                    label: \"Job application snapshot education (Beta)\",\r\n                    value: \"JobApplicationSnapshot_Education\"\r\n                },\r\n                {\r\n                    label: \"Job requisition (Beta)\",\r\n                    value: \"JobRequisition\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n\r\n    assert.deepStrictEqual(sortEndpoints(input, whitelist), output);\r\n});\r\n\r\nit('should return error if whitelist is empty', () => {\r\n    const input = [\r\n        \"JobRequisition\",\r\n        \"JobApplicationSnapshot_Education\"\r\n    ];\r\n\r\n    assert.throws(() => { sortEndpoints(input) },{\"message\": 'Argument temp.whitelist must be present.'});\r\n});\r\n\r\nit('should return \"undefined\" if input is empty or not an array', () => {\r\n    const whitelist = [\r\n        \"Candidate\",\r\n        \"JobProfile\"\r\n    ];\r\n\r\n    assert.deepStrictEqual(sortEndpoints([], whitelist), undefined,\"empty array\");\r\n    assert.deepStrictEqual(sortEndpoints(\"string\", whitelist), undefined,\"string\");\r\n    assert.deepStrictEqual(sortEndpoints(undefined, whitelist), undefined,\"undefined\");\r\n});",
      "appName": "sap-successfactors",
      "arguments": "(input, whitelist)",
      "appVersion": 1
    },
    "buildGetParameters": {
      "rev": 2,
      "code": "function buildGetParameters(obj) {\n    // creates a string from collection of mappable parameters\n    // used in Get module communication\n    // author: Simo + Kat\n\n    if (!obj || typeof obj !== 'object' || Array.isArray(obj) || Object.keys(obj).length === 0) throw new Error ('Parameters cannot be empty.');\n    const exclude = [\"__IMTCONN__\",\"__IMTHOOK__\"] //these get passed in the parameters\n    \n    return Object.entries(obj)\n    .filter(([key,value]) => !exclude.includes(key))\n    .reduce((acc, [key,value]) => {\n        acc.push(`${key}='${value}'`)\n        return acc\n    }, []).join(',');\n}",
      "name": "buildGetParameters",
      "test": "it('should return string of parameters for correct input', () => {\r\n    const input = {\r\n        \"emailType\": \"aaa\",\r\n        \"personIdExternal\": \"109031\"\r\n    };\r\n    const output = \"emailType='aaa',personIdExternal='109031'\";\r\n    assert.strictEqual(buildGetParameters(input), output);\r\n});\r\n\r\nit('should throw an error for incorrect input', () => {\r\n    const input = [null, undefined, 'string', ['array'], {}];\r\n    input.forEach((item) => {\r\n        assert.throws(() => { buildGetParameters(item) }, Error, `${item}`)\r\n    });\r\n});",
      "appName": "sap-successfactors",
      "arguments": "(obj)",
      "appVersion": 1
    },
    "parseMetadataForID": {
      "rev": 2,
      "code": "function parseMetadataForID(input) {\n    //parses response from metadata endpoint with nested structure\n    // used in RPC Parameters: ID for GET\n    // author: Kat Ben\n\n    if (!Array.isArray(input) || input.length === 0) return undefined\n\n    function mapType(edmType) {\n        switch (edmType) {\n            case \"bool\":\n                return \"boolean\";\n            case \"datetime\":\n            case \"string\":\n            case \"time\":\n                return \"text\";\n            case \"Decimal\":\n            case \"Double\":\n            case \"Single\":\n            case \"long\":\n            case \"Int16\":\n            case \"Int32\":\n            case \"Int64\":\n            case \"Byte\":\n            case \"SByte\":\n                return \"number\";\n            case \"Guid\":\n            case \"uuid\":\n                return \"uuid\";\n            case \"datetimeoffset\":\n                return \"date\";\n            default:\n                return \"text\";\n        }\n    };\n\n    return input.map(item => ({\n        name: item.name,\n        label: iml.nameToLabel(item.name),\n        type: mapType(item.type.name),\n        required: true //should be always true, even if metadata returns false\n    }));\n}",
      "name": "parseMetadataForID",
      "test": "it('should return IDs for correct input', () => {\r\n    const input =  [\r\n        {\r\n            \"insertablePath\": null,\r\n            \"name\": \"emailType\",\r\n            \"picklistOptionId\": \"ecEmailType\",\r\n            \"precision\": null,\r\n            \"required\": true,\r\n            \"type\": {\r\n                \"name\": \"string\",\r\n                \"path\": \"string\"\r\n            }\r\n        },\r\n        {\r\n            \"insertablePath\": null,\r\n            \"name\": \"personIdExternal\",\r\n            \"required\": false,\r\n            \"type\": {\r\n                \"name\": \"string\",\r\n                \"path\": \"string\"\r\n            }\r\n        }\r\n    ];\r\n\r\n    const output = [\r\n        {\r\n            \"name\": \"emailType\",\r\n            \"label\": \"Email type\",\r\n            \"type\": \"text\",\r\n            \"required\": true\r\n        },\r\n        {\r\n            \"name\": \"personIdExternal\",\r\n            \"label\": \"Person ID external\",\r\n            \"type\": \"text\",\r\n            \"required\": true\r\n        }\r\n    ];\r\n\r\n    assert.deepStrictEqual(parseMetadataForID(input), output);\r\n});\r\n\r\nit('should return \"undefined\" for incorrect input', () => {\r\n    assert.strictEqual(parseMetadataForID([]), undefined, 'empty array');\r\n    assert.strictEqual(parseMetadataForID({}), undefined, 'empty object');\r\n    assert.strictEqual(parseMetadataForID(null), undefined, 'null');\r\n});",
      "appName": "sap-successfactors",
      "arguments": "(input)",
      "appVersion": 1
    },
    "parseMetadataToSelect": {
      "rev": 2,
      "code": "function parseMetadataToSelect(input, filter) {\n    //parses response from metadata endpoint with nested structure\n    // argument filter is used to filter viewable or sortable parameters\n    // used in RPC Parameters: Select output and Parameters: Order by\n    // author: Kat Ben\n\n    if (!Array.isArray(input) || input.length === 0) return undefined\n    if (!['sortable', 'viewable'].includes(filter)) throw new Error('Argument \"filter\" must be \"viewable\" or \"sortable\".')\n\n    // sortable droplist has each option doubled (for asc and desc)\n    if (filter === 'sortable') {\n        return input.filter(item => item.sortable)\n            .flatMap(item => ([{\n                value: `${item.name} asc`,\n                label: `${iml.nameToLabel(item.name)} [ascending]`\n            },\n            {\n                value: `${item.name} desc`,\n                label: `${iml.nameToLabel(item.name)} [descending]`\n            }]))\n            .sort(iml.sortByKey(\"label\"));\n    };\n\n    // viewable droplist options\n    return input.filter(item => item.viewable)\n        .map(item => ({\n            value: item.name,\n            label: iml.nameToLabel(item.name)\n        }))\n        .sort(iml.sortByKey(\"label\"));\n}",
      "name": "parseMetadataToSelect",
      "test": "it('should return viewable options for correct input', () => {\r\n    const input = [\r\n        {\r\n            \"name\": \"countryOfBirth\",\r\n            \"viewable\": true\r\n        },\r\n        {\r\n            \"name\": \"createdOn\",\r\n            \"viewable\": true\r\n        },\r\n        {\r\n            \"name\": \"createdBy\",\r\n            \"viewable\": true\r\n        },\r\n        {\r\n            \"name\": \"createdDateTime\",\r\n            \"viewable\": true\r\n        },\r\n        {\r\n            \"name\": \"externalName_da_DK\",\r\n            \"viewable\": true\r\n        },\r\n\r\n        {\r\n            \"name\": \"userId\",\r\n            \"viewable\": false\r\n        }\r\n    ];\r\n\r\n    const output = [\r\n        {\r\n            \"value\": \"countryOfBirth\",\r\n            \"label\": \"Country of birth\"\r\n        },\r\n        {\r\n            \"value\": \"createdBy\",\r\n            \"label\": \"Created by\"\r\n        },\r\n        {\r\n            \"value\": \"createdDateTime\",\r\n            \"label\": \"Created date time\"\r\n        },\r\n        {\r\n            \"value\": \"createdOn\",\r\n            \"label\": \"Created on\"\r\n        },\r\n        {\r\n            \"value\": \"externalName_da_DK\",\r\n            \"label\": \"External name da DK\"\r\n        }\r\n    ];\r\n\r\n    assert.deepStrictEqual(parseMetadataToSelect(input, 'viewable'), output);\r\n});\r\n\r\nit('should return sortable options for correct input', () => {\r\n    const input = [\r\n        {\r\n            \"name\": \"countryOfBirth\",\r\n            \"sortable\": true\r\n        },\r\n        {\r\n            \"name\": \"createdBy\",\r\n            \"sortable\": true\r\n        },\r\n        {\r\n            \"name\": \"createdDateTime\",\r\n            \"sortable\": true\r\n        },\r\n        {\r\n            \"name\": \"userId\",\r\n            \"sortable\": false\r\n        }\r\n    ];\r\n\r\n    const output = [\r\n        {\r\n            \"value\": \"countryOfBirth asc\",\r\n            \"label\": \"Country of birth [ascending]\"\r\n        },\r\n        {\r\n            \"value\": \"countryOfBirth desc\",\r\n            \"label\": \"Country of birth [descending]\"\r\n        },\r\n        {\r\n            \"value\": \"createdBy asc\",\r\n            \"label\": \"Created by [ascending]\"\r\n        },\r\n        {\r\n            \"value\": \"createdBy desc\",\r\n            \"label\": \"Created by [descending]\"\r\n        },\r\n        {\r\n            \"value\": \"createdDateTime asc\",\r\n            \"label\": \"Created date time [ascending]\"\r\n        },\r\n        {\r\n            \"value\": \"createdDateTime desc\",\r\n            \"label\": \"Created date time [descending]\"\r\n        }\r\n    ];\r\n\r\n    assert.deepStrictEqual(parseMetadataToSelect(input, 'sortable'), output);\r\n});\r\n\r\nit('should return \"undefined\" for incorrect input', () => {\r\n    assert.strictEqual(parseMetadataToSelect([]), undefined, 'empty array');\r\n    assert.strictEqual(parseMetadataToSelect({}), undefined, 'empty object');\r\n    assert.strictEqual(parseMetadataToSelect(null), undefined, 'null');\r\n});\r\n\r\nit('should throw an error if argument \"filter\" is missing or incorrect', () => {\r\n    const input = [\r\n        {\r\n            \"name\": \"countryOfBirth\",\r\n            \"viewable\": true\r\n        }\r\n    ];\r\n    assert.throws(() => { parseMetadataToSelect(input) },{\"message\": 'Argument \"filter\" must be \"viewable\" or \"sortable\".'});\r\n    assert.throws(() => { parseMetadataToSelect(input,'invalid') }, {\"message\": 'Argument \"filter\" must be \"viewable\" or \"sortable\".'});\r\n});",
      "appName": "sap-successfactors",
      "arguments": "(input, filter)",
      "appVersion": 1
    },
    "parseMetadataToInterface": {
      "rev": 2,
      "code": "function parseMetadataToInterface(input) {\n    //parses response from dynmicly fetched metadata from nonNavigationProperties and navigationProperties\n    // used in RPC Interface:All\n    // author: Kat Ben\n\n    if (!input || typeof input !== 'object' || Array.isArray(input)) return []\n\n    const { navigationProperties, nonNavigationProperties } = input;\n\n    function mapType(typeName) {\n        switch (typeName) {\n            case \"bool\":\n                return \"boolean\";\n            case \"datetime\":\n            case \"string\":\n            case \"time\":\n                return \"text\";\n            case \"Decimal\":\n            case \"Double\":\n            case \"Single\":\n            case \"long\":\n            case \"Int16\":\n            case \"Int32\":\n            case \"Int64\":\n            case \"Byte\":\n            case \"SByte\":\n                return \"number\";\n            case \"Guid\":\n            case \"uuid\":\n                return \"uuid\";\n            case \"datetimeoffset\":\n                return \"date\";\n            default:\n                return \"text\";\n        }\n    };\n\n    let regularProperties = [];\n    let navProperties = [];\n\n    if (nonNavigationProperties?.results) {\n        regularProperties = nonNavigationProperties.results\n            .filter(item => item.viewable)\n            .map(item => ({\n                name: item.name,\n                label: iml.nameToLabel(item.name),\n                type: mapType(item.type.name),\n            }));\n    }\n\n    if (navigationProperties?.results) {\n        navProperties = navigationProperties?.results\n            .filter(item => item.viewable)\n            .map(item => ({\n                name: item.name,\n                label: iml.nameToLabel(item.name),\n                type: \"collection\",\n            }));\n    }\n\n    return [...regularProperties, ...navProperties]\n}",
      "name": "parseMetadataToInterface",
      "test": "it('should return Interface for correct input', () => {\r\n    const input = {\r\n        \"navigationProperties\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"emailNav\",\r\n                    \"type\": {\r\n                        \"name\": \"string\",\r\n                        \"path\": \"string\"\r\n                    },\r\n                    \"viewable\": true\r\n                },\r\n                \r\n                {\r\n\r\n                    \"name\": \"emergencyContactNav\",\r\n                    \"type\": {\r\n                        \"name\": \"string\",\r\n                        \"path\": \"string\"\r\n                    },\r\n                    \"viewable\": false\r\n                }\r\n            ]\r\n        },\r\n        \"nonNavigationProperties\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"countryOfBirth\",\r\n                    \"type\": {\r\n                        \"name\": \"string\",\r\n                        \"path\": \"string\"\r\n                    },\r\n                    \"viewable\": true\r\n                },\r\n                {\r\n                    \"name\": \"dateOfBirth\",\r\n                    \"type\": {\r\n                        \"name\": \"datetime\",\r\n                        \"path\": \"datetime\"\r\n                    },\r\n                    \"viewable\": true\r\n                },\r\n                {\r\n                    \"name\": \"boolean\",\r\n                    \"type\": {\r\n                        \"name\": \"bool\",\r\n                        \"path\": \"bool\"\r\n                    },\r\n                    \"viewable\": true\r\n                },\r\n                {\r\n                    \"name\": \"datetimeoffset\",\r\n                    \"type\": {\r\n                        \"name\": \"datetimeoffset\",\r\n                        \"path\": \"datetimeoffset\"\r\n                    },\r\n                    \"viewable\": true\r\n                },\r\n                {\r\n                    \"name\": \"notVisible\",\r\n                    \"type\": {\r\n                        \"name\": \"datetimeoffset\",\r\n                        \"path\": \"datetimeoffset\"\r\n                    },\r\n                    \"viewable\": false\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    const output = [\r\n        {\r\n            \"name\": \"countryOfBirth\",\r\n            \"type\": \"text\",\r\n            \"label\": \"Country of birth\"\r\n        },\r\n        {\r\n            \"name\": \"dateOfBirth\",\r\n            \"type\": \"text\",\r\n            \"label\": \"Date of birth\"\r\n        },\r\n        {\r\n            \"name\": \"boolean\",\r\n            \"type\": \"boolean\",\r\n            \"label\": \"Boolean\",\r\n        },\r\n        {\r\n            \"name\": \"datetimeoffset\",\r\n            \"type\": \"date\",\r\n            \"label\": \"Datetimeoffset\"\r\n        },\r\n        {\r\n            \"name\": \"emailNav\",\r\n            \"type\": \"collection\",\r\n            \"label\": \"Email nav\"\r\n        }\r\n    ];\r\n\r\n    assert.deepStrictEqual(parseMetadataToInterface(input), output);\r\n});\r\n\r\nit('should return empty array for incorrect input', () => {\r\n    const input = {\r\n        \"__metadata\": {\r\n            \"uri\": \"https://apisalesdemo2.successfactors.eu/odata/v2/Entity('PerEmail')\",\r\n            \"type\": \"SFOData.Entity\"\r\n        },\r\n        \"path\": \"PerEmail\",\r\n        \"updatablePath\": null\r\n    };\r\n\r\n    assert.deepStrictEqual(parseMetadataToInterface(input), [], 'missing properties in response');\r\n    assert.deepStrictEqual(parseMetadataToInterface([]), [], 'empty array');\r\n    assert.deepStrictEqual(parseMetadataToInterface([{}]), [], 'empty object in array');\r\n    assert.deepStrictEqual(parseMetadataToInterface({}), [], 'empty object');\r\n    assert.deepStrictEqual(parseMetadataToInterface(null), [], 'null');\r\n});",
      "appName": "sap-successfactors",
      "arguments": "(input)",
      "appVersion": 1
    }
  },
  "approvedAt": "2025-04-02T13:59:41.495848+00:00",
  "categories": [],
  "opensource": false,
  "description": "Drive the success of every employee and achieve organizational agility with a global, AI-enabled HCM software suite.",
  "iconColor32": null,
  "iconColor64": null,
  "installSpec": [],
  "inviteToken": "4b8b482fc581ae5324eb8e6bc8a38c13",
  "versionFull": "1.0.2",
  "compiledName": "sap-successfactors",
  "iconColor128": null,
  "iconColor256": null,
  "iconColor512": null,
  "installJsonc": null,
  "manifestVersion": 2,
  "compilationError": null,
  "installSpecJsonc": null
}
