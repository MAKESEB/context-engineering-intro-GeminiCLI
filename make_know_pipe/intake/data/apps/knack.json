{
  "rev": 18,
  "base": {
    "log": {
      "sanitize": [
        "request.headers.X-Knack-Application-Id",
        "request.headers.X-Knack-REST-API-Key"
      ]
    },
    "gzip": true,
    "baseUrl": "https://{{ifempty(ifempty(connection.apiServer, connection.appServer), 'api.knack.com')}}/v1",
    "headers": {
      "X-Knack-REST-API-Key": "{{connection.apiKey}}",
      "X-Knack-Application-Id": "{{connection.applicationId}}"
    },
    "timeout": 120000
  },
  "beta": false,
  "docs": "",
  "name": "knack",
  "_rpcs": {
    "Views": {
      "api": {
        "qs": {},
        "url": "/views",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.key}}"
          },
          "iterate": "{{body.views}}"
        }
      },
      "rev": 2,
      "name": "Views",
      "label": "Views",
      "appName": "knack",
      "apiJsonc": "{\n\t\"url\": \"/views\",\n\t\"method\": \"GET\",\n\t\"qs\": {},\n\t\"body\": {},\n\t\"headers\": {},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"type\": \"DataError\",\n\t\t\t\"message\": \"{{getErrorMessage(statusCode, body)}}\"\n\t\t},\n\t\t\"iterate\": \"{{body.views}}\",\n\t\t\"output\": {\n\t\t\t\"label\": \"{{item.name}}\",\n\t\t\t\"value\": \"{{item.key}}\"\n\t\t}\n\t}\n}",
      "appVersion": 2,
      "parameters": [],
      "accountName": "knack",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "Fields": {
      "api": {
        "qs": {},
        "url": "/objects/{{parameters.object_id}}/fields",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": {
            "label": "{{item.label}}",
            "value": "{{item.key}}"
          },
          "iterate": "{{body.fields}}"
        }
      },
      "rev": 2,
      "name": "Fields",
      "label": "Fields",
      "appName": "knack",
      "apiJsonc": "{\n\t\"url\": \"/objects/{{parameters.object_id}}/fields\",\n\t\"method\": \"GET\",\n\t\"qs\": {},\n\t\"body\": {},\n\t\"headers\": {},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"type\": \"DataError\",\n\t\t\t\"message\": \"{{getErrorMessage(statusCode, body)}}\"\n\t\t},\n\t\t\"iterate\": \"{{body.fields}}\",\n\t\t\"output\": {\n\t\t\t\"label\": \"{{item.label}}\",\n\t\t\t\"value\": \"{{item.key}}\"\n\t\t}\n\t}\n}",
      "appVersion": 2,
      "parameters": [],
      "accountName": "knack",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "Objects": {
      "api": {
        "qs": {},
        "url": "/objects",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.key}}"
          },
          "iterate": "{{body.objects}}"
        }
      },
      "rev": 2,
      "name": "Objects",
      "label": "Objects",
      "appName": "knack",
      "apiJsonc": "{\n\t\"url\": \"/objects\",\n\t\"method\": \"GET\",\n\t\"qs\": {},\n\t\"body\": {},\n\t\"headers\": {},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"type\": \"DataError\",\n\t\t\t\"message\": \"{{getErrorMessage(statusCode, body)}}\"\n\t\t},\n\t\t\"iterate\": \"{{body.objects}}\",\n\t\t\"output\": {\n\t\t\t\"label\": \"{{item.name}}\",\n\t\t\t\"value\": \"{{item.key}}\"\n\t\t}\n\t}\n}",
      "appVersion": 2,
      "parameters": [],
      "accountName": "knack",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "listForms": {
      "api": {
        "qs": {},
        "url": "/forms",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.key}}"
          },
          "iterate": "{{body.forms}}"
        }
      },
      "rev": 3,
      "name": "listForms",
      "label": "list Forms",
      "appName": "knack",
      "apiJsonc": "{\n    \"url\": \"/forms\",\n    \"method\": \"GET\",\n    \"qs\": {},\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"iterate\": \"{{body.forms}}\",\n        \"output\": {\n            \"label\": \"{{item.name}}\",\n            \"value\": \"{{item.key}}\"\n        }\n    }\n}",
      "appVersion": 2,
      "parameters": [],
      "accountName": "knack",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "RecordExpect": {
      "api": {
        "qs": {},
        "url": "/objects/{{parameters.object_id}}/fields",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": "{{getRecordExpect(body.fields, parameters.type)}}"
        }
      },
      "rev": 3,
      "name": "RecordExpect",
      "label": "Record Expect",
      "appName": "knack",
      "apiJsonc": "{\n   // fetches metadata for mappable parameters\n   // For Get/Search/Watch module it will output only multiplechoice parameters with type:hidden and default:true\n    \"url\": \"/objects/{{parameters.object_id}}/fields\",\n    \"method\": \"GET\",\n    \"qs\": {},\n    \"body\": {},\n    \"headers\": {},\n    \"response\": {\n        \"error\": {\n            \"type\": \"DataError\",\n            \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n        },\n        \"output\": \"{{getRecordExpect(body.fields, parameters.type)}}\" //parameters.type=hidden for Get/Search/Watch\n    }\n}",
      "appVersion": 2,
      "parameters": [],
      "accountName": "knack",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "RecordInterface": {
      "api": {
        "qs": {},
        "url": "/objects/{{parameters.object_id}}/fields",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": "{{getRecordInterface(body.fields, parameters.mode)}}"
        }
      },
      "rev": 2,
      "name": "RecordInterface",
      "label": "Record Interface",
      "appName": "knack",
      "apiJsonc": "{\n\t\"url\": \"/objects/{{parameters.object_id}}/fields\",\n\t\"method\": \"GET\",\n\t\"qs\": {},\n\t\"body\": {},\n\t\"headers\": {},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"type\": \"DataError\",\n\t\t\t\"message\": \"{{getErrorMessage(statusCode, body)}}\"\n\t\t},\n\t\t\"output\": \"{{getRecordInterface(body.fields, parameters.mode)}}\"\n\t}\n}",
      "appVersion": 2,
      "parameters": [],
      "accountName": "knack",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "webhookInterface": {
      "api": [
        {
          "response": {
            "output": [
              {
                "name": "id",
                "type": "text",
                "label": "Form ID"
              },
              {
                "name": "fields",
                "spec": [],
                "type": "collection",
                "label": "Form Fields"
              }
            ]
          },
          "condition": "{{webhook.formKey}}"
        },
        {
          "response": {
            "output": [
              {
                "name": "id",
                "type": "text",
                "label": "Record ID"
              },
              {
                "name": "fields",
                "spec": [],
                "type": "collection",
                "label": "Record Fields"
              }
            ]
          },
          "condition": "{{!webhook.formKey}}"
        }
      ],
      "rev": 2,
      "name": "webhookInterface",
      "label": "Webhook Interface",
      "appName": "knack",
      "apiJsonc": "[\n    {\n        \"condition\": \"{{webhook.formKey}}\",\n        /*  this endpoint doesn't return all fields - unreliable for interface.\n       \"url\": \"/views/{{webhook.formKey}}/fields\",\n        \"method\": \"GET\",\n        \"response\": {\n            \"output\": \"{{getFormInterface(body.fields)}}\"\n        } */\n        \n        // static interface for forms\n        \"response\": {\n            \"output\": [\n                {\n                    \"name\": \"id\",\n                    \"type\": \"text\",\n                    \"label\": \"Form ID\"\n                },\n                {\n                    \"name\": \"fields\",\n                    \"type\": \"collection\",\n                    \"label\": \"Form Fields\",\n                    \"spec\": []\n                }\n            ]\n        }\n    },\n    // static interface for records\n    {\n        \"condition\": \"{{!webhook.formKey}}\",\n        \"response\": {\n            \"output\": [\n                {\n                    \"name\": \"id\",\n                    \"type\": \"text\",\n                    \"label\": \"Record ID\"\n                },\n                {\n                    \"name\": \"fields\",\n                    \"type\": \"collection\",\n                    \"label\": \"Record Fields\",\n                    \"spec\": []\n                }\n            ]\n        }\n    }\n]",
      "appVersion": 2,
      "parameters": [],
      "accountName": "knack",
      "altAccountName": null,
      "parametersJsonc": null
    },
    "AutoincrementFields": {
      "api": {
        "qs": {},
        "url": "/objects/{{parameters.object_id}}/fields",
        "body": {},
        "method": "GET",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": {
            "label": "{{item.label}}",
            "value": "{{item.key}}"
          },
          "iterate": {
            "condition": "{{item.type === 'auto_increment'}}",
            "container": "{{body.fields}}"
          }
        }
      },
      "rev": 3,
      "name": "AutoincrementFields",
      "label": "Autoincrement Fields",
      "appName": "knack",
      "apiJsonc": "{\n\t\"url\": \"/objects/{{parameters.object_id}}/fields\",\n\t\"method\": \"GET\",\n\t\"qs\": {},\n\t\"body\": {},\n\t\"headers\": {},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"type\": \"DataError\",\n\t\t\t\"message\": \"{{getErrorMessage(statusCode, body)}}\"\n\t\t},\n\t\t\"iterate\": {\n            \"container\": \"{{body.fields}}\",\n            \"condition\": \"{{item.type === 'auto_increment'}}\"\n        },\n\t\t\"output\": {\n\t\t\t\"label\": \"{{item.label}}\",\n\t\t\t\"value\": \"{{item.key}}\"\n\t\t}\n\t}\n}",
      "appVersion": 2,
      "parameters": [
        {
          "name": "object_id",
          "type": "text",
          "label": "object_id"
        }
      ],
      "accountName": "knack",
      "altAccountName": null,
      "parametersJsonc": "[\n\t{\n\t\t\"name\":\"object_id\",\n\t\t\"type\":\"text\",\n\t\t\"label\":\"object_id\"\n\t}\n]"
    }
  },
  "flags": {},
  "label": "Knack",
  "theme": "#7e195c",
  "_hooks": {
    "knack": {
      "api": {
        "output": {
          "id": "{{body.id}}",
          "fields": "{{omit(body, 'id')}}"
        }
      },
      "rev": 11,
      "name": "knack",
      "type": "web",
      "flags": {},
      "label": "Knack New Event",
      "scope": [],
      "attach": {
        "qs": {
          "key": "{{ifempty(parameters.key, parameters.object_id)}}"
        },
        "url": "/hooks",
        "body": {
          "event": "{{parameters.event}}",
          "target_url": "{{webhook.url}}"
        },
        "method": "POST",
        "response": {
          "data": {
            "formKey": "{{parameters.key}}",
            "externalHookId": "{{body.id}}"
          },
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          }
        }
      },
      "detach": {
        "url": "/hooks/{{webhook.externalHookId}}",
        "method": "DELETE"
      },
      "update": null,
      "aliasTo": null,
      "appName": "knack",
      "apiJsonc": "{\n    \"output\": {\n        \"id\": \"{{body.id}}\",\n        \"fields\": \"{{omit(body, 'id')}}\"\n    }\n}",
      "authorId": 671322,
      "appVersion": 2,
      "parameters": [
        {
          "name": "event",
          "type": "select",
          "label": "Event",
          "options": [
            {
              "label": "Record created",
              "value": "record_created",
              "nested": [
                {
                  "name": "object_id",
                  "type": "select",
                  "label": "Object",
                  "options": "rpc://app%23knack@2/Objects",
                  "mappable": true,
                  "required": true
                }
              ]
            },
            {
              "label": "Record updated",
              "value": "record_updated",
              "nested": [
                {
                  "name": "object_id",
                  "type": "select",
                  "label": "Object",
                  "options": "rpc://app%23knack@2/Objects",
                  "mappable": true,
                  "required": true
                }
              ]
            },
            {
              "label": "Record deleted",
              "value": "record_deleted",
              "nested": [
                {
                  "name": "object_id",
                  "type": "select",
                  "label": "Object",
                  "options": "rpc://app%23knack@2/Objects",
                  "mappable": true,
                  "required": true
                }
              ]
            },
            {
              "label": "Form Submitted",
              "value": "form_submitted",
              "nested": [
                {
                  "name": "key",
                  "type": "select",
                  "label": "Form",
                  "options": "rpc://app%23knack@2/listForms",
                  "required": true
                }
              ]
            }
          ],
          "required": true
        }
      ],
      "scopeJsonc": null,
      "accountName": "knack",
      "attachJsonc": "{\n    \"url\": \"/hooks\",\n    \"method\": \"POST\",\n    \"qs\": {\n        \"key\": \"{{ifempty(parameters.key, parameters.object_id)}}\"\n    },\n    \"body\": {\n        \"target_url\": \"{{webhook.url}}\",\n        \"event\": \"{{parameters.event}}\"\n    },\n    \"response\": {\n        \"error\": {\n            \"type\": \"DataError\",\n            \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n        },\n        \"data\": {\n            \"externalHookId\": \"{{body.id}}\",\n            \"formKey\": \"{{parameters.key}}\" //for interface\n        }\n    }\n}",
      "detachJsonc": "{\n    \"url\": \"/hooks/{{webhook.externalHookId}}\",\n    \"method\": \"DELETE\"\n}",
      "updateJsonc": null,
      "altAccountName": null,
      "parametersJsonc": "[\n    {\n        \"name\": \"event\",\n        \"label\": \"Event\",\n        \"type\": \"select\",\n        \"required\": true,\n        \"options\": [\n            {\n                \"label\": \"Record created\",\n                \"value\": \"record_created\",\n                \"nested\": [\n                    {\n                        \"name\": \"object_id\",\n                        \"label\": \"Object\",\n                        \"type\": \"select\",\n                        \"required\": true,\n                        \"mappable\": true,\n                        \"options\": \"rpc://Objects\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"Record updated\",\n                \"value\": \"record_updated\",\n                \"nested\": [\n                    {\n                        \"name\": \"object_id\",\n                        \"label\": \"Object\",\n                        \"type\": \"select\",\n                        \"required\": true,\n                        \"mappable\": true,\n                        \"options\": \"rpc://Objects\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"Record deleted\",\n                \"value\": \"record_deleted\",\n                \"nested\": [\n                    {\n                        \"name\": \"object_id\",\n                        \"label\": \"Object\",\n                        \"type\": \"select\",\n                        \"required\": true,\n                        \"mappable\": true,\n                        \"options\": \"rpc://Objects\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"Form Submitted\",\n                \"value\": \"form_submitted\",\n                \"nested\": [\n                    {\n                        \"name\": \"key\",\n                        \"label\": \"Form\",\n                        \"type\": \"select\",\n                        \"options\": \"rpc://listForms\",\n                        \"required\": true\n                    }\n                ]\n            }\n        ]\n    }\n]"
    }
  },
  "global": true,
  "groups": [
    {
      "label": "Other",
      "modules": [
        "CreateRecord",
        "DeleteRecord",
        "GetRecord",
        "NewEvent",
        "SearchForRecords",
        "UpdateRecord",
        "UploadFile",
        "WatchRecords",
        "MakeAPICall"
      ]
    }
  ],
  "icon32": "\\x89504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af400000006624b474400ff00ff00ffa0bda793000003194944415458c3c5974f88d55514c73f6f1a669c242d9d10924cc22c28235cd8c24d910b75a1966d04094a10240d42a4850b17052d12425741614d2b1174278e20a40b43632a0d4324b08532fe4fa718d3c7ccfbb8f89df1fdfacdefbef77e3ad217eee69e73cf39f7fcbd17fe67d4aa1e5027cecd06e6c4f615e00660ad564d6425ee503e1bd802bc0d3c13a461e018f03d300450d5908e94abddea6eb56139f6045fc772bb2adab10058dbc273e7aa5eacbbeca639e31a05773e093c91905507ce14f8ab79209477012b812f80f905a34680db0959b7803f27f8633da5beaebeaa4e6b199e20d6d40fd46b11d31fd4977302e7a86713f1ff4dedcfc959a61e55ff0e7903eabc5223720ade542f17049f52df087a5f18558641b5479dae6e55af96f0ec5367a40c98a61e4808bfa06e089e8104cf37ea7341bf9be0a9abef4ff2426cbca40e9bc6a8ba4bfd3a413fa21eb73d06c393930c58a28eb4393c163cc53ed050c74df7873c86e3b293aa6038562b3c06cc60721fa885ac4eeaaf0f985b568617819dc0f5ce2ab812ee00a742febbc0c9541976a94bcd5aeaa50e5d9a4243bda87ea7ae529fb65d9bb6598eddea227587faabfa6f45e5a3ea97eac2b854759fd96c288b2373aba0aefea87eacbed0ca885a5169e071e0156015b01a5808f43c40ec1bc005e020b017f809b80bb97991737b6fb8fd23f5b0fad743e6401123ea57ea2c4b7a00ea87663d7b7c0a951631ae6e33978cf93214e8a7fd1bc15865fb8d3667bb80b780defb1bb9d93d04dcec20a6a7816b25b47f8001e0529524c9dff6f7489214eaa16033305a42ef05f601eb805f5ac839412462d377cd3c586ef32d90c775f513b369f89a7a2311e38d216781badf6c76e471d6ac379404b0d909df53cfdb1c3043eacaa0a1ae303d6e3fcb5d6696d9f4bc13b42bea3b76f82a7ad1ec65b45e9d9b138abaa945967f5be0ed53b7ab3fab6b42769514290dd3ee16061c327b15e5cff4d8620e7457b4a397ac2ba6f09f328c0aab535e3540f57f413ff07c8236060c86c2a947b870a6fa6964f344728d99bd723eb7ecc1d9060ff237ac91fd091701cf9235a0d3c01fc0d894ff091f35ee01650023b7fa1882780000000049454e44ae426082",
  "icon64": "\\x89504e470d0a1a0a0000000d4948445200000040000000400806000000aa6971de00000006624b474400ff00ff00ffa0bda793000006974944415478daed9b5b6c54551486bfd2d642114a8082150c14ad041f04215c448d89280121514308a2d1f84048789018638c2626c610822f1a34d1077d124140d02017f112118c20280a2255a4a00868b90828d07ba7bf0f6b979e4ee7b4e79c993343913f399964e6ecbdd6faf76d5df6c0555cc5ff1a79d9142609a010e80f0c014a9d0ea780e3c039a009202f2f3baac52ec5190dd0179806cc026e050603c54e871ae00450096c02b600c700658b88d88c77cf4849eb24d5ab6b34493a28e95549233c04763f38e3874ada1ac0f054581037013de2341e9bde0b81bb2374d1081c89d5fa380970280766476c7b02a8eaee048c04ca22b63d0254777702ca80a2886df763a743b726a00648446c7b386ee30313e039cefa4b9a2f697ceb775de018501b41af7ae02788df212a0862bcc36dc022cc99a9029e023e95d4999217b1dd3c2cfec53cc3ae74ba0e18872db53ae047e020d09811e23c237fbfa4aaa433fa2f498f49ca4b35133c3e4095c263afa401c9fd7af4e92369a1a47d1ee72a21e984a46592c6049ca1818c9f2ae9a88fa2679c22453ecaf694f479040236482af4f6e9d16794a4b5921a3b697f58d28cc8247884dd22697f17cad64a7a5952490a85f325ad8940c09b5ee53d7d3d28a932601fbf499a188904d7a897a415018535495a2e9bf2243d8b2210f06c521f25925e94742e643f5b240d0a458047e84c491743086b91b4cdcbba7be68554ba59d21cb50fa4d63a92c32221e939859905eee542492b230894a423921e777d205b8b0d21dad7499ae2da4e976d88e9e080a4e17e04f8f901c380c9e1778f4b6ddf005e010602bf03ff84685f87f9010b817781d111f568450530b5757083ce80a96e24d24142d2679266c9e2fba0b8203b396ad294efc53a259d2aadf073844a816bd264be07709f1bc130f1406f600a99cd568d068662b3b18392a9500bb46448f820a024c4fb791936be5587f2543ff811700cb8906125728962600274dc07fc08f819f83ad75a67104dd8b2ee00bf3da016588ab13638d7da47440316526f053603bb52bd9472ada92d9f371b580cdc946b6b02a209380a7c096c00be054ed2497add77b3f1ac9551c0022c9f5f46968b290120e06f6007f001f015b687b5040989bb7cc31191ef8898e388a820402e2166346285948fdcf30bd010360f10f86dcfb2b81e98eec89808f4c9a2d1c29225db81e5c017c069c85e29cd1be4f496f9ec6fc9f205cd19f4dcfcf0872c502a56ba090f87b468f32c8fe1c04ce049e0c618f96fc0a6fac7c01a6c0934a533fa9958c779402f2cf0e915a3f1602ef518ccb59d8715515749da860bb862db035ae1997625c09dc05ce05eccddccc509510ffc00ac0236620595c055e5406f798c2ec2aa3dd38007b0d128ce81d1a99070c6af0756037b08901deef45767780116e3df83adf349b45d6cb85c71163b1a97e0ea8b811d21cfc6d69a149906dc85dde8c8cfb56521b11d780238e44742bb6f9cf165c08bcef021e4dee14917cb80f9f83849a9a2c152ccdb1b7605180fb6574df4fb311501d5586dfe4a4109703ba4ce09a622e00cae309943c83d9942b9df0fa90868017667d8a05aac501ae6fd4dd8b5b94cc0f7c46a47806793d89e41e1d5c00bd88587a02800de061e05f6654007dfbb067e29b14accbb4a177b304ff13dec9e60501461d376339694791f778132026a80ef21f531e847c045ac2811a5b60fd00c7c083c0c6c030660b142180c719f0731bf7f09703e822ebb09bba45da8d957d2c60821eb79498b25f5f384ce93dcf761b04656116eeda3c085c28742f4512be991d0a1b347e87885bbe07058d25c79aa30ae9f8714beb8b9cb0d42b24e9324ed0cd8c70ab9dc41687804ce90153c3b43b3ac0c36561debfa487a3aa4f1921535cbbcca7bfa2b97b45e567ef3c377922a944ee22489f54f94baca7b5a76076060b2304ffba51108382b695cb2f29e3e4b25bde6a353a5d339fdac9147603fd9f47e47d237b2bb00af4bba436eadfab4cd97b43a02010d92a6f919e0fa2e96f492dadf63d8216942468cf711da437649a9cbbc9cdaaed6ed8940c0a58b125df45f28bb547ddc0dceb0588c4f83b05192aa23102049cf042439dfc9b936ace1d988f62a303f200a4674f582736e1258b23434e2be2e0f96312e8c4b4eba88fbae701e30368df69146f57222a03701a6b10f4e61f5be58ab3e711370037073c4b62b81bd31eb173b01f55856b621449b04b0160b7e12ddf65f631e076aa0a4d932d7f5a4fcddd74649bf4a7adef90e5939cbb3f9bfc19ed89138192ba89463717f1d7000d889adf93fc9e2ff05b33ebfd456662fc4ea0c095cdea1db4ef7abe8c6f80f1e01b4f4ef7e7eca0000000049454e44ae426082",
  "origin": "eu1.make.com",
  "public": true,
  "compile": false,
  "created": "2022-08-31T14:34:48.003694+00:00",
  "icon128": "\\x89504e470d0a1a0a0000000d4948445200000080000000800806000000c33e61cb00000006624b474400ff00ff00ffa0bda79300000e554944415478daed9d7bb0556519879fe3390738887010546eca4585121133c54c2b2f64184ede9149279dca7be9a4339653463999d3454bb2b2b434251aaf815866e8a4900aa1a828a309e205f00a88873bfb9cf3eb8ff73beec5e95cf65a7bad6fadbd59cfcc1e06d86b7fb7dffaaeeffb7e90939393939393939393939393b31351937606924612c02e403d301018090c05f6076addd75a81d78065c01bc03aa01968ada9a9ee2aaacad2b94607d81d180f9c0a7c1c180e0c021a305104cbdf026c04de06566282b8075802bc0fa81ac55055250a34fc9ec089c0f9c05860d78865dd88f508f7020f6362d804508d62a8682421a946d271929e9054507cb44afa50d2df249d2b69904b2bed62e7c0478d5f2be97c496fc7d8f01db15dd28b92ce71e9a65dfc9d9bb6469074817b4b7db154d25e952e805dd2ce4039042aff18601ad0d763f2abb039424553d1027034025701833da7fb1fdc84b092a9580104defe73806353c8c216a8fcd540c50ac03100984a7143c7179b804569173e0e2a5d0007b98f6f5e029e4ebbf07150e902d817dbd5f3cdbbc086b40b1f07152980c0f87f28e9ec66be889d15543c152900473db04f0ae936030ba0f2278050d902488bf5d841515550c90210504821dd0dc0dab40b1f17952c8066e0e514d27d1db317a80a121580dba36f90b48ffb3396df0d8cbd6f265c3f1df11cb039857413211101044ec9860137004f003f01fac67c78b202bfc3402bf00c54c70410a02eee1f54d1046b22700d30015baa5d84cddcbf2fe97d88a512e53ebe2860d64171d615d84e66f0656cc1c496b8d06215802b50237019f00dcc062f98d6f9c008e0126085a4720bb8056b941e89d6529175c430ecb87aea018cc1f6328e77f526ec6579077808582ce935a025d33d4ee04c7ea4a4bbd4bd35ce93928e2ac7a0c23d3b5ad26a8f36008b24f52f33cfb5928e9474aba477253577904eabccf0e40d49bf9074a8a45d32697b1068fc7d253d1aa232974b3a36aa08dc73fd242df028803992eac2e637504703245d2b694dc874574bfa5e9bf832238440c146856cfca008262b82ba03694ff728809f876d80403e8f943457d16d150b9266bbbace86085c46f690194b46658da44b24f5882882691e05705184c6ef25e94249ab62cac323991081cb406f49bf95d45266a1364aba4ed26e112af86a4f8dbf5dd2a452f2a7e25b3f4cd2cd9236c79c978794a63d62a080174bda1253a10a926e91345425aadb7d6faa3a9e48c54d93ac1b2f254f35b249ee7cd9842e6e5a255daf08f391381bff1049af2750b847248d51092270df394cd20709e4a33d6f481ade559eb463979ff4eaa449d2574ba9a72404d0205bee25c51249c7745738f7ff8324bd9c70654bf636f7e9283f2abe144324fd46d2260ff9916c123d56650820d4567020a1e380c909ea6c1cf047cce0b3bbc9e13acc7d2b69d6015bbba89309c09f810b81de1ef20366117519d033aa08a29c053400e761fe76493202b809f82930b08bdea015d89e705ec0ec0077b00272f9a973f5711f7034fe2d94a6029f0be427145104f049e0b39e0ad707db52be13f84427856c065ef590978fccc003626c047e045c8f1d7ca5c16ed8d67aa417b26401042afecbaee0bea80526017703a701b56d7909ec8fbfeb211f6bdbd5c361c00ce00aac11d2e433c021511e0cdb030c003e955221f703fe005c0bb45f2abe40b2c34081622f530b9c02ccc4e641b19fa846a03f7016841f06c20a601c1659232dfa0157027f020e0cfcfb2bc09a84d36e057a01dfc226a8fba5580f1d710416fc221461057008362ea7490db60ab90f38dd95a1ed5838299ab1a013d7033fc6ef10582a070027847da8a4ee2bd0adf8f4beed8ed1c0add80cf8566c1e303ca1b4eab0861f4436bafccef27810587b956a3f10a63035a46387df15fdb055c278a06782e9d493de2c3f0c476171914a365a0d3304d4027ba55dc22e0a9e868f60d6f8181613a964c2f400cd5804ad2c92617b29aff4c2e62a2553520f10184f56a65dc29c2ea9c336ea4a5e0e865d05548d474c1573142136a6c20a6031e61b97935d461162ae164500f3d22e614e97ec89ad8a4a22ac00b602b75345ae515584b089fa7b84085e116af6ec2616bd813bb083999cf429609b600bb003b3a5c07f29d199248a00c0022fdf43c835674e6cb462710a17611e448fb9bf6f8370ee64a1d7cf01111c0d4cc70e887292a7157bd31f07e6038f60ceb1cd10dd8730d25301118c01aec32273d7a75d4355888026cc23f961e041ec4e8302c4e3381af917da1d104d012ec6b6637dc7ecab3684d936bc00fc15ebde9f27a130f5e5fb6717853014381338173ba94bf270a61a2900ab812731e3d2453857f4243d8363fb6527841a600fe024cc746c02fe2c642b950dc0426016d6c5bf8db36ef2e1121e7b0a811ea10ff079cc68e30bd831657e6863b460e72ab3b159fc7cdcde8aef380089a6a66220847158af3005b365cfaa5145d26cc1c6f33b817f62b3f8542fa6f292726078180a9c8c992e7d9a6c9a56c55e7ce003e0df9815f15cdc794a16a27e78cd416078e889ed239c810d13c3a8ec90759df10e36a1bb177896081b3549935a4e9c186ab121e1646c0531161b32b25343e5f117e03bd8786fdd60861a1f3250d1815e612fcc98e14c2cc2d89e54fe5ca18005965c8cf911cc2343dd3f644000419c187a0243307fbb2bf017012c69366313c019c03fb078c3a95f469999372cd013f4c07a82f154d7bca037e6bc3101eb15660373243d458a7383d47b0015034b0ec65cae4e030e279d8b207cb31edbea9d8d6d02ad01bf4248450081b7bd01f368390bf8223bef1ec176ec1c7f167017e687d85c913b815d1168f83d802381af609e3dfd7de725a3b4625bc10f62c61d0b49f8aee2c42b3dd0e8f5c0c1d89b7e02e6ef5f2d13bcb81136697c1cb81f9883997a65ef34b0d31214a3670cc7fcd74fc276ff42392ee450c08687d958afb00c28c42584580510d8f21d824de4be845dea38989d736c8f9356ac17b80fb3c47a05caef11e2b407e88f45be9e8475f1fb9277f14920ec10e95acc38b7ac48e2e59884d5606bdb83b1717d2216b4213ffff74313b6cdfc7bca1041c94f051abd3fe6857a32162ee640ec542f9fc5fba7896210ad48c341b74f040e6d0ec0c6f45331f7a37ea53c9f9338cb30a39b25490a60221697677029cfe478e70eec36966d614550ea5efb20f7c91b3f9b9c48c261e21613e3654939b1b33b66849b5898b875e46ee159e72022440b2d55006bb1c9464e7619458271020bd8e58f39d965203032ec43dd0a2030ab7c0e3f51b973a2514b84edf63016372b7027523b312dd850b82ded8cc4451801bc8ef9ab6599f52e9f49d102fcd07db2f632b4bafc85228c00b693ed79c04ae0722c704552f4c0965cd7613e0d73697789448abc87199a86226c9cc0f9840843ea91a731eba23bb053c82419edfe9c87ddd6311dd89876056043d3eab00f85b5ba5d8a6d0a658566cccc7a0a665c594bf257d98ca1e8fabe0eb80abb197d45ca75b1820eee34ea8eb002d88459a6841e6b126003769fd0c514bbbedd493ea0f548ece28cb69e713b26c233b0281e69d4cd162c9844683f83920510f8e159386b94147913b81498066c08e46d00268224e949c0d02590f662ccbaf966fc2f975fc286c1d04471bc5805fc8ef4263ff330f7b1dbf97fd3e9bd317b852469a45de8f89a9a9a3621ac05be8d196af83a3b69056e23e2aa24940002953d138b4be79302d6e867b7a5dd41775743f227960dd8ae5b67f5b309b8d1e5f3790ff5b20478a093fae896a8ae57ef033fc32c527cb01e9b6c7d13581978e3da3384e48d4feb70f7157574f2e6f2d58a0580381d73f448aab7dc8a89edcda83f105a00818a7f08b885e4273dcf6381a77e096ceca8e1030d310c3f360be3e8a2ee02025d0e5ce0ea29893b8d1ec04cc5fdfb15ba6bdb1a25dd9dd0bdb80549b3248d56697708d748baddd39dbd7f97545fcad9bbcb5b1f49974b5a13631e96cb2ef0f67b7974bb822169a4a44763aee0f5927e201358a9b788f796f4af841abc3d8f4bdab5d48a77f9db45d26449afc6907e93a4b34ba91b5f22d84fd25cd9bdf6e5f292a43324d585ace06131556e292c9334344ce507ea6aa2a4a565a4bd4dd27725d58649df8708864abad1a9330adb25cd9034462195edbe7f80a4773c09e0434947846d80405d8d95345b36cc85a120e9570ad1fbf81642bda42992162a5c6fb04cd20592768b523097f6f192b67a12408ba473cac82b92fa49fa75081114dcf723d5914f11b475c7974a7a4ad2a60ec4d0ea0ab44ad274d9db1b793c73cf4e96f522be98564e43b83cf7957493ac5bef8acdb2deb56fdc8d1feb9ab96d29226915764a36035b328dc3dcc18760c6144bb160c8cf5266308440858cc76fc4f29ab6f4233964d835f44dd8cee16bc0d598b34d7bd600d7604bc9ad69c7148a848ab3e07ab9c95d5c4a76bf55275b32fae48638cae17ea356d2d725bdd52e8d259226b9ba4bbb19b3898afb110b3d0be07ec53413d78e2b8465b2e171a6a4fde3105957548bcf7e7f6c78f14923763258f6055a6e3800bb05642a6673f020d09474975f2d02188d3ba3f7c80897662c37a8051afa19f7f14245c7e10b748d07e33facdc40b2779b7a682a5a008e1aec1633dff422c415ad59a51a0450471e782a32d52080462c6e816fb6e162f85532d52080b1c0fe29a4fb16e95b02974d3508603cc99b8277c40bd8458e154dc50a20b00248da08b43316921dafa0c854ac001c0dd819836f9663fe1199b9f8212a952e807db0e094be9949fabe11b1500d0248da11a43d8f62277315fff643e50bc0871f409065c09598734c5550e9025882bd8daf90fc846c01f0359c736c35bcfd158f8a76067b4b3a4fd26332eb9938d928e9364923923e9acd8948e03cbd51d22992ee92b4d29dab47b1546e91f481a439924e94d450ad0d5f55fd58a091ea3137ee03b18b2a0ec7b68c07623104feef51ccc57a2d669e753f768dfb5252bad4d917d5592a7610431dd6f0fdb12bdb46613b870dd81c680be6ebf80c3697588bc51ea8da460f52fd256c47675df9ced0d83939393939393939393900fc0f18ae54a0b03b25f50000000049454e44ae426082",
  "icon256": "\\",
  "icon512": "\\",
  "install": {},
  "ipmRepo": "https://ipm.integromat.com",
  "ipmTags": null,
  "version": 2,
  "website": null,
  "_modules": {
    "NewEvent": {
      "id": 60664,
      "api": {},
      "rev": 5,
      "crud": null,
      "name": "NewEvent",
      "epoch": null,
      "flags": {},
      "label": "New Event",
      "scope": [],
      "expect": [],
      "public": true,
      "typeId": 10,
      "appName": "knack",
      "samples": null,
      "apiJsonc": null,
      "approved": false,
      "hookName": "knack",
      "learning": false,
      "interface": [
        "rpc://app%23knack@2/webhookInterface"
      ],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": null,
      "description": "Triggers when a new record is created, updated or deleted or when a form is submitted.",
      "expectJsonc": null,
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n    \"rpc://webhookInterface\"\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "GetRecord": {
      "id": 60665,
      "api": [
        {
          "qs": {},
          "url": "/objects/{{parameters.object_id}}/fields",
          "body": {},
          "method": "GET",
          "headers": {},
          "response": {
            "temp": {
              "output": "{{body.fields}}"
            },
            "error": {
              "type": "DataError",
              "message": "{{getErrorMessage(statusCode, body)}}"
            },
            "output": ""
          },
          "condition": "{{!parameters.metadataExists}}"
        },
        {
          "qs": {},
          "url": "/objects/{{parameters.object_id}}/records/{{parameters.record_id}}",
          "method": "GET",
          "headers": {},
          "response": {
            "error": {
              "type": "DataError",
              "message": "{{getErrorMessage(statusCode, body)}}"
            },
            "output": "{{wrapMultipleChoiceRawInArray(getRecordOutput(body, parameters.mode), temp.output)}}"
          },
          "condition": "{{!parameters.metadataExists}}"
        },
        {
          "qs": {},
          "url": "/objects/{{parameters.object_id}}/records/{{parameters.record_id}}",
          "method": "GET",
          "headers": {},
          "response": {
            "error": {
              "type": "DataError",
              "message": "{{getErrorMessage(statusCode, body)}}"
            },
            "output": "{{wrapMultipleChoiceRawInArray(getRecordOutput(body, parameters.mode), metadata.expect)}}"
          },
          "condition": "{{parameters.metadataExists}}"
        }
      ],
      "rev": 4,
      "crud": "read",
      "name": "GetRecord",
      "epoch": null,
      "flags": {},
      "label": "Get a Record",
      "scope": [],
      "expect": [
        {
          "name": "object_id",
          "type": "select",
          "label": "Object",
          "nested": [
            "rpc://app%23knack@2/RecordExpect?type=hidden"
          ],
          "options": "rpc://app%23knack@2/Objects",
          "required": true
        },
        {
          "name": "record_id",
          "type": "text",
          "label": "Record ID",
          "required": true
        },
        {
          "name": "mode",
          "type": "select",
          "label": "Returned data",
          "options": [
            {
              "label": "formatted and raw",
              "value": "both"
            },
            {
              "label": "only formatted",
              "value": "formatted"
            },
            {
              "label": "only raw",
              "value": "raw"
            }
          ],
          "advanced": true,
          "required": false
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "knack",
      "samples": null,
      "apiJsonc": "[\n    /* \n        Old version was using /objects/{{parameters.object_id}}/fields to get the metadata needed for wrapMultipleChoiceRawInArray\n        new version is using metadata.expect instead of calling the API everytime, but it is present only if the old module was refreshed\n        for compatibitly with old scenarios, we still need to call the API metadata\n        New or refreshed modules will not make the additiona call\n        Updated by Kat Ben\n   */\n    {\n        // API metadata for old scenarios\n        \"condition\": \"{{!parameters.metadataExists}}\",\n        \"url\": \"/objects/{{parameters.object_id}}/fields\",\n        \"method\": \"GET\",\n        \"qs\": {},\n        \"body\": {},\n        \"headers\": {},\n        \"response\": {\n            \"error\": {\n                \"type\": \"DataError\",\n                \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n            },\n            \"temp\": {\n                \"output\": \"{{body.fields}}\"\n            },\n            \"output\": \"\"\n        }\n    },\n    {\n        // old scenarios using API metadata\n        \"condition\": \"{{!parameters.metadataExists}}\",\n        \"url\": \"/objects/{{parameters.object_id}}/records/{{parameters.record_id}}\",\n        \"method\": \"GET\",\n        \"qs\": {},\n        \"headers\": {},\n        \"response\": {\n            \"error\": {\n                \"type\": \"DataError\",\n                \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n            },\n            // wrap item's \"multiple_select\" type single value fields in an array for the interface mapping to work correctly on make\n            \"output\": \"{{wrapMultipleChoiceRawInArray(getRecordOutput(body, parameters.mode), temp.output)}}\"\n        }\n    },\n    {\n        // new or refreshed scenarios using metadata.expect \n        \"condition\": \"{{parameters.metadataExists}}\",\n        \"url\": \"/objects/{{parameters.object_id}}/records/{{parameters.record_id}}\",\n        \"method\": \"GET\",\n        \"qs\": {},\n        \"headers\": {},\n        \"response\": {\n            \"error\": {\n                \"type\": \"DataError\",\n                \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n            },\n            // wrap item's \"multiple_select\" type single value fields in an array for the interface mapping to work correctly on make\n            \"output\": \"{{wrapMultipleChoiceRawInArray(getRecordOutput(body, parameters.mode), metadata.expect)}}\"\n        }\n    }\n]",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Record ID"
        },
        "rpc://app%23knack@2/RecordInterface"
      ],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "knack",
      "description": "Returns details about a record specified by its ID.",
      "expectJsonc": "[\n    {\n        \"name\": \"object_id\",\n        \"type\": \"select\",\n        \"label\": \"Object\",\n        \"required\": true,\n        \"options\": \"rpc://Objects\",\n        \"nested\": [\n            \"rpc://RecordExpect?type=hidden\"\n        ]\n    },\n    {\n        \"name\": \"record_id\",\n        \"type\": \"text\",\n        \"label\": \"Record ID\",\n        \"required\": true\n    },\n    {\n        \"name\": \"mode\",\n        \"type\": \"select\",\n        \"label\": \"Returned data\",\n        \"required\": false,\n        \"advanced\": true,\n        \"options\": [\n            {\n                \"value\": \"both\",\n                \"label\": \"formatted and raw\"\n            },\n            {\n                \"value\": \"formatted\",\n                \"label\": \"only formatted\"\n            },\n            {\n                \"value\": \"raw\",\n                \"label\": \"only raw\"\n            }\n        ]\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Record ID\"\n\t},\n\t\"rpc://RecordInterface\"\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "UploadFile": {
      "id": 60666,
      "api": {
        "qs": {},
        "url": "/applications/{{connection.applicationId}}/assets/{{if(parameters.isImage, 'image', 'file')}}/upload",
        "body": {
          "files": {
            "value": "{{parameters.data}}",
            "options": {
              "filename": "{{parameters.fileName}}"
            }
          }
        },
        "type": "multipart/form-data",
        "method": "POST",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": "{{body}}"
        }
      },
      "rev": 2,
      "crud": "create",
      "name": "UploadFile",
      "epoch": null,
      "flags": {},
      "label": "Upload a File",
      "scope": [],
      "expect": [
        {
          "name": "fileName",
          "type": "filename",
          "label": "File name",
          "required": true,
          "semantic": "file:name"
        },
        {
          "name": "data",
          "type": "buffer",
          "label": "Data",
          "required": true,
          "semantic": "file:data"
        },
        {
          "name": "isImage",
          "type": "boolean",
          "label": "This file is an image.",
          "required": false
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "knack",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/applications/{{connection.applicationId}}/assets/{{if(parameters.isImage, 'image', 'file')}}/upload\",\n\t\"method\": \"POST\",\n\t\"qs\": {},\n\t\"type\": \"multipart/form-data\",\n\t\"body\": {\n\t\t\"files\": {\n\t\t\t\"value\": \"{{parameters.data}}\",\n            \"options\": {\n\t\t\t\t\"filename\": \"{{parameters.fileName}}\"\n            }\n        }\n    },\n\t\"headers\": {},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"type\": \"DataError\",\n\t\t\t\"message\": \"{{getErrorMessage(statusCode, body)}}\"\n\t\t},\n\t\t\"output\": \"{{body}}\"\n\t}\n}\n",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "File ID"
        },
        {
          "name": "filename",
          "type": "filename",
          "label": "File name"
        },
        {
          "name": "public_url",
          "type": "url",
          "label": "Public URL"
        },
        {
          "name": "size",
          "type": "number",
          "label": "Size"
        },
        {
          "name": "thumb_url",
          "type": "url",
          "label": "Thumb URL"
        },
        {
          "name": "type",
          "type": "text",
          "label": "Type"
        }
      ],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "knack",
      "description": "Uploads a file or image.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"fileName\",\n\t\t\"type\": \"filename\",\n\t\t\"label\": \"File name\",\n\t\t\"required\": true,\n\t\t\"semantic\": \"file:name\"\n\t},\n\t{\n\t\t\"name\": \"data\",\n\t\t\"type\": \"buffer\",\n\t\t\"label\": \"Data\",\n\t\t\"required\": true,\n\t\t\"semantic\": \"file:data\"\n\t},\n\t{\n\t\t\"name\": \"isImage\",\n\t\t\"type\": \"boolean\",\n\t\t\"label\": \"This file is an image.\",\n\t\t\"required\": false\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"File ID\"\n\t},\n\t{\n\t\t\"name\": \"filename\",\n\t\t\"type\": \"filename\",\n\t\t\"label\": \"File name\"\n\t},\n\t{\n\t\t\"name\": \"public_url\",\n\t\t\"type\": \"url\",\n\t\t\"label\": \"Public URL\"\n\t},\n\t{\n\t\t\"name\": \"size\",\n\t\t\"type\": \"number\",\n\t\t\"label\": \"Size\"\n\t},\n\t{\n\t\t\"name\": \"thumb_url\",\n\t\t\"type\": \"url\",\n\t\t\"label\": \"Thumb URL\"\n\t},\n\t{\n\t\t\"name\": \"type\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Type\"\n\t}\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "MakeAPICall": {
      "id": 60667,
      "api": {
        "qs": {
          "{{...}}": "{{toCollection(parameters.qs, 'key', 'value')}}"
        },
        "url": "https://{{ifempty(ifempty(connection.apiServer, connection.appServer), 'api.knack.com')}}/{{parameters.url}}",
        "body": "{{parameters.body}}",
        "type": "text",
        "method": "{{parameters.method}}",
        "headers": {
          "{{...}}": "{{toCollection(parameters.headers, 'key', 'value')}}"
        },
        "response": {
          "output": {
            "body": "{{body}}",
            "headers": "{{headers}}",
            "statusCode": "{{statusCode}}"
          }
        }
      },
      "rev": 2,
      "crud": null,
      "name": "MakeAPICall",
      "epoch": null,
      "flags": {},
      "label": "Make an API Call",
      "scope": [],
      "expect": [
        {
          "help": "Enter a path relative to `https://api.knack.com` (or custom domain). For example: `/v1/objects`.",
          "name": "url",
          "type": "text",
          "label": "URL",
          "required": true
        },
        {
          "name": "method",
          "type": "select",
          "label": "Method",
          "default": "GET",
          "options": [
            {
              "label": "GET",
              "value": "GET"
            },
            {
              "label": "POST",
              "value": "POST"
            },
            {
              "label": "PUT",
              "value": "PUT"
            },
            {
              "label": "PATCH",
              "value": "PATCH"
            },
            {
              "label": "DELETE",
              "value": "DELETE"
            }
          ],
          "required": true
        },
        {
          "help": "You don't have to add authorization headers; we already did that for you.",
          "name": "headers",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Headers",
          "default": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        {
          "name": "qs",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Query String"
        },
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        }
      ],
      "public": true,
      "typeId": 12,
      "appName": "knack",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"https://{{ifempty(ifempty(connection.apiServer, connection.appServer), 'api.knack.com')}}/{{parameters.url}}\",\n    \"method\": \"{{parameters.method}}\",\n    \"qs\": {\n\t\t\"{{...}}\": \"{{toCollection(parameters.qs, 'key', 'value')}}\"\n\t},\n    \"headers\": {\n\t\t\"{{...}}\": \"{{toCollection(parameters.headers, 'key', 'value')}}\"\n\t},\n\t\"body\": \"{{parameters.body}}\",\n\t\"type\": \"text\",\n    \"response\": {\n        \"output\": {\n            \"headers\": \"{{headers}}\",\n            \"body\": \"{{body}}\",\n\t\t\t\"statusCode\": \"{{statusCode}}\"\n        }\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        },
        {
          "name": "headers",
          "type": "collection",
          "label": "Headers"
        },
        {
          "name": "statusCode",
          "type": "number",
          "label": "Status code"
        }
      ],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "knack",
      "description": "Performs an arbitrary authorized API call.",
      "expectJsonc": "[\n    {\n        \"name\": \"url\",\n        \"type\": \"text\",\n        \"label\": \"URL\",\n        \"help\": \"Enter a path relative to `https://api.knack.com` (or custom domain). For example: `/v1/objects`.\",\n        \"required\": true\n    },\n    {\n        \"name\": \"method\",\n        \"type\": \"select\",\n        \"label\": \"Method\",\n        \"required\": true,\n        \"default\": \"GET\",\n        \"options\": [\n            {\n                \"label\": \"GET\",\n                \"value\": \"GET\"\n            },\n            {\n                \"label\": \"POST\",\n                \"value\": \"POST\"\n            },\n            {\n                \"label\": \"PUT\",\n                \"value\": \"PUT\"\n            },\n            {\n                \"label\": \"PATCH\",\n                \"value\": \"PATCH\"\n            },\n            {\n                \"label\": \"DELETE\",\n                \"value\": \"DELETE\"\n            }\n        ]\n    },\n    {\n        \"name\": \"headers\",\n        \"label\": \"Headers\",\n\t\t\"help\": \"You don't have to add authorization headers; we already did that for you.\",\n        \"type\": \"array\",\n        \"spec\": [\n            {\n                \"name\": \"key\",\n                \"label\": \"Key\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ],\n\t\t\"default\": [\n\t\t\t{\n\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\"value\": \"application/json\"\n\t\t\t}\n\t\t]\n    },\n    {\n        \"name\": \"qs\",\n        \"label\": \"Query String\",\n        \"type\": \"array\",\n        \"spec\": [\n            {\n                \"name\": \"key\",\n                \"label\": \"Key\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ]\n    },\n    {\n        \"name\": \"body\",\n        \"label\": \"Body\",\n        \"type\": \"any\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"body\",\n\t\t\"label\": \"Body\",\n\t\t\"type\": \"any\"\n\t},\n\t{\n\t\t\"name\": \"headers\",\n\t\t\"label\": \"Headers\",\n\t\t\"type\": \"collection\"\n\t},\n\t{\n\t\t\"name\": \"statusCode\",\n\t\t\"label\": \"Status code\",\n\t\t\"type\": \"number\"\n\t}\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "CreateRecord": {
      "id": 60668,
      "api": {
        "qs": {},
        "url": "/objects/{{parameters.object_id}}/records",
        "body": "{{getRecordInput(parameters)}}",
        "method": "POST",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": "{{wrapMultipleChoiceRawInArray(getRecordOutput(body, parameters.mode), metadata.expect)}}"
        }
      },
      "rev": 5,
      "crud": "create",
      "name": "CreateRecord",
      "epoch": null,
      "flags": {},
      "label": "Create a Record",
      "scope": [],
      "expect": [
        {
          "name": "object_id",
          "type": "select",
          "label": "Object",
          "options": {
            "store": "rpc://app%23knack@2/Objects",
            "nested": [
              "rpc://app%23knack@2/RecordExpect"
            ]
          },
          "mappable": false,
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "knack",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/objects/{{parameters.object_id}}/records\",\n    \"method\": \"POST\",\n    \"qs\": {},\n    \"body\": \"{{getRecordInput(parameters)}}\",\n    \"headers\": {},\n    \"response\": {\n        \"error\": {\n            \"type\": \"DataError\",\n            \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n        },\n        \"output\": \"{{wrapMultipleChoiceRawInArray(getRecordOutput(body, parameters.mode), metadata.expect)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Record ID"
        },
        "rpc://app%23knack@2/RecordInterface"
      ],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "knack",
      "description": "Creates a new record.",
      "expectJsonc": "[\n    {\n        \"name\": \"object_id\",\n        \"type\": \"select\",\n        \"label\": \"Object\",\n        \"required\": true,\n        \"mappable\":false,\n        \"options\": {\n            \"store\": \"rpc://Objects\",\n            \"nested\": [\n                \"rpc://RecordExpect\"\n            ]\n        }\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Record ID\"\n\t},\n\t\"rpc://RecordInterface\"\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "DeleteRecord": {
      "id": 60669,
      "api": {
        "qs": {},
        "url": "/objects/{{parameters.object_id}}/records/{{parameters.record_id}}",
        "method": "DELETE",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": null
        }
      },
      "rev": 2,
      "crud": "delete",
      "name": "DeleteRecord",
      "epoch": null,
      "flags": {},
      "label": "Delete a Record",
      "scope": [],
      "expect": [
        {
          "name": "object_id",
          "type": "select",
          "label": "Object",
          "options": "rpc://app%23knack@2/Objects",
          "required": true
        },
        {
          "name": "record_id",
          "type": "text",
          "label": "Record ID",
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "knack",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/objects/{{parameters.object_id}}/records/{{parameters.record_id}}\",\n\t\"method\": \"DELETE\",\n\t\"qs\": {},\n\t\"headers\": {},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"type\": \"DataError\",\n\t\t\t\"message\": \"{{getErrorMessage(statusCode, body)}}\"\n\t\t},\n\t\t\"output\": null\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "knack",
      "description": "Deletes a record specified by its ID.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"object_id\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Object\",\n\t\t\"required\": true,\n\t\t\"options\": \"rpc://Objects\"\n\t},\n\t{\n\t\t\"name\": \"record_id\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Record ID\",\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "UpdateRecord": {
      "id": 60670,
      "api": {
        "qs": {},
        "url": "/objects/{{parameters.object_id}}/records/{{parameters.record_id}}",
        "body": "{{getRecordInput(parameters)}}",
        "method": "PUT",
        "headers": {},
        "response": {
          "error": {
            "type": "DataError",
            "message": "{{getErrorMessage(statusCode, body)}}"
          },
          "output": "{{wrapMultipleChoiceRawInArray(getRecordOutput(body, parameters.mode), metadata.expect)}}"
        }
      },
      "rev": 4,
      "crud": "update",
      "name": "UpdateRecord",
      "epoch": null,
      "flags": {},
      "label": "Update a Record",
      "scope": [],
      "expect": [
        {
          "name": "object_id",
          "type": "select",
          "label": "Object",
          "options": {
            "store": "rpc://app%23knack@2/Objects",
            "nested": [
              {
                "name": "record_id",
                "type": "text",
                "label": "Record ID",
                "required": true
              },
              "rpc://app%23knack@2/RecordExpect"
            ]
          },
          "required": true
        },
        {
          "name": "mode",
          "type": "select",
          "label": "Returned data",
          "options": [
            {
              "label": "formatted and raw",
              "value": "both"
            },
            {
              "label": "only formatted",
              "value": "formatted"
            },
            {
              "label": "only raw",
              "value": "raw"
            }
          ],
          "advanced": true,
          "required": false
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "knack",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"/objects/{{parameters.object_id}}/records/{{parameters.record_id}}\",\n    \"method\": \"PUT\",\n    \"qs\": {},\n    \"body\": \"{{getRecordInput(parameters)}}\",\n    \"headers\": {},\n    \"response\": {\n        \"error\": {\n            \"type\": \"DataError\",\n            \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n        },\n        \"output\": \"{{wrapMultipleChoiceRawInArray(getRecordOutput(body, parameters.mode), metadata.expect)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Record ID"
        },
        "rpc://app%23knack@2/RecordInterface"
      ],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "knack",
      "description": "Updates a record specified by its ID.",
      "expectJsonc": "[\n    {\n        \"name\": \"object_id\",\n        \"type\": \"select\",\n        \"label\": \"Object\",\n        \"required\": true,\n        \"options\": {\n            \"store\": \"rpc://Objects\",\n            \"nested\": [\n                {\n                    \"name\": \"record_id\",\n                    \"type\": \"text\",\n                    \"label\": \"Record ID\",\n                    \"required\": true\n                },\n                \"rpc://RecordExpect\"\n            ]\n        }\n    },\n    {\n        \"name\": \"mode\",\n        \"type\": \"select\",\n        \"label\": \"Returned data\",\n        \"required\": false,\n        \"advanced\": true,\n        \"options\": [\n            {\n                \"value\": \"both\",\n                \"label\": \"formatted and raw\"\n            },\n            {\n                \"value\": \"formatted\",\n                \"label\": \"only formatted\"\n            },\n            {\n                \"value\": \"raw\",\n                \"label\": \"only raw\"\n            }\n        ]\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Record ID\"\n\t},\n\t\"rpc://RecordInterface\"\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "UpsertRecord": {
      "id": 60671,
      "api": {
        "qs": {},
        "url": "/api/users/create",
        "body": {
          "name": "{{parameters.name}}",
          "email": "{{lower(parameters.email)}}"
        },
        "method": "POST",
        "headers": {},
        "response": {
          "output": "{{body}}"
        }
      },
      "rev": 2,
      "crud": "create",
      "name": "UpsertRecord",
      "epoch": null,
      "flags": {},
      "label": "Upsert a Record",
      "scope": [],
      "expect": [
        {
          "name": "email",
          "type": "email",
          "label": "Email address",
          "required": true
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name",
          "required": true
        }
      ],
      "public": false,
      "typeId": 4,
      "appName": "knack",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/api/users/create\",\n\t\"method\": \"POST\",\n\t\"qs\": {},\n\t\"body\": {\n\t\t\"name\": \"{{parameters.name}}\",\n\t\t\"email\": \"{{lower(parameters.email)}}\"\n\t},\n\t\"headers\": {},\n\t\"response\": {\n\t\t\"output\": \"{{body}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "uinteger",
          "label": "User ID"
        }
      ],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "knack",
      "description": "Creates or updates a record.",
      "expectJsonc": null,
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": null,
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "WatchRecords": {
      "id": 60672,
      "api": [
        {
          "qs": {},
          "url": "/objects/{{parameters.object_id}}/fields",
          "body": {},
          "method": "GET",
          "headers": {},
          "response": {
            "temp": {
              "output": "{{body.fields}}"
            },
            "error": {
              "type": "DataError",
              "message": "{{getErrorMessage(statusCode, body)}}"
            },
            "output": ""
          },
          "condition": "{{!parameters.metadataExists}}"
        },
        {
          "qs": {
            "page": 1,
            "sort_field": "{{parameters.autoincrement_id}}",
            "sort_order": "desc",
            "rows_per_page": 1000
          },
          "url": "/objects/{{parameters.object_id}}/records",
          "body": {},
          "method": "GET",
          "headers": {},
          "response": {
            "error": {
              "type": "DataError",
              "message": "{{getErrorMessage(statusCode, body)}}"
            },
            "limit": "{{parameters.limit}}",
            "output": "{{wrapMultipleChoiceRawInArray(getRecordOutput(item, parameters.mode || undefined), temp.output)}}",
            "iterate": "{{body.records}}",
            "trigger": {
              "id": "{{getId(item, parameters)}}",
              "type": "id",
              "order": "desc"
            }
          },
          "condition": "{{!parameters.metadataExists}}",
          "pagination": {
            "qs": {
              "page": "{{getPage(body)}}"
            }
          }
        },
        {
          "qs": {
            "page": 1,
            "{{...}}": "{{data}}",
            "sort_field": "{{parameters.autoincrement_id}}",
            "sort_order": "desc",
            "rows_per_page": 1000
          },
          "url": "/objects/{{parameters.object_id}}/records",
          "body": {},
          "method": "GET",
          "headers": {},
          "response": {
            "error": {
              "type": "DataError",
              "message": "{{getErrorMessage(statusCode, body)}}"
            },
            "limit": "{{parameters.limit}}",
            "output": "{{wrapMultipleChoiceRawInArray(getRecordOutput(item, parameters.mode || undefined), parameters)}}",
            "iterate": "{{body.records}}",
            "trigger": {
              "id": "{{getId(item, parameters)}}",
              "type": "id",
              "order": "desc"
            }
          },
          "condition": "{{parameters.metadataExists}}",
          "pagination": {
            "qs": {
              "page": "{{getPage(body)}}"
            }
          }
        }
      ],
      "rev": 5,
      "crud": "read",
      "name": "WatchRecords",
      "epoch": {
        "qs": {
          "rows_per_page": 100
        },
        "response": {
          "limit": 100,
          "output": {
            "id": "{{getId(item, parameters)}}",
            "label": "#{{getId(item, parameters)}}"
          }
        }
      },
      "flags": {},
      "label": "Watch Records",
      "scope": [],
      "expect": [],
      "public": true,
      "typeId": 1,
      "appName": "knack",
      "samples": null,
      "apiJsonc": "[\n    /* \n        Old version was using /objects/{{parameters.object_id}}/fields to get the metadata needed for wrapMultipleChoiceRawInArray\n        new version is using metadata.expect instead of calling the API everytime, but it is present only if the old module was refreshed\n        for compatibitly with old scenarios, we still need to call the API metadata\n        New or refreshed modules will not make the additiona call\n        Updated by Kat Ben\n   */\n    {\n        // API metadata for old scenarios\n        \"condition\": \"{{!parameters.metadataExists}}\",\n        \"url\": \"/objects/{{parameters.object_id}}/fields\",\n        \"method\": \"GET\",\n        \"qs\": {},\n        \"body\": {},\n        \"headers\": {},\n        \"response\": {\n            \"error\": {\n                \"type\": \"DataError\",\n                \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n            },\n            \"temp\": {\n                \"output\": \"{{body.fields}}\"\n            },\n            \"output\": \"\"\n        }\n    },\n    {\n        // old scenarios using API metadata\n        \"condition\": \"{{!parameters.metadataExists}}\",\n        \"url\": \"/objects/{{parameters.object_id}}/records\",\n        \"method\": \"GET\",\n        \"qs\": {\n            \"sort_field\": \"{{parameters.autoincrement_id}}\",\n            \"sort_order\": \"desc\",\n            \"page\": 1,\n            \"rows_per_page\": 1000\n        },\n        \"body\": {},\n        \"headers\": {},\n        \"response\": {\n            \"error\": {\n                \"type\": \"DataError\",\n                \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n            },\n            \"iterate\": \"{{body.records}}\",\n            \"trigger\": {\n                \"id\": \"{{getId(item, parameters)}}\",\n                \"type\": \"id\",\n                \"order\": \"desc\"\n            },\n            \"output\": \"{{wrapMultipleChoiceRawInArray(getRecordOutput(item, parameters.mode || undefined), temp.output)}}\",\n            \"limit\": \"{{parameters.limit}}\"\n        },\n        \"pagination\": {\n            \"qs\": {\n                \"page\": \"{{getPage(body)}}\"\n            }\n        }\n    },\n    {\n        // new or refreshed scenarios using metadata.expect \n        \"condition\": \"{{parameters.metadataExists}}\",\n        \"url\": \"/objects/{{parameters.object_id}}/records\",\n        \"method\": \"GET\",\n        \"qs\": {\n            \"sort_field\": \"{{parameters.autoincrement_id}}\",\n            \"sort_order\": \"desc\",\n            \"page\": 1,\n            \"rows_per_page\": 1000,\n            \"{{...}}\": \"{{data}}\"\n        },\n        \"body\": {},\n        \"headers\": {},\n        \"response\": {\n            \"error\": {\n                \"type\": \"DataError\",\n                \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n            },\n            \"iterate\": \"{{body.records}}\",\n            \"trigger\": {\n                \"id\": \"{{getId(item, parameters)}}\",\n                \"type\": \"id\",\n                \"order\": \"desc\"\n            },\n            \"output\": \"{{wrapMultipleChoiceRawInArray(getRecordOutput(item, parameters.mode || undefined), parameters)}}\",\n            \"limit\": \"{{parameters.limit}}\"\n        },\n        \"pagination\": {\n            \"qs\": {\n                \"page\": \"{{getPage(body)}}\"\n            }\n        }\n    }\n]",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Record ID"
        },
        "rpc://app%23knack@2/RecordInterface"
      ],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": "{\n    \"qs\": {\n        \"rows_per_page\": 100\n    },\n    \"response\": {\n        \"limit\": 100,\n        \"output\": {\n            \"label\": \"#{{getId(item, parameters)}}\",\n            \"id\": \"{{getId(item, parameters)}}\"\n        }\n    }\n}",
      "parameters": [
        {
          "name": "object_id",
          "type": "select",
          "label": "Object",
          "options": {
            "store": "rpc://app%23knack@2/Objects",
            "nested": [
              {
                "help": "Every form must include at least one field of auto increment type.",
                "name": "autoincrement_id",
                "type": "select",
                "label": "Auto increment field",
                "options": "rpc://app%23knack@2/AutoincrementFields",
                "required": true
              },
              "rpc://app%23knack@2/RecordExpect?type=hidden"
            ]
          },
          "required": true
        },
        {
          "name": "mode",
          "type": "select",
          "label": "Returned data",
          "options": [
            {
              "label": "formatted and raw",
              "value": "both"
            },
            {
              "label": "only formatted",
              "value": "formatted"
            },
            {
              "label": "only raw",
              "value": "raw"
            }
          ],
          "advanced": true,
          "required": false
        },
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 2,
          "required": true
        }
      ],
      "scopeJsonc": null,
      "accountName": "knack",
      "description": "Triggers when a new record is added.",
      "expectJsonc": null,
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Record ID\"\n\t},\n\t\"rpc://RecordInterface\"\n]",
      "parametersJsonc": "[\n    {\n        \"name\": \"object_id\",\n        \"type\": \"select\",\n        \"label\": \"Object\",\n        \"required\": true,\n        \"options\": {\n            \"store\": \"rpc://Objects\",\n            \"nested\": [\n                {\n                    \"name\": \"autoincrement_id\",\n                    \"type\": \"select\",\n                    \"label\": \"Auto increment field\",\n                    //\"help\": \"Every form must include at least one field of auto increment type. For more information, please see the appropriate [Help section](kb://pkg/knack/index.html).\",\n                    // the link doesn't work\n                    \"help\": \"Every form must include at least one field of auto increment type.\",\n                    \"required\": true,\n                    \"options\": \"rpc://AutoincrementFields\"\n                },\n                \"rpc://RecordExpect?type=hidden\"\n            ]\n        }\n    },\n    {\n        \"name\": \"mode\",\n        \"type\": \"select\",\n        \"label\": \"Returned data\",\n        \"required\": false,\n        \"advanced\": true,\n        \"options\": [\n            {\n                \"value\": \"both\",\n                \"label\": \"formatted and raw\"\n            },\n            {\n                \"value\": \"formatted\",\n                \"label\": \"only formatted\"\n            },\n            {\n                \"value\": \"raw\",\n                \"label\": \"only raw\"\n            }\n        ]\n    },\n    {\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 2,\n        \"required\": true\n    }\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "SearchForRecords": {
      "id": 60673,
      "api": [
        {
          "qs": {},
          "url": "/objects/{{parameters.object_id}}/fields",
          "body": {},
          "method": "GET",
          "headers": {},
          "response": {
            "temp": {
              "output": "{{body.fields}}"
            },
            "error": {
              "type": "DataError",
              "message": "{{getErrorMessage(statusCode, body)}}"
            },
            "output": ""
          },
          "condition": "{{!parameters.metadataExists}}"
        },
        {
          "qs": {
            "page": 1,
            "filters": "{{buildFilters(parameters.filters, environment.timezone, parameters.match)}}",
            "sort_field": "{{parameters.sort_field}}",
            "sort_order": "{{parameters.sort_order}}",
            "rows_per_page": "{{min(parameters.limit, 1000)}}"
          },
          "url": "/objects/{{parameters.object_id}}/records",
          "body": {},
          "method": "GET",
          "headers": {},
          "response": {
            "error": {
              "type": "DataError",
              "message": "{{getErrorMessage(statusCode, body)}}"
            },
            "limit": "{{parameters.limit}}",
            "output": "{{wrapMultipleChoiceRawInArray(getRecordOutput(item, parameters.mode), temp.output)}}",
            "iterate": "{{body.records}}"
          },
          "condition": "{{!parameters.metadataExists}}",
          "pagination": {
            "qs": {
              "page": "{{getPage(body)}}"
            },
            "condition": "{{isPagination(body, parameters.limit)}}"
          }
        },
        {
          "qs": {
            "page": 1,
            "filters": "{{buildFilters(parameters.filters, environment.timezone, parameters.match)}}",
            "sort_field": "{{parameters.sort_field}}",
            "sort_order": "{{parameters.sort_order}}",
            "rows_per_page": "{{min(parameters.limit, 1000)}}"
          },
          "url": "/objects/{{parameters.object_id}}/records",
          "body": {},
          "method": "GET",
          "headers": {},
          "response": {
            "error": {
              "type": "DataError",
              "message": "{{getErrorMessage(statusCode, body)}}"
            },
            "limit": "{{parameters.limit}}",
            "output": "{{wrapMultipleChoiceRawInArray(getRecordOutput(item, parameters.mode), metadata.expect)}}",
            "iterate": "{{body.records}}"
          },
          "condition": "{{parameters.metadataExists}}",
          "pagination": {
            "qs": {
              "page": "{{getPage(body)}}"
            },
            "condition": "{{isPagination(body, parameters.limit)}}"
          }
        }
      ],
      "rev": 6,
      "crud": "read",
      "name": "SearchForRecords",
      "epoch": null,
      "flags": {},
      "label": "Search for Records",
      "scope": [],
      "expect": [
        {
          "name": "object_id",
          "type": "select",
          "label": "Object",
          "options": {
            "store": "rpc://app%23knack@2/Objects",
            "nested": [
              {
                "help": "For column type *Connection*, enter the ID of the connected record.",
                "name": "filters",
                "type": "filter",
                "label": "Filter",
                "grouped": false,
                "options": {
                  "logic": "and",
                  "store": "rpc://app%23knack@2/Fields",
                  "operators": [
                    {
                      "label": "Common",
                      "options": [
                        {
                          "label": "Contains",
                          "value": "text:contains"
                        },
                        {
                          "label": "Does not contain",
                          "value": "text:does not contain"
                        },
                        {
                          "label": "Is",
                          "value": "text:is"
                        },
                        {
                          "label": "Is not",
                          "value": "text:is not"
                        },
                        {
                          "label": "Starts with",
                          "value": "text:starts with"
                        },
                        {
                          "label": "Ends with",
                          "value": "text:ends with"
                        },
                        {
                          "label": "Is blank",
                          "value": "text:is blank"
                        },
                        {
                          "label": "Is not blank",
                          "value": "text:is not blank"
                        },
                        {
                          "label": "Is near (address)",
                          "value": "text:near"
                        },
                        {
                          "label": "Is any",
                          "value": "text:is any"
                        }
                      ]
                    },
                    {
                      "label": "Number",
                      "options": [
                        {
                          "label": "Is",
                          "value": "number:is"
                        },
                        {
                          "label": "Is not",
                          "value": "number:is not"
                        },
                        {
                          "label": "Higher than",
                          "value": "number:higher than"
                        },
                        {
                          "label": "Lower than",
                          "value": "number:lower than"
                        },
                        {
                          "label": "Is blank",
                          "value": "number:is blank"
                        },
                        {
                          "label": "Is not blank",
                          "value": "number:is not blank"
                        }
                      ]
                    },
                    {
                      "label": "Date and time",
                      "options": [
                        {
                          "label": "Is",
                          "value": "date:is"
                        },
                        {
                          "label": "Is not",
                          "value": "date:is not"
                        },
                        {
                          "label": "Is blank",
                          "value": "date:is blank"
                        },
                        {
                          "label": "Is not blank",
                          "value": "date:is not blank"
                        },
                        {
                          "label": "Is before",
                          "value": "date:is before"
                        },
                        {
                          "label": "Is after",
                          "value": "date:is after"
                        },
                        {
                          "label": "Is today",
                          "value": "date:is today"
                        },
                        {
                          "label": "Is today or before",
                          "value": "date:is today or before"
                        },
                        {
                          "label": "Is today or after",
                          "value": "date:is today or after"
                        },
                        {
                          "label": "Is before today",
                          "value": "date:is before today"
                        },
                        {
                          "label": "Is after today",
                          "value": "date:is after today"
                        },
                        {
                          "label": "Is before current time",
                          "value": "date:is before current time"
                        },
                        {
                          "label": "Is after current time",
                          "value": "date:is after current time"
                        }
                      ]
                    }
                  ]
                },
                "required": false
              },
              {
                "help": "Select if the search should match all the filters (as 'and') or only some of the filters (as 'or'). Default is 'and' - matching all filters.",
                "name": "match",
                "type": "select",
                "label": "Match Filters",
                "options": [
                  {
                    "label": "Match All Filters",
                    "value": "and",
                    "default": true
                  },
                  {
                    "label": "Match Any Filter",
                    "value": "or"
                  }
                ]
              },
              {
                "name": "sort_field",
                "type": "select",
                "label": "Sort field",
                "options": {
                  "store": "rpc://app%23knack@2/Fields",
                  "nested": [
                    {
                      "name": "sort_order",
                      "type": "select",
                      "label": "Sort order",
                      "options": [
                        {
                          "label": "ASC",
                          "value": "asc"
                        },
                        {
                          "label": "DESC",
                          "value": "desc"
                        }
                      ],
                      "required": true
                    }
                  ]
                },
                "required": false
              },
              "rpc://app%23knack@2/RecordExpect?type=hidden"
            ]
          },
          "required": true
        },
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 100,
          "required": true
        },
        {
          "name": "mode",
          "type": "select",
          "label": "Returned data",
          "options": [
            {
              "label": "formatted and raw",
              "value": "both"
            },
            {
              "label": "only formatted",
              "value": "formatted"
            },
            {
              "label": "only raw",
              "value": "raw"
            }
          ],
          "advanced": true,
          "required": false
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "knack",
      "samples": null,
      "apiJsonc": "[\n     /* \n        Old version was using /objects/{{parameters.object_id}}/fields to get the metadata needed for wrapMultipleChoiceRawInArray\n        new version is using metadata.expect instead of calling the API everytime, but it is present only if the old module was refreshed\n        for compatibitly with old scenarios, we still need to call the API metadata\n        New or refreshed modules will not make the additiona call\n        Updated by Kat Ben\n   */\n    {\n        // API metadata for old scenarios\n        \"condition\": \"{{!parameters.metadataExists}}\",\n        \"url\": \"/objects/{{parameters.object_id}}/fields\",\n        \"method\": \"GET\",\n        \"qs\": {},\n        \"body\": {},\n        \"headers\": {},\n        \"response\": {\n            \"error\": {\n                \"type\": \"DataError\",\n                \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n            },\n            \"temp\": {\n                \"output\": \"{{body.fields}}\"\n            },\n            \"output\": \"\"\n        }\n    },\n    {\n        // old scenarios using API metadata\n        \"condition\": \"{{!parameters.metadataExists}}\",\n        \"url\": \"/objects/{{parameters.object_id}}/records\",\n        \"method\": \"GET\",\n        \"qs\": {\n            \"filters\": \"{{buildFilters(parameters.filters, environment.timezone, parameters.match)}}\",\n            \"sort_field\": \"{{parameters.sort_field}}\",\n            \"sort_order\": \"{{parameters.sort_order}}\",\n            \"page\": 1,\n            \"rows_per_page\": \"{{min(parameters.limit, 1000)}}\"\n        },\n        \"body\": {},\n        \"headers\": {},\n        \"response\": {\n            \"error\": {\n                \"type\": \"DataError\",\n                \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n            },\n            \"limit\": \"{{parameters.limit}}\",\n            \"output\": \"{{wrapMultipleChoiceRawInArray(getRecordOutput(item, parameters.mode), temp.output)}}\",\n            \"iterate\": \"{{body.records}}\"\n        },\n        \"pagination\": {\n            \"condition\": \"{{isPagination(body, parameters.limit)}}\",\n            \"qs\": {\n                \"page\": \"{{getPage(body)}}\"\n            }\n        }\n    },\n    {\n        // new or refreshed scenarios using metadata.expect \n        \"condition\": \"{{parameters.metadataExists}}\",\n        \"url\": \"/objects/{{parameters.object_id}}/records\",\n        \"method\": \"GET\",\n        \"qs\": {\n            \"filters\": \"{{buildFilters(parameters.filters, environment.timezone, parameters.match)}}\",\n            \"sort_field\": \"{{parameters.sort_field}}\",\n            \"sort_order\": \"{{parameters.sort_order}}\",\n            \"page\": 1,\n            \"rows_per_page\": \"{{min(parameters.limit, 1000)}}\"\n        },\n        \"body\": {},\n        \"headers\": {},\n        \"response\": {\n            \"error\": {\n                \"type\": \"DataError\",\n                \"message\": \"{{getErrorMessage(statusCode, body)}}\"\n            },\n            \"limit\": \"{{parameters.limit}}\",\n            \"output\": \"{{wrapMultipleChoiceRawInArray(getRecordOutput(item, parameters.mode), metadata.expect)}}\",\n            \"iterate\": \"{{body.records}}\"\n        },\n        \"pagination\": {\n            \"condition\": \"{{isPagination(body, parameters.limit)}}\",\n            \"qs\": {\n                \"page\": \"{{getPage(body)}}\"\n            }\n        }\n    }\n]",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Record ID"
        },
        "rpc://app%23knack@2/RecordInterface"
      ],
      "appVersion": 2,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": null,
      "accountName": "knack",
      "description": "Searches for a record.",
      "expectJsonc": "[\n    {\n        \"name\": \"object_id\",\n        \"type\": \"select\",\n        \"label\": \"Object\",\n        \"required\": true,\n        \"options\": {\n            \"store\": \"rpc://Objects\",\n            \"nested\": [\n                {\n                    \"name\": \"filters\",\n                    \"label\": \"Filter\",\n                    \"type\": \"filter\",\n                    \"required\": false,\n                    \"grouped\": false,\n                    \"help\": \"For column type *Connection*, enter the ID of the connected record.\",\n                    \"options\": {\n                        \"logic\": \"and\",\n                        \"store\": \"rpc://Fields\",\n                        \"operators\": [\n                            {\n                                \"label\": \"Common\",\n                                \"options\": [\n                                    {\n                                        \"label\": \"Contains\",\n                                        \"value\": \"text:contains\"\n                                    },\n                                    {\n                                        \"label\": \"Does not contain\",\n                                        \"value\": \"text:does not contain\"\n                                    },\n                                    {\n                                        \"label\": \"Is\",\n                                        \"value\": \"text:is\"\n                                    },\n                                    {\n                                        \"label\": \"Is not\",\n                                        \"value\": \"text:is not\"\n                                    },\n                                    {\n                                        \"label\": \"Starts with\",\n                                        \"value\": \"text:starts with\"\n                                    },\n                                    {\n                                        \"label\": \"Ends with\",\n                                        \"value\": \"text:ends with\"\n                                    },\n                                    {\n                                        \"label\": \"Is blank\",\n                                        \"value\": \"text:is blank\"\n                                    },\n                                    {\n                                        \"label\": \"Is not blank\",\n                                        \"value\": \"text:is not blank\"\n                                    },\n                                    {\n                                        \"label\": \"Is near (address)\",\n                                        \"value\": \"text:near\"\n                                    },\n                                    {\n                                        \"label\": \"Is any\",\n                                        \"value\": \"text:is any\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"label\": \"Number\",\n                                \"options\": [\n                                    {\n                                        \"label\": \"Is\",\n                                        \"value\": \"number:is\"\n                                    },\n                                    {\n                                        \"label\": \"Is not\",\n                                        \"value\": \"number:is not\"\n                                    },\n                                    {\n                                        \"label\": \"Higher than\",\n                                        \"value\": \"number:higher than\"\n                                    },\n                                    {\n                                        \"label\": \"Lower than\",\n                                        \"value\": \"number:lower than\"\n                                    },\n                                    {\n                                        \"label\": \"Is blank\",\n                                        \"value\": \"number:is blank\"\n                                    },\n                                    {\n                                        \"label\": \"Is not blank\",\n                                        \"value\": \"number:is not blank\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"label\": \"Date and time\",\n                                \"options\": [\n                                    {\n                                        \"label\": \"Is\",\n                                        \"value\": \"date:is\"\n                                    },\n                                    {\n                                        \"label\": \"Is not\",\n                                        \"value\": \"date:is not\"\n                                    },\n                                    {\n                                        \"label\": \"Is blank\",\n                                        \"value\": \"date:is blank\"\n                                    },\n                                    {\n                                        \"label\": \"Is not blank\",\n                                        \"value\": \"date:is not blank\"\n                                    },\n                                    {\n                                        \"label\": \"Is before\",\n                                        \"value\": \"date:is before\"\n                                    },\n                                    {\n                                        \"label\": \"Is after\",\n                                        \"value\": \"date:is after\"\n                                    },\n                                    {\n                                        \"label\": \"Is today\",\n                                        \"value\": \"date:is today\"\n                                    },\n                                    {\n                                        \"label\": \"Is today or before\",\n                                        \"value\": \"date:is today or before\"\n                                    },\n                                    {\n                                        \"label\": \"Is today or after\",\n                                        \"value\": \"date:is today or after\"\n                                    },\n                                    {\n                                        \"label\": \"Is before today\",\n                                        \"value\": \"date:is before today\"\n                                    },\n                                    {\n                                        \"label\": \"Is after today\",\n                                        \"value\": \"date:is after today\"\n                                    },\n                                    {\n                                        \"label\": \"Is before current time\",\n                                        \"value\": \"date:is before current time\"\n                                    },\n                                    {\n                                        \"label\": \"Is after current time\",\n                                        \"value\": \"date:is after current time\"\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                },\n                {\n                    \"name\": \"match\",\n                    \"label\": \"Match Filters\",\n                    \"type\": \"select\",\n                    \"options\": [\n                        {\n                            \"label\": \"Match All Filters\",\n                            \"value\": \"and\",\n                            \"default\": true\n                        },\n                        {\n                            \"label\": \"Match Any Filter\",\n                            \"value\": \"or\"\n                        }\n                    ],\n                    \"help\": \"Select if the search should match all the filters (as 'and') or only some of the filters (as 'or'). Default is 'and' - matching all filters.\"\n                },\n                {\n                    \"name\": \"sort_field\",\n                    \"label\": \"Sort field\",\n                    \"type\": \"select\",\n                    \"required\": false,\n                    \"options\": {\n                        \"store\": \"rpc://Fields\",\n                        \"nested\": [\n                            {\n                                \"name\": \"sort_order\",\n                                \"label\": \"Sort order\",\n                                \"type\": \"select\",\n                                \"required\": true,\n                                \"options\": [\n                                    {\n                                        \"label\": \"ASC\",\n                                        \"value\": \"asc\"\n                                    },\n                                    {\n                                        \"label\": \"DESC\",\n                                        \"value\": \"desc\"\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                },\n                \"rpc://RecordExpect?type=hidden\"\n            ]\n        }\n    },\n    {\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 100,\n        \"required\": true\n    },\n    {\n        \"name\": \"mode\",\n        \"type\": \"select\",\n        \"label\": \"Returned data\",\n        \"required\": false,\n        \"advanced\": true,\n        \"options\": [\n            {\n                \"value\": \"both\",\n                \"label\": \"formatted and raw\"\n            },\n            {\n                \"value\": \"formatted\",\n                \"label\": \"only formatted\"\n            },\n            {\n                \"value\": \"raw\",\n                \"label\": \"only raw\"\n            }\n        ]\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Record ID\"\n\t},\n\t\"rpc://RecordInterface\"\n]",
      "parametersJsonc": null,
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    }
  },
  "approved": true,
  "authorId": 671322,
  "billable": true,
  "inReview": false,
  "keywords": null,
  "language": "en",
  "_accounts": {
    "knack": {
      "api": {
        "log": {
          "sanitize": [
            "request.headers.X-Knack-Application-Id",
            "request.headers.X-Knack-REST-API-Key"
          ]
        },
        "url": "https://{{ifempty(ifempty(connection.apiServer, connection.appServer), 'api.knack.com')}}/v1/objects",
        "headers": {
          "X-Knack-REST-API-Key": "{{connection.apiKey}}",
          "X-Knack-Application-Id": "{{connection.applicationId}}"
        }
      },
      "rev": 8,
      "name": "knack",
      "type": "basic",
      "label": "Knack",
      "scope": [],
      "scopes": {},
      "aliasTo": null,
      "appName": "knack",
      "install": {},
      "apiJsonc": "{\n\t\"url\": \"https://{{ifempty(ifempty(connection.apiServer, connection.appServer), 'api.knack.com')}}/v1/objects\",\n\t\"log\": {\n\t\t\"sanitize\": [\"request.headers.X-Knack-Application-Id\", \"request.headers.X-Knack-REST-API-Key\"]\n\t},\n\t\"headers\": {\n        \"X-Knack-Application-Id\": \"{{connection.applicationId}}\",\n        \"X-Knack-REST-API-Key\": \"{{connection.apiKey}}\"\n     }\n}",
      "authorId": 671322,
      "appVersion": 2,
      "parameters": [
        {
          "name": "applicationId",
          "type": "text",
          "label": "Application ID",
          "editable": true,
          "required": true
        },
        {
          "name": "apiKey",
          "type": "password",
          "label": "API key",
          "editable": true,
          "required": true
        },
        {
          "help": "Default server is 'api.knack.com'.",
          "name": "apiServer",
          "type": "text",
          "label": "Private API server domain",
          "advanced": true,
          "required": false
        }
      ],
      "scopeJsonc": null,
      "installSpec": [],
      "scopesJsonc": null,
      "installJsonc": null,
      "depAccountName": null,
      "depAccountScope": null,
      "parametersJsonc": "[\n\t{\n        \"name\": \"applicationId\",\n        \"label\": \"Application ID\",\n        \"type\": \"text\",\n        \"required\": true,\n        \"editable\": true\n     },\n     {\n\t\t\"name\": \"apiKey\",\n        \"label\": \"API key\",\n        \"type\": \"password\",\n        \"required\": true,\n        \"editable\": true\n     },\n     {\n\t\t\"name\": \"apiServer\",\n        \"label\": \"Private API server domain\",\n        \"type\": \"text\",\n        \"help\": \"Default server is 'api.knack.com'.\",\n        \"required\": false,\n        \"advanced\": true\n     }\n]",
      "installSpecJsonc": null,
      "connectedSystemName": null,
      "depAccountScopeJsonc": null
    }
  },
  "baseJsonc": "{\n\t\"baseUrl\": \"https://{{ifempty(ifempty(connection.apiServer, connection.appServer), 'api.knack.com')}}/v1\",\n\t\"log\": {\n\t\t\"sanitize\": [\"request.headers.X-Knack-Application-Id\", \"request.headers.X-Knack-REST-API-Key\"]\n\t},\n\t\"timeout\": 120000,\n\t\"gzip\": true,\n\t\"headers\": {\n        \"X-Knack-Application-Id\": \"{{connection.applicationId}}\",\n        \"X-Knack-REST-API-Key\": \"{{connection.apiKey}}\"\n     }\n}",
  "countries": null,
  "_functions": {
    "getId": {
      "rev": 12,
      "code": "function getId(item, parameters) {\n  if (\n    item &&\n    parameters.autoincrement_id &&\n    item[parameters.autoincrement_id]\n  ) {\n    return item[parameters.autoincrement_id];\n  } else {\n    return null;\n  }\n}\n",
      "name": "getId",
      "test": "const validInputItem = {\r\n  id: '65747c40977ffd002707b388',\r\n  account_status: 'active',\r\n  approval_status: 'approved',\r\n  utility_key: '1702132800547237efko',\r\n  profile_keys: 'Business Owners',\r\n  profile_keys_raw: [\r\n    {\r\n      id: 'profile_4',\r\n      identifier: 'Business Owners'\r\n    }\r\n  ],\r\n  field_12: 'Some Account',\r\n  field_12_raw: {\r\n    first: 'Some',\r\n    middle: 'Random',\r\n    last: 'Account',\r\n    title: 'New Account',\r\n    full: 'Some Account'\r\n  },\r\n  field_13: '',\r\n  field_13_raw: '',\r\n  field_14: '*********',\r\n  field_14_raw: '**********',\r\n  field_32: '<span class=\"profile_4\">Business Owners</span>',\r\n  field_32_raw: ['profile_4'],\r\n  field_33: 'active',\r\n  field_33_raw: 'active',\r\n  field_42: 8,\r\n  field_42_raw: 8\r\n};\r\n\r\nconst validInputParameters = {\r\n  object_id: 'object_2',\r\n  mode: null,\r\n  limit: 15,\r\n  autoincrement_id: 'field_42'\r\n};\r\n\r\nit('should return valid output for valid item and valid parameters', () => {\r\n  assert.deepEqual(8, getId(validInputItem, validInputParameters));\r\n});\r\n\r\nit('should return null if item or parameters are not valid', () => {\r\n  assert.deepEqual(null, getId(null, null));\r\n});\r\n",
      "appName": "knack",
      "arguments": "(item, parameters)",
      "appVersion": 2
    },
    "getPage": {
      "rev": 2,
      "code": "function getPage(body) {\n\treturn Number(body.current_page) + 1\n}",
      "name": "getPage",
      "test": null,
      "appName": "knack",
      "arguments": "(body)",
      "appVersion": 2
    },
    "buildFilters": {
      "rev": 3,
      "code": "function buildFilters(filters, timezone, match) {\n  if(!filters) return;\n\tconst rules = []\n    ;(filters || []).forEach(filter => {\n      // \"a\":\"Id\",\"b\":\"1\",\"o\":\"text:equals\"\n      filter.forEach(cond => {\n        const [, operator] = cond.o.split(':')\n        switch (cond.o) {\n          case 'text:is':\n          case 'text:is not':\n          case 'text:contains':\n          case 'text:does not contain':\n          case 'text:starts with':\n          case 'text:ends with':\n          case 'text:is any':\n          case 'text:near': {\n            rules.push({\n              field: cond.a,\n              operator,\n              value: cond.b\n            })\n            break\n          }\n\t\t  case 'number:is':\n          case 'number:is not':\n          case 'number:higher than':\n          case 'number:lower than':\n          case 'number:is blank':\n          case 'number:is not blank': {\n            rules.push({\n              field: cond.a,\n              operator,\n              value: cond.b\n            })\n            break\n          }\n          case 'text:is blank':\n          case 'text:is not blank':\n          case 'date:is blank':\n          case 'date:is not blank':\n          case 'date:is today':\n          case 'date:is today or before':\n          case 'date:is today or after':\n          case 'date:is before today':\n          case 'date:is after today':\n          case 'date:is before current time':\n          case 'date:is after current time': {\n            rules.push({\n              field: cond.a,\n              operator\n            })\n            break\n          }\n          case 'date:is':\n          case 'date:is not':\n          case 'date:is before':\n          case 'date:is after': {\n\t\t  \trules.push({\n              field: cond.a,\n              operator,\n              value: cond.b\n            })\n            break\n          }\n        }\n      })\n    })\n\treturn JSON.stringify({\n        match: match ? match: 'and',\n        rules\n    })\n}",
      "name": "buildFilters",
      "test": null,
      "appName": "knack",
      "arguments": "(filters, timezone, match)",
      "appVersion": 2
    },
    "isPagination": {
      "rev": 2,
      "code": "function isPagination(body, limit) {\n\t// limit mensi nez 1000, vse se nacte napoprve\n\tif (limit <= 1000) {\n\t\treturn false\n\t}\n\tif (!body.records) {\n\t\treturn false\n\t}\n\t// na strance neni 1000 zaznamu, nema smysl pokracovat\n\t// if (body.records.length < 1000) {\n\t//\treturn false\n\t// }\n\tconst current = Number(body.current_page)\n\tconst total = Number(body.total_pages)\n\t// pocet stranek je vice nez je aktualni stranka\n\treturn total > current\n\t\n}",
      "name": "isPagination",
      "test": null,
      "appName": "knack",
      "arguments": "(body, limit)",
      "appVersion": 2
    },
    "getRepeatSpec": {
      "rev": 2,
      "code": "function getRepeatSpec() {\n\treturn [\n\t\t{\n\t\t\tlabel: 'Frequency',\n\t\t\tname: 'frequency',\n\t\t\ttype: 'select',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'daily',\n\t\t\t\t\tvalue: 'daily'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'weekly',\n\t\t\t\t\tvalue: 'weekly'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'monthly',\n\t\t\t\t\tvalue: 'monthly'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'yearly',\n\t\t\t\t\tvalue: 'yearly'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tlabel: 'Interval',\n\t\t\tname: 'interval',\n\t\t\ttype: 'number'\n\t\t},\n\t\t/*\n\t\t{\n\t\t\tlabel: 'Monday',\n\t\t\tname: 'MO',\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t{\n\t\t\tlabel: 'Tuesday',\n\t\t\tname: 'TU',\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t{\n\t\t\tlabel: 'Wednesday',\n\t\t\tname: 'WE',\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t{\n\t\t\tlabel: 'Thursday',\n\t\t\tname: 'TH',\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t{\n\t\t\tlabel: 'Friday',\n\t\t\tname: 'FR',\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t{\n\t\t\tlabel: 'Saturday',\n\t\t\tname: 'SA',\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t{\n\t\t\tlabel: 'Sunday',\n\t\t\tname: 'SU',\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t*/\n\t\t{\n\t\t\tlabel: 'Start date',\n\t\t\tname: 'start_date',\n\t\t\ttype: 'text',\n\t\t\thelp: 'Use the exact date format as in your Knack app settings for this field.'\n\t\t},\n\t\t{\n\t\t\tlabel: 'Ends',\n\t\t\tname: 'endson',\n\t\t\ttype: 'select',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Never',\n\t\t\t\t\tvalue: 'never'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'After X occurrences',\n\t\t\t\t\tvalue: 'limit',\n\t\t\t\t\tnested: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Count',\n\t\t\t\t\t\t\tname: 'end_count',\n\t\t\t\t\t\t\ttype: 'number'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Date',\n\t\t\t\t\tvalue: 'date',\n\t\t\t\t\tnested: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'End date',\n\t\t\t\t\t\t\tname: 'end_date',\n\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\thelp: 'Use the exact date format as in your Knack app settings for this field.'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}",
      "name": "getRepeatSpec",
      "test": null,
      "appName": "knack",
      "arguments": "()",
      "appVersion": 2
    },
    "getRecordInput": {
      "rev": 2,
      "code": "function getRecordInput(parameters) {\n\t// backward compatibility, dates\n\tconst dates = {};\n\tObject.keys(parameters)\n\t\t.filter(param => param.endsWith('_datetype') && parameters[param] !== 'simple')\n\t\t.forEach(param => {\n\t\t\tdates[param.substr(0, param.length - '_datetype'.length)] = parameters[param]\n\t\t});\n\n\tconst body = {};\n\tObject.keys(parameters)\n\t\t.filter(param => param !== 'object_id' && !param.endsWith('_datetype'))\n\t\t.forEach(param => {\n\t\t\tconst value = parameters[param];\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\t// if multiple select is a one selection send it as a string\n\t\t\t\tbody[param] = value.length == 1 ? value.pop() : value;\n\t\t\t\t//body[param] = value;\n\n\t\t\t} else if (value !== null && typeof value === 'object' && Object.keys(value).length === 0) {\n\t\t\t\t// remove empty object from request\n\t\t\t} else if (dates[param]) {\n\t\t\t\tif (dates[param] === 'fromTo') {\n\t\t\t\t\tbody[param] = {\n\t\t\t\t\t\tdate: value.from,\n\t\t\t\t\t\tto: {\n\t\t\t\t\t\t\tdate: value.to\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t} else if (dates[param] === 'repeat') {\n\t\t\t\t\tconst spec = {\n\t\t\t\t\t\tdate: value.from\n\t\t\t\t\t};\n\t\t\t\t\tif (value.to) {\n\t\t\t\t\t\tspec.to = value.to;\n\t\t\t\t\t}\n\t\t\t\t\tif (value.repeat) {\n\t\t\t\t\t\tspec.repeat = value.repeat;\n\t\t\t\t\t}\n\t\t\t\t\tbody[param] = spec;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbody[param] = value;\n\t\t\t}\n\t\t});\n\n\treturn body;\n}",
      "name": "getRecordInput",
      "test": null,
      "appName": "knack",
      "arguments": "(parameters)",
      "appVersion": 2
    },
    "getErrorMessage": {
      "rev": 2,
      "code": "function getErrorMessage(code, body) {\n\tlet message = null\n\tif (!body) {\n\t\tmessage = 'Error'\n\t} else if (typeof body === 'string') {\n\t\tmessage = body\n\t} else if (typeof body === 'object') {\n\t\tif (body.error) {\n\t\t\tmessage = body.error\n\t\t} else {\n\t\t\tmessage = JSON.stringify(body)\n\t\t}\n\t}\n\treturn `${code}: ${message}`\n}",
      "name": "getErrorMessage",
      "test": null,
      "appName": "knack",
      "arguments": "(code, body)",
      "appVersion": 2
    },
    "getRecordExpect": {
      "rev": 22,
      "code": "function getRecordExpect(fields, type) {\n\tconst intf = [];\n\t(fields || []).filter(field => field.type !== 'auto_increment').forEach(field => {\n\t\tconst raw = {\n\t\t\tlabel: field.label,\n\t\t\tname: field.key,\n\t\t\ttype: 'text'\n\t\t};\n\t\tswitch (field.type) {\n\t\t\tcase 'user_roles':\n\t\t\t\traw.type = 'select';\n\t\t\t\traw.multiple = true;\n\t\t\t\traw.options = (Object.keys(field.choices) || []).map(choice => ({ label: field.choices[choice], value: choice }));\n\t\t\t\tbreak;\n\t\t\tcase 'multiple_choice': {\n\t\t\t\traw.type = 'select';\n\t\t\t\traw.multiple = true;\n\t\t\t\traw.help = 'Can be a single or multiple select, depending on your Knack settings.';\n\t\t\t\traw.options = (field.choices || []).map(choice => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: choice,\n\t\t\t\t\t\tvalue: choice\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'boolean': {\n\t\t\t\traw.type = 'boolean';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'name': {\n\t\t\t\traw.type = 'collection';\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Title', name: 'title', type: 'text' },\n\t\t\t\t\t{ label: 'First', name: 'first', type: 'text' },\n\t\t\t\t\t{ label: 'Middle', name: 'middle', type: 'text' },\n\t\t\t\t\t{ label: 'Last', name: 'last', type: 'text' }\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'link': {\n\t\t\t\traw.type = 'collection';\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Label', name: 'label', type: 'text' },\n\t\t\t\t\t{ label: 'URL', name: 'url', type: 'url' }\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'address': {\n\t\t\t\traw.type = 'collection';\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Longitude', name: 'longitude', type: 'text' },\n\t\t\t\t\t{ label: 'Latitude', name: 'latitude', type: 'text' },\n\t\t\t\t\t{ label: 'Zip', name: 'zip', type: 'text' },\n\t\t\t\t\t{ label: 'State', name: 'state', type: 'text' },\n\t\t\t\t\t{ label: 'City', name: 'city', type: 'text' },\n\t\t\t\t\t{ label: 'Street', name: 'street', type: 'text' },\n\t\t\t\t\t{ label: 'Street2', name: 'street2', type: 'text' },\n\t\t\t\t\t{ label: 'Country', name: 'country', type: 'text' }\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'email': {\n\t\t\t\t/*\n\t\t\t\traw.type = 'email'\n\t\t\t\tbreak\n\t\t\t\t*/\n\t\t\t\traw.type = 'collection';\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Label', name: 'label', type: 'text' },\n\t\t\t\t\t{ label: 'Email', name: 'email', type: 'email' }\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'image':\n\t\t\tcase 'file': {\n\t\t\t\traw.help = 'Use Upload a File module first and set the file ID here. ';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'connection': {\n\t\t\t\traw.type = 'array';\n\t\t\t\traw.help = 'Set the record IDs.';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'date_time': {\n\t\t\t\traw.type = 'select';\n\t\t\t\traw.label = `${raw.label} (type)`;\n\t\t\t\traw.name = `${raw.name}_datetype`;\n\t\t\t\traw.placeholder = 'simple';\n\t\t\t\traw.help = 'Select the date type depending on your Knack settings.'\n\t\t\t\traw.options = [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Simple date',\n\t\t\t\t\t\tvalue: 'simple',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tnested: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: field.label,\n\t\t\t\t\t\t\t\tname: field.key,\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\thelp: 'Use the exact date format as in your Knack app settings for this field.'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'From-to date',\n\t\t\t\t\t\tvalue: 'fromTo',\n\t\t\t\t\t\tnested: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: field.label,\n\t\t\t\t\t\t\t\tname: field.key,\n\t\t\t\t\t\t\t\ttype: 'collection',\n\t\t\t\t\t\t\t\tspec: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: 'From',\n\t\t\t\t\t\t\t\t\t\tname: 'from',\n\t\t\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\t\t\thelp: 'Use the exact date format as in your Knack app settings for this field.'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: 'To',\n\t\t\t\t\t\t\t\t\t\tname: 'to',\n\t\t\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\t\t\thelp: 'Use the exact date format as in your Knack app settings for this field.'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Repeat',\n\t\t\t\t\t\tvalue: 'repeat',\n\t\t\t\t\t\tnested: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: field.label,\n\t\t\t\t\t\t\t\tname: field.key,\n\t\t\t\t\t\t\t\ttype: 'collection',\n\t\t\t\t\t\t\t\tspec: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: 'From',\n\t\t\t\t\t\t\t\t\t\tname: 'from',\n\t\t\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\t\t\thelp: 'Use the exact date format as in your Knack app settings for this field.'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: 'To',\n\t\t\t\t\t\t\t\t\t\tname: 'to',\n\t\t\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\t\t\thelp: 'Use the exact date format as in your Knack app settings for this field.'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: 'Repeat specification',\n\t\t\t\t\t\t\t\t\t\tname: 'repeat',\n\t\t\t\t\t\t\t\t\t\ttype: 'collection',\n\t\t\t\t\t\t\t\t\t\tspec: iml.getRepeatSpec()\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tintf.push(raw);\n\t});\n\t// for Get, Search and Watch module return only multichoice parameters and set them hidden\n\t// used in function wrapMultipleChoiceRawInArray\n\tif (type === 'hidden') {\n\t\treturn intf.filter(item => item.multiple).map(item => ({\n\t\t\tname: item.name,\n\t\t\ttype: 'hidden',\n\t\t\tdefault:true\n\t\t})).concat([{ \"name\": \"metadataExists\", \"type\": \"hidden\", \"default\":true }]);\n\t}\n\n\treturn intf;\n}\n",
      "name": "getRecordExpect",
      "test": "it('should return mappable parameters for Create/Update module', () => {\r\n    const fields = [\r\n        {\r\n            \"label\": \"Name\",\r\n            \"key\": \"field_39\",\r\n            \"required\": false,\r\n            \"type\": \"name\"\r\n        },\r\n        {\r\n            \"label\": \"Email\",\r\n            \"key\": \"field_40\",\r\n            \"required\": false,\r\n            \"type\": \"email\"\r\n        },\r\n        {\r\n            \"label\": \"Password\",\r\n            \"key\": \"field_41\",\r\n            \"required\": false,\r\n            \"type\": \"password\"\r\n        },\r\n        {\r\n            \"label\": \"User Status\",\r\n            \"key\": \"field_42\",\r\n            \"required\": false,\r\n            \"type\": \"multiple_choice\",\r\n            \"choices\": [\r\n                \"active\",\r\n                \"inactive\",\r\n                \"pending approval\"\r\n            ]\r\n        },\r\n        {\r\n            \"label\": \"User Roles\",\r\n            \"key\": \"field_43\",\r\n            \"required\": false,\r\n            \"type\": \"user_roles\",\r\n            \"choices\": {\r\n                \"profile_7\": \"Admin\",\r\n                \"profile_8\": \"Support Agent\",\r\n                \"profile_9\": \"Employee\"\r\n            }\r\n        },\r\n        {\r\n            \"label\": \"Department\",\r\n            \"key\": \"field_45\",\r\n            \"required\": false,\r\n            \"type\": \"connection\",\r\n            \"relationship\": {\r\n                \"has\": \"one\",\r\n                \"object\": \"object_5\",\r\n                \"belongs_to\": \"many\"\r\n            }\r\n        }\r\n    ];\r\n\r\n    const output = [\r\n        {\r\n            \"label\": \"Name\",\r\n            \"name\": \"field_39\",\r\n            \"type\": \"collection\",\r\n            \"spec\": [\r\n                {\r\n                    \"label\": \"Title\",\r\n                    \"name\": \"title\",\r\n                    \"type\": \"text\"\r\n                },\r\n                {\r\n                    \"label\": \"First\",\r\n                    \"name\": \"first\",\r\n                    \"type\": \"text\"\r\n                },\r\n                {\r\n                    \"label\": \"Middle\",\r\n                    \"name\": \"middle\",\r\n                    \"type\": \"text\"\r\n                },\r\n                {\r\n                    \"label\": \"Last\",\r\n                    \"name\": \"last\",\r\n                    \"type\": \"text\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"label\": \"Email\",\r\n            \"name\": \"field_40\",\r\n            \"type\": \"collection\",\r\n            \"spec\": [\r\n                {\r\n                    \"label\": \"Label\",\r\n                    \"name\": \"label\",\r\n                    \"type\": \"text\"\r\n                },\r\n                {\r\n                    \"label\": \"Email\",\r\n                    \"name\": \"email\",\r\n                    \"type\": \"email\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"label\": \"Password\",\r\n            \"name\": \"field_41\",\r\n            \"type\": \"text\"\r\n        },\r\n        {\r\n            \"label\": \"User Status\",\r\n            \"name\": \"field_42\",\r\n            \"type\": \"select\",\r\n            \"multiple\": true,\r\n            \"help\": \"Can be a single or multiple select, depending on your Knack settings.\",\r\n            \"options\": [\r\n                {\r\n                    \"label\": \"active\",\r\n                    \"value\": \"active\"\r\n                },\r\n                {\r\n                    \"label\": \"inactive\",\r\n                    \"value\": \"inactive\"\r\n                },\r\n                {\r\n                    \"label\": \"pending approval\",\r\n                    \"value\": \"pending approval\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"label\": \"User Roles\",\r\n            \"name\": \"field_43\",\r\n            \"type\": \"select\",\r\n            \"multiple\": true,\r\n            \"options\": [\r\n                {\r\n                    \"label\": \"Admin\",\r\n                    \"value\": \"profile_7\"\r\n                },\r\n                {\r\n                    \"label\": \"Support Agent\",\r\n                    \"value\": \"profile_8\"\r\n                },\r\n                {\r\n                    \"label\": \"Employee\",\r\n                    \"value\": \"profile_9\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"label\": \"Department\",\r\n            \"name\": \"field_45\",\r\n            \"type\": \"array\",\r\n            \"help\": \"Set the record IDs.\"\r\n        }\r\n    ]\r\n    assert.deepStrictEqual(getRecordExpect(fields), output)\r\n});\r\n\r\nit('should return hidden mappable parameters for Search/Get/Watch module', () => {\r\n    const fields = [\r\n        {\r\n            \"label\": \"Password\",\r\n            \"key\": \"field_41\",\r\n            \"required\": false,\r\n            \"type\": \"password\"\r\n        },\r\n        {\r\n            \"label\": \"User Status\",\r\n            \"key\": \"field_42\",\r\n            \"required\": false,\r\n            \"type\": \"multiple_choice\",\r\n            \"choices\": [\r\n                \"active\",\r\n                \"inactive\",\r\n                \"pending approval\"\r\n            ]\r\n        },\r\n        {\r\n            \"label\": \"User Roles\",\r\n            \"key\": \"field_43\",\r\n            \"required\": false,\r\n            \"type\": \"user_roles\",\r\n            \"choices\": {\r\n                \"profile_7\": \"Admin\",\r\n                \"profile_8\": \"Support Agent\",\r\n                \"profile_9\": \"Employee\"\r\n            }\r\n        }\r\n    ];\r\n\r\n    const output = [\r\n        {\r\n            \"name\": \"field_42\",\r\n            \"type\": \"hidden\",\r\n            \"default\":true\r\n        },\r\n        {\r\n            \"name\": \"field_43\",\r\n            \"type\": \"hidden\",\r\n            \"default\":true\r\n        },\r\n        {\r\n            \"name\": \"metadataExists\",\r\n            \"type\": \"hidden\",\r\n            \"default\": true\r\n        }\r\n\r\n    ]\r\n    assert.deepStrictEqual(getRecordExpect(fields, 'hidden'), output)\r\n});\r\n\r\nit('should return default hidden parameter for empty input in Search/Get/Watch module', () => {\r\n    assert.deepStrictEqual(getRecordExpect(undefined, 'hidden'), [{ \"name\": \"metadataExists\", \"type\": \"hidden\", \"default\": true }])\r\n});\r\n\r\nit('should return empty array for empty input in Create/Update module', () => {\r\n    assert.deepStrictEqual(getRecordExpect(undefined), [])\r\n});\r\n\r\n",
      "appName": "knack",
      "arguments": "(fields, type)",
      "appVersion": 2
    },
    "getRecordOutput": {
      "rev": 14,
      "code": "function getRecordOutput(body, mode = 'both') {\n  if (typeof body !== 'object')\n    throw TypeError('\"body\" is expected to be an object.');\n  if (typeof mode !== 'string')\n    throw TypeError('\"mode\" is expected to be a string.');\n\n  return Object.entries(body).reduce((acc, [key, value]) => {\n    if (key.startsWith('field_')) {\n      const valueToReturn =\n        typeof value === 'string' && value === '' ? null : value;\n\n      if (mode === 'raw' && !key.endsWith('_raw')) {\n        return acc;\n      }\n      if (mode === 'formatted' && key.endsWith('_raw')) {\n        return acc;\n      }\n      return { ...acc, [key]: valueToReturn };\n    }\n\n    // leave this condition after refactoring just in case it was placed here intentionally\n    // and some of the fields that don't meet the conditions should be skipped\n    if (key === 'id') {\n      return { ...acc, [key]: value };\n    }\n\n    return acc;\n  }, {});\n}\n",
      "name": "getRecordOutput",
      "test": "it('should throw an error if \"body\" is not an object', () => {\n    assert.throws(() => {\n        getRecordOutput('not an object'),\n            TypeError,\n            '\"body\" is expected to be an object.';\n    });\n});\n\nit('should thrown an error if \"mode\" is not a string', () => {\n    assert.throws(() => {\n        getRecordOutput({}, 123),\n            TypeError,\n            '\"mode\" is expected to be a string.';\n    });\n});\n\nconst validBodyInput = {\n    id: '65019d4e1630850027182f7c',\n    field_1: '09/14/2023',\n    field_1_raw: {\n        date: '09/14/2023',\n        date_formatted: '09/14/2023',\n        hours: '12',\n        minutes: '00',\n        am_pm: 'AM',\n        unix_timestamp: 1694649600000,\n        iso_timestamp: '2023-09-14T00:00:00.000Z',\n        timestamp: '09/14/2023 12:00 am',\n        time: 720,\n    },\n    field_2: 'short text1 value',\n    field_2_raw: 'short text1 value',\n    field_3: '$150.00',\n    field_3_raw: '150.00',\n    field_4: 'street address 1<br />street address 2<br />city, province 12345',\n    field_4_raw: {\n        street: 'street address 1',\n        street2: 'street address 2',\n        city: 'city',\n        state: 'province',\n        zip: '12345',\n        country: null,\n        longitude: null,\n        latitude: null,\n        full: 'street address 1 street address 2 city, province 12345',\n    },\n};\n\nconst validModes = {\n    both: 'both',\n    raw: 'raw',\n    formatted: 'formatted',\n};\n\nit('should not throw an error if valid arguments are provided', () => {\n    assert.doesNotThrow(() => {\n        getRecordOutput(validBodyInput, validModes.both);\n        getRecordOutput(validBodyInput, validModes.raw);\n        getRecordOutput(validBodyInput, validModes.formatted);\n    });\n});\n\nconst bothModeOutput = {\n    id: '65019d4e1630850027182f7c',\n    field_1: '09/14/2023',\n    field_1_raw: {\n        date: '09/14/2023',\n        date_formatted: '09/14/2023',\n        hours: '12',\n        minutes: '00',\n        am_pm: 'AM',\n        unix_timestamp: 1694649600000,\n        iso_timestamp: '2023-09-14T00:00:00.000Z',\n        timestamp: '09/14/2023 12:00 am',\n        time: 720,\n    },\n    field_2: 'short text1 value',\n    field_2_raw: 'short text1 value',\n    field_3: '$150.00',\n    field_3_raw: '150.00',\n    field_4: 'street address 1<br />street address 2<br />city, province 12345',\n    field_4_raw: {\n        street: 'street address 1',\n        street2: 'street address 2',\n        city: 'city',\n        state: 'province',\n        zip: '12345',\n        country: null,\n        longitude: null,\n        latitude: null,\n        full: 'street address 1 street address 2 city, province 12345',\n    },\n};\n\nconst rawModeOutput = {\n    id: '65019d4e1630850027182f7c',\n    field_1_raw: {\n        date: '09/14/2023',\n        date_formatted: '09/14/2023',\n        hours: '12',\n        minutes: '00',\n        am_pm: 'AM',\n        unix_timestamp: 1694649600000,\n        iso_timestamp: '2023-09-14T00:00:00.000Z',\n        timestamp: '09/14/2023 12:00 am',\n        time: 720,\n    },\n    field_2_raw: 'short text1 value',\n    field_3_raw: '150.00',\n    field_4_raw: {\n        street: 'street address 1',\n        street2: 'street address 2',\n        city: 'city',\n        state: 'province',\n        zip: '12345',\n        country: null,\n        longitude: null,\n        latitude: null,\n        full: 'street address 1 street address 2 city, province 12345',\n    },\n};\n\nconst formattedModeOutput = {\n    id: '65019d4e1630850027182f7c',\n    field_1: '09/14/2023',\n    field_2: 'short text1 value',\n    field_3: '$150.00',\n    field_4: 'street address 1<br />street address 2<br />city, province 12345',\n};\n\nit('should return valid outputs for each of the modes when valid input is provided', () => {\n    const bothModeFuncRes = getRecordOutput(validBodyInput, validModes.both);\n    const rawModeFuncRes = getRecordOutput(validBodyInput, validModes.raw);\n    const formattedModeFuncRes = getRecordOutput(\n        validBodyInput,\n        validModes.formatted\n    );\n\n    assert.deepEqual(bothModeOutput, bothModeFuncRes);\n    assert.deepEqual(rawModeOutput, rawModeFuncRes);\n    assert.deepEqual(formattedModeOutput, formattedModeFuncRes);\n});\n\nit('should return valid outputs for \"both\" mode if \"mode\" argument is not provided', () => {\n    const bothModeFuncRes = getRecordOutput(validBodyInput);\n\n    assert.deepEqual(bothModeOutput, bothModeFuncRes);\n});\n",
      "appName": "knack",
      "arguments": "(body, mode = 'both')",
      "appVersion": 2
    },
    "getFormInterface": {
      "rev": 2,
      "code": "function getFormInterface(body) {\n// author KB\n// not used\n// intended for dynamic mapping of the form fields for the webhook interface, but the endpoint is not reliable\n    let spec = [];\n\n    body.forEach(e => {\n        let field = {};\n        field.label = e.label;\n        field.name = e.key;\n        field.type = 'text';\n\n        spec.push(field)\n    });\n\n    const out = [\n        {\n            \"name\": \"id\",\n            \"type\": \"text\",\n            \"label\": \"Form Key\"\n        },\n        {\n            \"name\": \"fields\",\n            \"type\": \"collection\",\n            \"label\": \"Form Fields\",\n            \"spec\": spec\n        }\n    ]\n    return out;\n}",
      "name": "getFormInterface",
      "test": null,
      "appName": "knack",
      "arguments": "(body)",
      "appVersion": 2
    },
    "getRecordInterface": {
      "rev": 3,
      "code": "function getRecordInterface(fields, mode) {\n\tconst TYPE_DATE = [\n\t\t{ label: 'Date', name: 'date', type: 'text' },\n\t\t{ label: 'Date formatted', name: 'date_formatted', type: 'text' },\n\t\t{ label: 'Hours', name: 'hours', type: 'text' },\n\t\t{ label: 'Minutes', name: 'minutes', type: 'text' },\n\t\t{ label: 'AM/PM', name: 'am_pm', type: 'text' },\n\t\t{ label: 'Unix timestamp', name: 'unix_timestamp', type: 'text' },\n\t\t{ label: 'ISO timestamp', name: 'iso_timestamp', type: 'date' },\n\t\t{ label: 'Timestamp', name: 'timestamp', type: 'text' },\n\t\t{ label: 'Time', name: 'time', type: 'text' }\n\t]\n\tconst TYPE_DATE_CPL = []\n\tTYPE_DATE_CPL.push(...TYPE_DATE)\n\tTYPE_DATE_CPL.push({ label: 'To', name: 'to', type: 'collection', spec: TYPE_DATE})\n\tTYPE_DATE_CPL.push({ label: 'Repeat', name: 'repeat', type: 'collection', spec: [\n\t\t{ label: 'Start date', name: 'start_date', type: 'text' },\n\t\t{ label: 'End date', name: 'end_date', type: 'text' },\n\t\t{ label: 'End timestamp', name: 'end_timestamp', type: 'number' },\n\t\t{ label: 'Frequency', name: 'frequency', type: 'text' },\n\t\t{ label: 'Interval', name: 'interval', type: 'number' },\n\t\t{ label: 'Ends', name: 'endson', type: 'text' },\n\t\t{ label: 'Count', name: 'end_count', type: 'text' },\n\t]})\n\t\n\tconst TYPE_FILE = [\n\t\t{ label: 'ID', name: 'id', type: 'text' },\n\t\t{ label: 'Application ID', name: 'application_id', type: 'text' },\n\t\t{ label: 'S3', name: 's3', type: 'boolean' },\n\t\t{ label: 'Type', name: 'type', type: 'text' },\n\t\t{ label: 'Filename', name: 'filename', type: 'text' },\n\t\t{ label: 'URL', name: 'url', type: 'url' },\n\t\t{ label: 'Thumb URL', name: 'thumb_url', type: 'url' },\n\t\t{ label: 'Size', name: 'size', type: 'number' },\n\t\t{ label: 'Field key', name: 'field_key', type: 'text' }\n\t]\n\tconst TYPE_TIMES = [\n\t\t{ label: 'From', name: 'from', type: 'collection', spec: TYPE_DATE },\n\t\t{ label: 'To', name: 'to', type: 'collection', spec: TYPE_DATE }\n\t]\n\n\tconst intf = []\n\t;(fields || []).forEach(field => {\n\t\tconst formated = {\n\t\t\tlabel: field.label,\n\t\t\tname: field.key,\n\t\t\ttype: 'text'\n\t\t}\n\t\tconst raw = {\n\t\t\tlabel: formated.label + ' (raw)',\n\t\t\tname: formated.name + '_raw',\n\t\t\ttype: 'text'\n\t\t}\n\t\tswitch (field.type) {\n\t\t\tcase 'multiple_choice': {\n\t\t\t\traw.type = 'array'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'boolean': {\n\t\t\t\traw.type = 'boolean'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'name': {\n\t\t\t\traw.type = 'collection'\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Title', name: 'title', type: 'text' },\n\t\t\t\t\t{ label: 'First', name: 'first', type: 'text' },\n\t\t\t\t\t{ label: 'Midle', name: 'midle', type: 'text' },\n\t\t\t\t\t{ label: 'Last', name: 'last', type: 'text' }\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'link': {\n\t\t\t\traw.type = 'collection'\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Label', name: 'label', type: 'text' },\n\t\t\t\t\t{ label: 'URL', name: 'url', type: 'url' }\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'signature': {\n\t\t\t\traw.type = 'collection'\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Base30', name: 'base30', type: 'text' },\n\t\t\t\t\t{ label: 'SVG', name: 'svg', type: 'text' }\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'phone': {\n\t\t\t\traw.type = 'collection'\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Area', name: 'area', type: 'text' },\n\t\t\t\t\t{ label: 'Number', name: 'number', type: 'text' },\n\t\t\t\t\t{ label: 'Full', name: 'full', type: 'text' },\n\t\t\t\t\t{ label: 'Formatted', name: 'formatted', type: 'text' }\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'address': {\n\t\t\t\traw.type = 'collection'\n\t\t\t\traw.spec =  [\n\t\t\t\t\t{ label: 'Longitude', name: 'longitude', type: 'text' },\n\t\t\t\t\t{ label: 'Latitude', name: 'latitude', type: 'text' },\n\t\t\t\t\t{ label: 'Zip', name: 'zip', type: 'text' },\n\t\t\t\t\t{ label: 'State', name: 'state', type: 'text' },\n\t\t\t\t\t{ label: 'City', name: 'city', type: 'text' },\n\t\t\t\t\t{ label: 'Street', name: 'street', type: 'text' },\n\t\t\t\t\t{ label: 'Street2', name: 'street2', type: 'text' },\n\t\t\t\t\t{ label: 'Country', name: 'country', type: 'text' }\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'email': {\n\t\t\t\traw.type = 'collection'\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Label', name: 'label', type: 'text' },\n\t\t\t\t\t{ label: 'Email', name: 'email', type: 'email' }\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'image':\n\t\t\tcase 'file': {\n\t\t\t\traw.type = 'collection'\n\t\t\t\traw.spec =  TYPE_FILE\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'timer': {\n\t\t\t\traw.type = 'collection'\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'Total time', name: 'total_time', type: 'number' },\n\t\t\t\t\t{ label: 'Times', name: 'times', type: 'array', spec: TYPE_TIMES }\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'connection': {\n\t\t\t\traw.type = 'array'\n\t\t\t\traw.spec = [\n\t\t\t\t\t{ label: 'ID', name: 'id', type: 'text' },\n\t\t\t\t\t{ label: 'Identifier', name: 'identifier', type: 'text' }\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'date_time': {\n\t\t\t\traw.type = 'collection'\n\t\t\t\traw.spec = TYPE_DATE_CPL\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (!mode) {\n\t\t\tmode = 'both'\n\t\t}\n\t\tif (mode === 'both' || mode === 'formatted') {\n\t\t\tintf.push(formated)\n\t\t}\n\t\tif (mode === 'both' || mode === 'raw') {\n\t\t\tintf.push(raw)\n\t\t}\n\t}) \n\treturn intf\n}",
      "name": "getRecordInterface",
      "test": null,
      "appName": "knack",
      "arguments": "(fields, mode)",
      "appVersion": 2
    },
    "wrapMultipleChoiceRawInArray": {
      "rev": 9,
      "code": "function wrapMultipleChoiceRawInArray(input, fields) {\n\t/* \tconverts a single value of type text to an array in the output of most modules\n\t\tOnly for parameters that are \"type\": \"multiple_choice\" in the Knack API\n\t\t\"input\" is the response from the module's API (\"type\": \"multiple_choice\")\n\t\t\"fields\" can be response from Get Fields API or metadata.expect from Make module or collection of parameters from Watch Module\n\t\tmetadata.expect can have \"multiple\": true (Create/Update modules) or \"type\":\"hidden\" (Search/Get modules), \n\t\tupdated by: Kat Ben\n\t*/\n\n\tif (!input) return;\n\tif (typeof fields !== 'object') return\n\n\tfunction updateObj(obj, keys) {\n\t\tkeys.forEach(i => {\n\t\t\t// check if it's not array then make it array\n\t\t\t// all raw multiple_choise field should be array due to interface mapping\n\t\t\tif (!Array.isArray(obj[i])) {\n\t\t\t\tobj[i] = [obj[i]];\n\t\t\t}\n\t\t});\n\t\treturn obj;\n\t}\n\n\tlet arrayfields = [];\n\t//New Watch module has only collection of parameters\n\tif (!Array.isArray(fields)) {\n\t\tarrayfields = Object.keys(fields)\n\t\t\t.filter(item => /^field_\\d+?/.test(item))\n\t\t\t.map(item => item + '_raw');\n\t}\n\n\t//array of field keys/names that should be converted in old and new modules\n\tif (Array.isArray(fields)) {\n\t\tarrayfields = fields.filter(item => item.type == \"multiple_choice\" || item.multiple || item.type === 'hidden')\n\t\t\t.map(item => item.name ? item.name + '_raw' : item.key + '_raw');\n\t}\n\n\tconst matches = Object.keys(input).filter(i => arrayfields.includes(i));\n\treturn updateObj(input, matches);\n}",
      "name": "wrapMultipleChoiceRawInArray",
      "test": "it('should convert text to array for parameters with multiple:true',()=> {\r\n    // for Create/Update modules\r\n    const item = {\r\n        \"id\": \"67f808e6ff3c0602cec4d6c1\",\r\n        \"field_2_raw\": \"text\",\r\n        \"field_2\": \"text\",\r\n        \"field_3\": \"Resolved\",\r\n        \"field_3_raw\": \"Resolved\",\r\n        \"field_4\": \"Low, Medium\",\r\n        \"field_4_raw\": [\"Low\",\r\n                    \"Medium\"],\r\n        \"field_46\": \"\",\r\n        \"field_46_raw\": [],\r\n        \"field_48\": \"04/10/2025\",\r\n        \"field_48_raw\": {\r\n            \"date\": \"04/10/2025\",\r\n            \"date_formatted\": \"04/10/2025\"\r\n        }\r\n    };\r\n    //metadata.expect including helping parameters \r\n    const fields =[\r\n        {\r\n            \"name\": \"object_id\", //not part of the payload\r\n            \"type\": \"select\",\r\n            \"label\": \"Object\",\r\n            \"required\": true\r\n        },\r\n        {\r\n            \"name\": \"field_1\",\r\n            \"type\": \"text\",\r\n            \"label\": \"Title\"\r\n        },\r\n        {\r\n            \"name\": \"field_3\",\r\n            \"type\": \"select\",\r\n            \"label\": \"Status\",\r\n            \"multiple\": true,\r\n            \"validate\": {\r\n                \"enum\": [\r\n                    \"Open\",\r\n                    \"In Progress\",\r\n                    \"Resolved\",\r\n                    \"Closed\"\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"field_4\",\r\n            \"type\": \"select\",\r\n            \"label\": \"Priority\",\r\n            \"multiple\": true,\r\n            \"validate\": {\r\n                \"enum\": [\r\n                    \"Low\",\r\n                    \"Medium\",\r\n                    \"High\"\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"field_18\",\r\n            \"spec\": {\r\n                \"name\": \"value\",\r\n                \"type\": \"text\"\r\n            },\r\n            \"type\": \"array\",\r\n            \"label\": \"Category\"\r\n        },\r\n        {\r\n            \"name\": \"field_48_datetype\", //not part of the payload\r\n            \"type\": \"select\",\r\n            \"label\": \"Date (type)\",\r\n            \"validate\": {\r\n                \"enum\": [\r\n                    \"simple\",\r\n                    \"fromTo\",\r\n                    \"repeat\"\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"field_48\",\r\n            \"type\": \"text\",\r\n            \"label\": \"Date\"\r\n        }\r\n    ];\r\n    const output ={\r\n        \"id\": \"67f808e6ff3c0602cec4d6c1\",\r\n        \"field_2_raw\": \"text\",\r\n        \"field_2\": \"text\",\r\n        \"field_3\": \"Resolved\",\r\n        \"field_3_raw\": [\"Resolved\"],\r\n        \"field_4\": \"Low, Medium\",\r\n        \"field_4_raw\": [\"Low\",\r\n                    \"Medium\"],\r\n        \"field_46\": \"\",\r\n        \"field_46_raw\": [],\r\n        \"field_48\": \"04/10/2025\",\r\n        \"field_48_raw\": {\r\n            \"date\": \"04/10/2025\",\r\n            \"date_formatted\": \"04/10/2025\"\r\n        }\r\n    }\r\n\r\n    assert.deepStrictEqual(wrapMultipleChoiceRawInArray(item, fields),output); \r\n});\r\n\r\nit('should convert text to array for parameters type \"hidden\"',()=> {\r\n    //for Search/Get modules\r\n    const item = {\r\n        \"id\": \"67f808e6ff3c0602cec4d6c1\",\r\n        \"field_2_raw\": \"text\",\r\n        \"field_2\": \"text\",\r\n        \"field_3\": \"Resolved\",\r\n        \"field_3_raw\": \"Resolved\",\r\n        \"field_4\": \"Low, Medium\",\r\n        \"field_4_raw\": [\"Low\",\r\n                    \"Medium\"],\r\n        \"field_46\": \"\",\r\n        \"field_46_raw\": [],\r\n        \"field_48\": \"04/10/2025\",\r\n        \"field_48_raw\": {\r\n            \"date\": \"04/10/2025\",\r\n            \"date_formatted\": \"04/10/2025\"\r\n        }\r\n    };\r\n    //metadata.expect including helping parameters \r\n    const fields = [\r\n        {\r\n            \"name\": \"object_id\",\r\n            \"type\": \"select\",\r\n            \"label\": \"Object\",\r\n            \"required\": true\r\n        },\r\n        {\r\n            \"name\": \"record_id\",\r\n            \"type\": \"text\",\r\n            \"label\": \"Record ID\",\r\n            \"required\": true\r\n        },\r\n        {\r\n            \"name\": \"field_3\",\r\n            \"type\": \"hidden\"\r\n        },\r\n        {\r\n            \"name\": \"field_4\",\r\n            \"type\": \"hidden\"\r\n        },\r\n        {\r\n            \"name\": \"metadataExists\",\r\n            \"type\": \"hidden\",\r\n            \"default\":true\r\n        }\r\n    ]\r\n    const output ={\r\n        \"id\": \"67f808e6ff3c0602cec4d6c1\",\r\n        \"field_2_raw\": \"text\",\r\n        \"field_2\": \"text\",\r\n        \"field_3\": \"Resolved\",\r\n        \"field_3_raw\": [\"Resolved\"],\r\n        \"field_4\": \"Low, Medium\",\r\n        \"field_4_raw\": [\"Low\",\r\n                    \"Medium\"],\r\n        \"field_46\": \"\",\r\n        \"field_46_raw\": [],\r\n        \"field_48\": \"04/10/2025\",\r\n        \"field_48_raw\": {\r\n            \"date\": \"04/10/2025\",\r\n            \"date_formatted\": \"04/10/2025\"\r\n        }\r\n    }\r\n\r\n    assert.deepStrictEqual(wrapMultipleChoiceRawInArray(item, fields),output); \r\n});\r\n\r\nit('should convert text to array for collection of parameters in Watch module\" ',()=> {\r\n    const item = {\r\n        \"id\": \"67f808e6ff3c0602cec4d6c1\",\r\n        \"field_2_raw\": \"text\",\r\n        \"field_2\": \"text\",\r\n        \"field_3\": \"Resolved\",\r\n        \"field_3_raw\": \"Resolved\",\r\n        \"field_4\": \"Low, Medium\",\r\n        \"field_4_raw\": [\"Low\",\r\n                    \"Medium\"],\r\n        \"field_46\": \"\",\r\n        \"field_46_raw\": [],\r\n        \"field_48\": \"04/10/2025\",\r\n        \"field_48_raw\": {\r\n            \"date\": \"04/10/2025\",\r\n            \"date_formatted\": \"04/10/2025\"\r\n        }\r\n    };\r\n    //all parameters\r\n    const fields = {\r\n        \"page\": 1,\r\n        \"mode\": \"both\",\r\n        \"limit\": 2,\r\n        \"field_4\": true,\r\n        \"field_3\": true,\r\n        \"object_id\": \"object_5\",\r\n        \"metadataExists\": true,\r\n        \"autoincrement_id\": \"field_73\",\r\n        \"sort_field\": \"field_73\",\r\n        \"sort_order\": \"desc\",\r\n        \"rows_per_page\": 1000\r\n    };\r\n    const output ={\r\n        \"id\": \"67f808e6ff3c0602cec4d6c1\",\r\n        \"field_2_raw\": \"text\",\r\n        \"field_2\": \"text\",\r\n        \"field_3\": \"Resolved\",\r\n        \"field_3_raw\": [\"Resolved\"],\r\n        \"field_4\": \"Low, Medium\",\r\n        \"field_4_raw\": [\"Low\",\r\n                    \"Medium\"],\r\n        \"field_46\": \"\",\r\n        \"field_46_raw\": [],\r\n        \"field_48\": \"04/10/2025\",\r\n        \"field_48_raw\": {\r\n            \"date\": \"04/10/2025\",\r\n            \"date_formatted\": \"04/10/2025\"\r\n        }\r\n    }\r\n\r\n    assert.deepStrictEqual(wrapMultipleChoiceRawInArray(item, fields),output); \r\n});\r\n\r\nit('should convert text to array for parameters type \"multiple_choice\"',()=> {\r\n    //for old scenarios with additional call for metadata\r\n    const item = {\r\n        \"id\": \"67f808e6ff3c0602cec4d6c1\",\r\n        \"field_2_raw\": \"text\",\r\n        \"field_2\": \"text\",\r\n        \"field_3\": \"Resolved\",\r\n        \"field_3_raw\": \"Resolved\",\r\n        \"field_4\": \"Low, Medium\",\r\n        \"field_4_raw\": [\"Low\",\r\n                    \"Medium\"],\r\n        \"field_46\": \"\",\r\n        \"field_46_raw\": [],\r\n        \"field_48\": \"04/10/2025\",\r\n        \"field_48_raw\": {\r\n            \"date\": \"04/10/2025\",\r\n            \"date_formatted\": \"04/10/2025\"\r\n        }\r\n    };\r\n    //response from fields endpoint\r\n    const fields = [\r\n        {\r\n            \"label\": \"Title\",\r\n            \"key\": \"field_1\",\r\n            \"required\": false,\r\n            \"type\": \"short_text\"\r\n        },\r\n        {\r\n            \"label\": \"Description\",\r\n            \"key\": \"field_2\",\r\n            \"required\": false,\r\n            \"type\": \"rich_text\"\r\n        },\r\n        {\r\n            \"label\": \"Status\",\r\n            \"key\": \"field_3\",\r\n            \"required\": false,\r\n            \"type\": \"multiple_choice\",\r\n            \"choices\": [\r\n                \"Open\",\r\n                \"In Progress\",\r\n                \"Resolved\",\r\n                \"Closed\"\r\n            ]\r\n        },\r\n        {\r\n            \"label\": \"Priority\",\r\n            \"key\": \"field_4\",\r\n            \"required\": false,\r\n            \"type\": \"multiple_choice\",\r\n            \"choices\": [\r\n                \"Low\",\r\n                \"Medium\",\r\n                \"High\"\r\n            ]\r\n        }\r\n    ]; \r\n    const output ={\r\n        \"id\": \"67f808e6ff3c0602cec4d6c1\",\r\n        \"field_2_raw\": \"text\",\r\n        \"field_2\": \"text\",\r\n        \"field_3\": \"Resolved\",\r\n        \"field_3_raw\": [\"Resolved\"],\r\n        \"field_4\": \"Low, Medium\",\r\n        \"field_4_raw\": [\"Low\",\r\n                    \"Medium\"],\r\n        \"field_46\": \"\",\r\n        \"field_46_raw\": [],\r\n        \"field_48\": \"04/10/2025\",\r\n        \"field_48_raw\": {\r\n            \"date\": \"04/10/2025\",\r\n            \"date_formatted\": \"04/10/2025\"\r\n        }\r\n    }\r\n\r\n    assert.deepStrictEqual(wrapMultipleChoiceRawInArray(item, fields),output); \r\n});\r\n",
      "appName": "knack",
      "arguments": "(input, fields)",
      "appVersion": 2
    }
  },
  "approvedAt": "2022-08-31T14:34:55.322447+00:00",
  "categories": [],
  "opensource": false,
  "description": null,
  "iconColor32": null,
  "iconColor64": null,
  "installSpec": [],
  "inviteToken": "9acc248c11db366a800761f2dc2e902e",
  "versionFull": "2.2.10",
  "compiledName": "knack",
  "iconColor128": null,
  "iconColor256": null,
  "iconColor512": null,
  "installJsonc": null,
  "manifestVersion": 2,
  "compilationError": null,
  "installSpecJsonc": null
}
