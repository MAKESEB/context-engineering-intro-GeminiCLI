{
  "rev": 19,
  "base": {
    "log": {
      "sanitize": [
        "request.headers.Authorization"
      ]
    },
    "baseUrl": "{{ifempty(connection.privateCloudURL,'https://api.ninox.com/v1/teams/' + parameters.teamid )}}",
    "headers": {
      "Content-Type": "application/json",
      "Authorization": "Bearer {{connection.apiKey}}"
    },
    "timeout": "{{common.timeout || 40000}}",
    "response": {
      "error": {
        "404": {
          "type": "DataError",
          "message": "[{{statusCode}}] {{body.message || body}}"
        },
        "500": {
          "type": "UnknownError",
          "message": "[{{statusCode}}] {{body.message || body}}"
        },
        "type": "UnknownError",
        "message": "[{{statusCode}}] {{body.message || body}}"
      }
    }
  },
  "beta": false,
  "docs": null,
  "name": "ninox",
  "_rpcs": {
    "GetTeams": {
      "api": [
        {
          "url": "/",
          "method": "GET",
          "response": {
            "limit": 500,
            "output": {
              "label": "{{item.name}}",
              "value": "{{item.id}}"
            },
            "iterate": "{{body}}"
          },
          "condition": "{{if(connection.privateCloudURL === null, true, false)}}"
        },
        {
          "response": {
            "output": [
              {
                "label": "{{getConnectionTeamID(connection.privateCloudURL)}}",
                "value": "{{getConnectionTeamID(connection.privateCloudURL)}}"
              }
            ]
          },
          "condition": "{{ifempty(connection.privateCloudURL,false)}}"
        }
      ],
      "rev": 3,
      "name": "GetTeams",
      "label": "Get Teams",
      "appName": "ninox",
      "apiJsonc": "[\n\t{\n\t\t\"url\": \"/\",\n\t\t\"condition\": \"{{if(connection.privateCloudURL === null, true, false)}}\",\n\t\t\"method\": \"GET\",\n\t\t\"response\": {\n\t\t\t\"limit\": 500,\n\t\t\t\"iterate\": \"{{body}}\",\n\t\t\t\"output\": {\n\t\t\t\t\"label\": \"{{item.name}}\",\n\t\t\t\t\"value\": \"{{item.id}}\"\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\t\"condition\": \"{{ifempty(connection.privateCloudURL,false)}}\",\n\t\t\"response\": {\n\t\t\t\"output\": [\n\t\t\t\t{\n\t\t\t\t\t\"label\": \"{{getConnectionTeamID(connection.privateCloudURL)}}\",\n\t\t\t\t\t\"value\": \"{{getConnectionTeamID(connection.privateCloudURL)}}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\t\n\t}\n]",
      "appVersion": 1,
      "parameters": [],
      "accountName": "ninox",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "GetDatabases": {
      "api": {
        "url": "/databases",
        "method": "GET",
        "response": {
          "limit": 500,
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body}}"
        }
      },
      "rev": 3,
      "name": "GetDatabases",
      "label": "Get Databases",
      "appName": "ninox",
      "apiJsonc": "{\n\t\"url\": \"/databases\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"limit\": 500,\n\t\t\"iterate\": \"{{body}}\",\n\t\t\"output\": {\n\t\t\t\"label\": \"{{item.name}}\",\n\t\t\t\"value\": \"{{item.id}}\"\n\t\t}\n\t}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "ninox",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "GetRecordFiles": {
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files",
        "method": "GET",
        "response": {
          "limit": 500,
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.name}}"
          },
          "iterate": "{{body}}"
        }
      },
      "rev": 3,
      "name": "GetRecordFiles",
      "label": "Get Record Files",
      "appName": "ninox",
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"limit\": 500,\n\t\t\"iterate\": \"{{body}}\",\n\t\t\"output\": {\n\t\t\t\"label\": \"{{item.name}}\",\n\t\t\t\"value\": \"{{item.name}}\"\n\t\t}\n\t}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "ninox",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "GetDatabaseTables": {
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables",
        "method": "GET",
        "response": {
          "limit": 500,
          "output": {
            "label": "{{item.name}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body}}"
        }
      },
      "rev": 3,
      "name": "GetDatabaseTables",
      "label": "Get Database Tables",
      "appName": "ninox",
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"limit\": 500,\n\t\t\"iterate\": \"{{body}}\",\n\t\t\"output\": {\n\t\t\t\"label\": \"{{item.name}}\",\n\t\t\t\"value\": \"{{item.id}}\"\n\t\t}\n\t}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "ninox",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "GetDatabaseRecords": {
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records",
        "method": "GET",
        "response": {
          "limit": 500,
          "output": {
            "label": "{{item.id}}",
            "value": "{{item.id}}"
          },
          "iterate": "{{body}}"
        },
        "pagination": {
          "qs": {
            "page": "{{pagination.page-1}}"
          }
        }
      },
      "rev": 3,
      "name": "GetDatabaseRecords",
      "label": "Get Database Records",
      "appName": "ninox",
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"limit\": 500,\n\t\t\"iterate\": \"{{body}}\",\n\t\t\"output\": {\n\t\t\t\"label\": \"{{item.id}}\",\n\t\t\t\"value\": \"{{item.id}}\"\n\t\t}\n\t},\n\t\"pagination\": {\n\t\t\"qs\": {\n\t\t\t\"page\": \"{{pagination.page-1}}\"\n\t\t}\n\t}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "ninox",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "GetDatabaseTableFields": {
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}",
        "method": "GET",
        "response": {
          "limit": 500,
          "output": "{{convertNinoxFields(body.fields)}}"
        }
      },
      "rev": 3,
      "name": "GetDatabaseTableFields",
      "label": "Get Database Table Fields",
      "appName": "ninox",
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"limit\": 500,\n\t\t\"output\": \"{{convertNinoxFields(body.fields)}}\"\n\t}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "ninox",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getdatabasefieldsinterface": {
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}",
        "method": "GET",
        "response": {
          "limit": 500,
          "output": "{{convertNinoxFieldsInterface(body.fields)}}"
        }
      },
      "rev": 3,
      "name": "getdatabasefieldsinterface",
      "label": "Get Database Table Fields Interface",
      "appName": "ninox",
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"limit\": 500,\n\t\t\"output\": \"{{convertNinoxFieldsInterface(body.fields)}}\"\n\t}\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "ninox",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    },
    "getdatabasetablefieldsinterfalt": {
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}",
        "method": "GET",
        "response": {
          "limit": 500,
          "output": "{{convertNinoxFieldsInterfaceAlt(body.fields)}}"
        }
      },
      "rev": 3,
      "name": "getdatabasetablefieldsinterfalt",
      "label": "Get Database Table Fields Interface Alt",
      "appName": "ninox",
      "apiJsonc": "{\n    \"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}\",\n    \"method\": \"GET\",\n    \"response\": {\n        \"limit\": 500,\n        \"output\": \"{{convertNinoxFieldsInterfaceAlt(body.fields)}}\"\n    }\n}",
      "appVersion": 1,
      "parameters": [],
      "accountName": "ninox",
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    }
  },
  "flags": {},
  "label": "Ninox",
  "theme": "#3c97fa",
  "_hooks": {
    "ninox": {
      "api": {
        "output": "{{body}}"
      },
      "rev": 8,
      "name": "ninox",
      "type": "web",
      "flags": {},
      "label": "Ninox",
      "scope": [],
      "attach": null,
      "detach": null,
      "update": null,
      "aliasTo": null,
      "appName": "ninox",
      "apiJsonc": "{\n    \"output\": \"{{body}}\"\n}",
      "authorId": 671322,
      "appVersion": 1,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "attachJsonc": null,
      "detachJsonc": null,
      "updateJsonc": null,
      "altAccountName": null,
      "parametersJsonc": "[\n]"
    }
  },
  "global": true,
  "groups": [
    {
      "label": "Records",
      "modules": [
        "GetDatabaseTableRecords",
        "GetRecord",
        "LookUpRecord",
        "CreateOrUpdateRecords",
        "DeleteRecord",
        "UpdateRecord"
      ]
    },
    {
      "label": "Files",
      "modules": [
        "FetchFilesFromRecord",
        "DownloadFileFromRecord",
        "DeleteFileFromRecord",
        "UploadFileToARecord"
      ]
    },
    {
      "label": "Account",
      "modules": [
        "GetTeams",
        "GetDatabases",
        "GetDatabaseTables"
      ]
    },
    {
      "label": "Other",
      "modules": [
        "MakeanAPICall",
        "watchrecordevents"
      ]
    }
  ],
  "icon32": "\\x89504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af400000006624b474400ff00ff00ffa0bda7930000032d4944415458c3c597cf4b545114c73f6fb21c4b02718cd4302a3716d4c6568529ad5cb98a7059e8a622dae4a6ffc055b6e82f8872d34e7153f6836a918622a82da402a3a20904319bd2f1dbe29d3b737d3a6fc669a42f3cde7df7dc7beef79e73ee39f7c17f46002009600f7008d85b869e0cb06c6f8220289d802d9e006e02d7807d65105805be0033c00be035f0a324329290d428e9bd2a838ca44949d725d59bfea2045a247daa1001873549e392cec791702e68015e02478b987a0df8004c02b340dafa1b8053403b709ccd71f419180086016d71498916c84a9a90d427a95952c2df91e94898accfc666bdf96949bddb5aa20402ab92862c4e62fde9e43676c8e63a2c6eeb8e22045625dd9154ed29475283a40e4997ede9b03e7f4cb5cdf5493c7581590a810d4977238ba724dd96342d69c5cc9cb5f6b4c9521112774d9724ad4bbab1c90a3104de9a4fdd981392464d495cac8cda5837afd974394c386bc5115897d41fd9f9884ac748c412fd1ef18ca41e274b1488a70560ccfbbe027447c62c016fec598ac8ba81abdef798e904a8062e148b8107b2a366e69a8aec704252a7a403926a2575599f8f292f3013a6d3e189a4649c05e6800d6bb701ad919d0f00cf819fc00af0ccfa7c4bb4da5c4cd79c276b020e020509a4bdf661a0c6fb9e27cc840441e0179b499339ec071a0be8ac019251023115a3e2c8b1760432c02f6f4083d7fe1691b511e6fc5cd231b49337398425fa6b019d393802cb84f5dce1a4279b271fc10075c020d005d4dad3657d75deb805f22e4998ce2da8f22c30035cf476d34458c9d2c043e0b447aa1d78ec2dd016597c037844deef4dce6a5be0258b1e4b12bb9d886447be259a0d1b2267b9502acec62c5c4a2a2e48008585c231dd8d62b43d018f44bdc292e950e9725c94000a2f0d8b11123bbd903469eb85249e404441afc26b94efdb9d5cc9268bc44a8e40954f200802b7c361eb1a048ed8f16b07ce001f81096056529a30aba5082fa567816394f77353d01de30aafd89544ce02db1623afc0bc022e01b78077c0ef7fda591e19c22b3e457fe23c5fa78073402761566c24ac783bc51fe03e700fd828fd2f72339924613d4f9641600df80e6477f213bb6bf80bb9e7e01b33d3d60e0000000049454e44ae426082",
  "icon64": "\\x89504e470d0a1a0a0000000d4948445200000040000000400806000000aa6971de00000006624b474400ff00ff00ffa0bda793000007194944415478daed9b49685e5514c77f5fdaa4691da8a9d68ad10671aa7670aa0bad52ea42ba10c461a3588a601511549cb6d1a57544176a558a282e5470008b0b4545dc48ada2c5d63a44d3d85a9cd0246d63d3bf8b73bee4e5f5de377d5fbe34d83f04c2f7de3de7dcff3df79c7bcfbd0f8ee008fed7a8a57f9054fff738e09816dab2171802f601076bb55a83e22a10e09d6f07d602eb80f9804a4bad8621e037a01fd8067c097c0d0c0023009341cacc54e7f1ce3f0e1cd5a28ec73002ec02b6009b80f724f5d364ef1893e4041c07bc072c9fe2cea7310af4016f022f619ed11422d2049c0a7c0c2c9cea1e67600078157806f81e1a9b1a6d53dd9b0a3819b807780758037426a6efff820030cf5d8479c1d340b724aa1031b3748bea1096ea7e07f660117fd49fcd008ec7b2ce3c603681141dc06ce066e04ce06e60b3a4525362b20910f02bb019f810f81c0b667f00c38ca7d81a3007e8027a800b8095c085c0893964d480cbb0e0782bf0495912cc5273a15325f5a9718c4ada26a957d26249b38aba68fd3d491d92964a7ac8658d16d0bb43d28a4ad3a18904f47bc717569d97013216baccfe02fab74abaa8b4ee26107040d226575e6ba4e311db6a2e7b93ebcac24792ba5b49c090a4f592ba1a1df502ded0e5ba86726c7a5e52f114d900018392ee93cdd9b21d6af3bfb2ed3a5ce760865dc392d6e40d48a359601878107802f8371679dd80994037701eb0045bd01cebaffc2d6900f80af802d8091c08c9abd56a481a719d00bd5806496336f000f029f05d5166cb78c00177c5e8c827466ba5bbe48f92f667c8dcefef3cef6d8ac85eafec98b05e4562520502de95cff9882c249d296983a4bf4a4e2b799b175d06197abadc9618fa252d6b3601fd9296870c4b747eb52c25358aad2e2b4bd77265a7c84794179c4b12d09b63d04d927635a1f375ec7299593a7b33daef90d4d32c02be0909d3c4916f66e793246479428fdb16c2a8a475a1b6557683af61ebf910ce02d6030b2ac8cdc302977d56e4799fdb16421bb01ae8083d2883ddc0eb30b108a1f15ae2bdc0b993d0f93ace05ee07266487842d6fb88d219c8fa5e18608d80c6c8f3cbb14b8ae800c01bf00ef028ff9df2637bcc88ae81ae092c8b3ed580d31849380c5e91fcb2e843e04f64fe88d8d441b70233037a7fd10b0112b647c8b577b31d73c1bab44af25bb203bd7757d2c295d17dc077c80b97b1a1d9817bcadd076b940101c92b42a2300fd9013c40625dd2ba95df19cdeeeef0ce6c8fa212310af527c9ff0b2528ba23253e077e2c1ef3c6c699b858dc0934496ccfedbbffecec61c5927bbce10fadcd6104ec196c89508d8835572c69060720981089bc06e600319fb8514091b8807335cd792940d75fc8195db4298476a7a9521e0376cf31342dee86fc14e7b8a621bf16096a7736f060147d380078c128fd27372da7e432a78e660bfb7c9c231846b8507312f2a84e95a166f1aca10308378757638a7ed226056095db3bc4d16fe21ec916dd8a2ac12017b81c1c8bbc71377f5811c3de76379be28cef6365988e99cedb656226088780a998fd5edc79088e85f31bea8096101700b105c03d4915852df42f67e62c47586eaff5d8d10b0173b9f0f611e766811c217e47bc15ae0ce180989cedfe9ef6661c07586d0e3b6562240c08ec8bb73b0139b50eefd19783f47d75158fdee7160a9bcdce57f1dc0527fd64bfedd84f75d679a40dcc6bcac3486b1bd80171bc1f2ef08e185cd4ae0291229cddb1d045ec13643737348b81db8d6f5d453dd226ccee71d8301fce5ba42f7033a8155453b7f087c344ecbd80fec921d5785dab5cbea7f938d17142896ba0dcb945d8ce993ed77c6da85d2e04ee2abb0053eca13a6416209fb08b0b5f208e4632bf0303012a847807956a9624c8880116c7f7e30d2e67ae2c1703b701fd9ebf8aad8edb263f5881eb7ad31687c7bbb23c395a65b51343a056204202b25c730ddcae2c50948085e9623b4e8c1c88b9ada8391ca04d464c74a314c97a3b14c02a239d75f3a1d780b3827f2da30b6707982060f47b1d55deee168425e3b7017f1c3d1107e022e077ecebd429370e335b2a3e6180ed7e3f1ea5320a5acd35d320b87e30589c6094828ee965d3bc9422baec85cac6257649a4e00deb122696d322f490d54ec7875025286ac50f602a98efa35b987647b87cea264247475aafc35b9d20414be4d9868b4027896786698d00c2ba76fc1b6b0b18b926d5825277951f20a6c8738bf8c9d3938240b94129c20e1426cefbea2848cacabb2ed5811e304ca5d956d2d012912bab11c7c03a95afb618c4308285d16afd56af5edef4ee00ee036acb0d1aa4f6b9a8acae7024ec23eec92f255c0a3e4d7050f3b34659e69fc887c31f611c3d558309b31d51d4ce133e04ae0cfca31a02011a7b8a2d558243f89ecc3d3566008fba660038c97d327e5e3bc44a0ecc0363d4b9c88339c9cf9b42e70d6b0acf31c76ec3e61d3d69aaf1399e01d9dd8c16699a3b246f10ff0274cceb787477004d318ff01ffdefdbd545b84dc0000000049454e44ae426082",
  "origin": "eu1.make.com",
  "public": true,
  "compile": false,
  "created": "2022-05-04T10:09:05.892453+00:00",
  "icon128": "\\",
  "icon256": "\\",
  "icon512": "\\x89504e470d0a1a0a0000000d4948445200000200000002000806000000f478d4fa00000006624b474400ff00ff00ffa0bda793000016334944415478daedddd976db3a124051ba57feff97dd0f8e6e6c5903070c55a8bddfbbaf4d02c54348493e3e3f3f3700a096ffcdfe010080f104000014240000a020010000050900002848000040410200000a12000050900000808204000014240000a020010000050900002848000040410200000a12000050900000808204000014240000a020010000050900002848000040410200000a12000050900000808204000014240000a020010000050900002848000040410200000afa33fb07e8e473f60f00057dccfe0180fd560a000f7d986bcf1e140910c40a01e0c10f79bcdaafe20006ca1c001efcb096677b5a1840071903c0831f6a79b4e745015c942d003cfc816d13057059a600f0f0075ef93e23c400bc9125003cfc81239c10c01b1902c0c31f68c109017c133d003cfc811eee678b20a09cc801e0e10f8ce2748072a20680873f308b18a0848801e0e10f4421065856c4000088480cb09468ff1cb0b77f2083cfcdbc22b968010090891020ad481f01d84440563e1e209d480100b00231400a513e02f0f60facc847048415250000562604084700008c230408234200d80c40354280e97c0910601e5f18649a0827000038116030010010878f0618460000c42304e84e0000c42504e8460000c42704684e0000e4210468460000e42304b84c0000e42502384d0000e4e63480530400c01a840087080080b5880076110000eb711ac05b0200605d2280a70400c0da9c06f0900000a84104f0830000a8c36900ff110000f58800040040514e038a130000b58980a20400004e030a120000dc888042040000df898022040000f77c2450800000e01911b0300100c02b2260510200807744c0820400007bf85ec062040000478880450800008e12010b1000009c2102921300009ce57b0189fd99fd0300977c4cfeef1bfe6cdbd73a98bd16394800406cd187eabb9f4f20d4210292110010c3aa83f3d9ef250cd62402121100309e01f9f81a8882358880240400f46510ee270ad62102121000d096a1d7d6fdf51404798880e004005c67c88df3fd5a8b81f84440600200ce31d4e61303398880a00400ec6380c5e6a382d844404002009e33b0f2723a108f08084600c04f06d47ac4401cb7eb6f9f05e0df02802f1f9ba15481fb1c83100bc00900957910d475bbf71e44f3f8486032014045860e373e1ea02c1f015089e35f5eb13ec6135d1309002a30d839c27a194b044c2200589941ce15d6cf38226002df0160350636adf99ec018be143898130056e16d8d11acb3be04d64002801518c88c66cdf5230206110064e66d8c99acbf7e44c00002808c0c5e22b11efb10019d090032316889ccfa6c4f04742400c8c0602513ebb52d11d08900203a8394acacdd76444007fe1e00a2323c59817f7488b09c00108de35356645d5f27a21a1300446240b23a6bfc1a11d0900020026f475462bd5f23021a1100cc66105295b57f9e086840003093014875f600d308006670040affd80fe73805b84800309a41078fd91bc789800b0400a378cb81f7ec93e344c0490280110c3438c69e3946049c2000e8cd208373ec1dba1200f4e22813aeb38ff6730a709000a007030bdab2a7f611010708005a33a8a00f7b6b1f11b09300a025030afab2c7684600d08ac10463d86bef3905d8410070952f29c178f6dd7b22e00d01c0150610cc650f729a00e02c830762b0179f730af08200e00c030762b1279f13014f08008e326820267b93430400471830109b3dfa9853800704007b192c9083bdfa9808b82300d8c340815cec59de1200bc6390404ef6ee6f4e01be1100bc6280406ef6f06f22e02f01c0330607acc15ee6a13fb37f00423230d6f6ec0dc87d5fd7c7e6cdf7bbcfcd7a1700fc527e5324d372a89ff9ffb25ef210013f958f0001c077a53743609187f6ab9fcd7a8a4704f01f01c08d611dc72a03fafef7b0c6621001ff943e0510006c5be10d104495612c08e2100108000ce1490cdf9fd7c03a1c4f047c297b0a20006a2bb9e82731685f733a308708f85232020400f463b09ee774003af31701d565a8f6f3b979f8b7e47af665167c29b7c604404d367c1f1e547db9befd980905f908a01e1bbd2d0fa4f17c3cd087ef0314fb2e8013805aca2cec01bc8dc6e03eb46546142200eab0b1dbf0c089c97d69a7faac28b38e7c0400fb94190ac9ddee53f58718bce504a006c3f03c6f9639b96fd7549f1925d68e00585ff58d7c9607c81adcc7f3cc8ec50980b5d9c0e77860ac47089c5379862cbf5e0400fce321b13ef717fe1200ebaa5cee4779f0d7e27e1f5379962cbd4e04c09a2a6fd8a396dee0bce4deef5779a62cbb4efc3140aa5a765373883f3648594e00d66390bde7e1cf3d6be23db3653102602d36e86b3efbe515ebe3bdaa3366c9752100d6517563eeb5e406a60b6be535b3661102800a0c748eb266b8b7dc9a10006b50e48f39d2e50aebe73933670102203f1bf131839b56aca5c72ace9ea5d6820060454b6d5242b0a6588e00c8ad6281bf6350d38bb5f55bc519b4cc3a1000ac64998d4958d618cb100079552cef570c6646b1d67eaa388b9658030220a78a1bee19dfd46606ebee273329210140660630b35983a42500f251da5f0c5ea2b016bf549b4de9efbb0020a3f41b8fe55893a4230072a956d88f18b444656d9a51a9080032316089ce1aad25f5fd160079542febd41b8d52aaafd5eab32a0d014006d5072af958b375a4bdd7022007450d646266252000e2abbe91d2d635e5555fbb956657ca7b2d00882ce5a6826fac61c21200b1552ae87b0627aba8bc962bcfb0f0040011551e98acc99a5e5fba7b2c008826dd26829dac6d42110071553c3a3320595dc5355e7196a5200000a08d5481270062aa58cca9360e5c5071ad579c69e1090022a83810a9cd9a673a01104fb5523608a9aadadaaf32dbd2dc5701000005098058aa14f24d9a52864eaaed816a332e3401c02cd5061f3c632fac27c53d15000050900088a3d2d1588a3a86812aed894ab32e3401c06895061d1c616f3094008841110395549879e1834e003052f80d0193d9230c2300e6ab50c2c07e5522c0ec9b4c00304a95a10670137aee09004608bd0920207b86ee04c05c8ec080caccc0890400bd79938173ec1dba12000050900098a7c2d1973718b8c61eca2fec3d140000cc54e16528a43fb37f009615b67a8b7b376cddb7783e370f493a1000b0a6b30f8c67ff3b6100e7858c38013047b885d09887c578bdd7d4fdffbf7b3c56c80748431f9b35359c00809c663f0cbefff70d6e484800d09a87415fb31ffcef7e26f7bf9fd54f0118cc9f0218cf06e68c8f2dc7dac9f27312cfeaeb265c1c3b0180d8b20ec5dbcf1d6ee8015f9c00d09261dfce2a6fd2abfc1e51d863342300c632087967d507e6aabf176d59230309005af166725d85e157e177eccd5ea309df0180f9aa3d147d3f00027002400b06f979d51efe7ef736ecb99c42dd3701308e61c73d6bc235e0376b62100100731872ffb816308100e0aa50475a4978e0fde69a1c67ef71890080b13ce89e736d60200100e378c0bde71ac12002600c430d6b603fd78a95d740988f6e0400578459c8c1ad3ccc7a71cdf6b107394d00405f1e64e7b976d09100807e3cc0ae730da11301c0598e1e5ff3e06ac7b57ccd5ee41401d09fe105709cd9d9990080f60caef65c53684c00405b1e54fdb8b6ac22c4c736028033422c5ee03ff62487090068c71b6a7fae3134220000a02001d097b7953adceb715ceb3adceb8e040047f9ac1162b237394400c075de52c673cde122010000050900b8c69be83cae3d5c20000060bce9dfd910000050900080f31c41cfe71ec04902a09f1507d3f4232be0257b94dd04000091adf83215820080730ca538dc0b3841000040410200000a12000050900080e37ce61c8f7b02070900002848000040410200000a12000050900000808204001ce3dbe671b93770800000588b7f10885d04007b192a000b110000509000008082040000142400d8cb37ac0116220000d622d6d94500c031fe34445cee0d1c200000a020010000050900002848000040410200000a1200709c6f9bc7e39ec0410200000a12000050900000808204009ce333e738dc0b384100001099c0eb4400f4b3e2a2f58f8c406cf628bb0900386fc5c8cbc63d8093040000141421001c5901c0601102003273043d8f6b0f17080000284800c075de44c773cde12201c051beb30131d99b1c2200faf29652877b3d8e6b5d877bdd91000080820400b4e36da53fd7181a11009ce1b34688c59ee4b0280160f1b20a6fa8fdb8b6d050940080957850b5e79a426302a03f830be038b3b33301c0593eb679cdf06ac7b57ccd5ee4140100fd78705de71a42270200faf2003bcfb5838e040057387adcc783ec38d76c1f7b90d32205c0ca0bd930c31ad8cfb5c21a18205200c0ea0cb5f75c23184400c0581e70cfb936309000e0aa953fbae9c583ee37d7e4387b8f4b0400cce181f78f6b01130880710c39ee5913ae01bf591383440b00475a39b96fe7551e76957ff7abec392efb33fb0700fe7b105619ea1efc1040b41300f2aaf2f0eaa9c283b1c2efd89bbd461302602cc38f773eb735d7c9aabf176d59230309005af266d2ce2a0fcc557e8f28ec319af11d00882debf7033cf421b8882700d906dd51062367647993cef273128f75339813005afbd86ce49ebe5fdb28b1ec7e8f11e57eb308010079cd8c010f7d484e00ccf1b9ad5df34e01c6bbbfdeadd797fb39d7caf362dbacaf29a2068007085cf36cffbc7b90d8775044d400203f1117937b92cfea6fff4c12f14f01005087289d247200ac5ebd1516fdeaf7107ab387e826720000009d08007af30603e7d83b742500e6aaf03100c03366e044028011bcc9c031f60cdd450f009b601dee254020d103a0024760c0775562d9ec9b4c00305295c10667d9230c9321002a6c08250c5462e605902100584b85a08333ec0d86120071542a62830e7eaab4272acdbad0040000149425002ad57115ee297cb11798224b005451ed68cce0a3ba6a7ba0da8c0b4d000040419902a04a29572be42af715ee555bfbd5665b7899028075551b8460cd339d0088a962291b88545171ad579c69e1650b808a1b07009acb160095542c6681c7ea2aaef18ab32c050140341507243558db849231006ca2f5b9c7acc69a269c8c015049e5a333039355545ecb956758780280c82a0f4ed6600d1356d600a8b4a9aa1774a57bcd5aaaafddeab32bbcac01508d8d0464626625903900aad77525ee35d958b384973900aaa95ed4062a59545fabd567551ad903a0fa46abc6fd263a6b9434b2074035cada80252e6bd38c4a45009091414b34d624e9ac1000d5369ec2fe52edbe1397b5f8c56c4a668500a02e8397d9ac41d212003929ed7f3e364398f1acbb9fcca4845609808a1bd186fba9e21a600e6bed27b328a9550200b6cd60a63f6b8c65ac14001537a6f2feade23a600c6beb373328b19502006e0c6a5ab3a658ce6a015071932af0c72aae05fab0961e337b925b2d00aab2111ff34d6daeb07e9e337316b06200d8b0dcb32638ca9a61792b0640558afc35039dbdac95d7cc9a45ac1a005537b08df99a235d5eb13ede336316b26a00546683be67c873cf9a78cf6c59cc9fd93f004c721bf8865a6d1efc94b5f20940e58deda1b65fe575529d7bbf9f99b2a0950360db6a6f701b763f9ffdd6e27e1f63962c6af50080233c14d6e71ec35f1502a0f28657eec7793b5c93fb7a8e19b2b00a01509d0d7c8e07c61adcc7f3cc8ec5550980ea03c0463ecf032427f7ed1a33a3007f0c10f6f1c70673f0d0879daa9c006c9bc1e0c1d58637cb98dc9776cc8a222a050036764b1e3831b80f6d99118554fb08e063b3c03f3703b3a5efd7b2fada1ac5faedc3fa2dc609404d367a1fde46fb727dfb31130aaa180006c8171bbe1f0faab65ccfbecc82a2aa7d040023f978e03c0f7ce8ac6a00f82ec017df0718e7fe3a5b7f3f598773588785550d806d13013722600ea703d6dd6c55d71d7f550e00fe11017355391db0c6e258758d7140f500700af08f0888639520b09e62caba9e68ac7a00f0930888e9d53d993dccad975c66af170211004e01ee89805ccedcab67ebdd7d5f9b39c70f02e08b08f84904accdbdadc77ce3978a7f1110fb1818b0067b998704c03fde8a7e333820377b98a704c04f22e037030472b277794900b0874102b9d8b3bc25007e730af098810239d8abec22001e13018f192c109b3dca6e0280a30c1888c9dee41001f09c5380e70c1a88c59ee43001f09a0878cec08118ec454e11005c61f0c05cf620a70980f79c02bcf6b91942309a7dc76502601f11f09e610463d86b34210068c96082beec319a1100fb3905d8c780823eec2d9a1200c788807d0c2a68cb9ea23901709c08d8c79794e03afb886e0400bd195e708ebd435702e01ca700c71864708c3d437702e03c11708ca34c78cf3e611801708d0838ce7083c7ec0d861200d78980e3bce5c03ff6035308006632f4a8ce1e601a01d0865380f30c40aab2f6994a00b42302ce73044a25d63b210880b644c03586222bf3e0271401d09e08b8c6906445d634e1fc99fd03c013b78129a8c8cc839fb09c00f4e1a1d58e014a56d62ea109807e44403b3e162013eb951404405f22a02d8395c8ac4f521100fd8980f60c5a22b11e4949008c2102fa307899c9fa233501308e08e8c71066346b8ef404c05822a01f6f638c609db10c7f0fc0781f9b01d2d3f76b2bb868c17e65494e00e6f0601ac3db1a57583f2c4d00cc2302c631c839c27aa1040130970818cb60e715eb83527c07808a7c4f801b0f7cca7202309f07d05cdefa6a72df294f00c42002e6f340a8c17d86bf7c0410c72d020ca7b97c3cb01e7b0a1e1000f1f87b02e2b8bf0f822007fb07761000318980989c0ec465bfc04102202e11109b1898cffe800b04406c22200731308efd008d0880f844402ebe37d096b50f9d08801c44405e8fee9b2878cc1a878104401e22601da2c05a86e904402e22605dcfee6bf630b05e212801908f08a8e5ddbd9e1908d621242600721201dc5807c029fe2d80bc3eb6fcc7c3004c2200f21301001c2600d6200200384400ac430400b09b00588bef0500b08b0058930800e02501b02e1100c05302606d2200808704c0fa7c2f00805f04401d220080ff08805a440000dbb609808a7c24008000284c04001426006a731a0050940060db4400403902801ba70100850800ee8900800204008f380d00589c00e0151100b02801c03b4e0300162400d84b04002c44007084d30080450800ce100200c90900ae100100490900ae721a00909000a0152100908800a0352100908000a0172100109800a0372100109000601421001088006034110010c09fd93f00257d8f80cfd93f0c40454e0098cd47034045d3e79e00200a2100309000201a2100308000202a2100ac2ac46cf32540a2f38541800e040099880120bb106fffdbe62300f2f21101c0050280ec84009045a859e5230056e1e301800304002b12034034a1defeb74d00b03e3100cc16eee1bf6d02805ac400305ac887ffb60900eabadf948200682decc37fdb0400dc381d005a0afdf0df3601008f3cdab8a200d82bfcc37fdb0400ece58400d823c5c37fdb04009ce1fb03c023691efedb2600a085679b5e18400da91efc370200fa1106b0b6940ffe1b0100e3bd1a1ae200e24bfde0bf110010cbbbc12210608e251efadf0900c865b92104cce19f0306808204000014240000a020010000050900002848000040410200000a12000050900000808204000014240000a020010000050900002848000040410200000a12000050900000808204000014240000a020010000050900002848000040410200000a12000050900000808204000014240000a020010000050900002848000040410200000afa3fd0edccdfd80cf58f0000000049454e44ae426082",
  "install": {
    "common": {
      "timeout": "{{parameters.timeout}}"
    }
  },
  "ipmRepo": "https://ipm.integromat.com",
  "ipmTags": null,
  "version": 1,
  "website": null,
  "_modules": {
    "GetTeams": {
      "id": 27305,
      "api": [
        {
          "url": "/",
          "method": "GET",
          "response": {
            "limit": "{{parameters.limit}}",
            "output": "{{item}}",
            "iterate": "{{body}}"
          },
          "condition": "{{if(connection.privateCloudURL === null, true, false)}}"
        },
        {
          "response": {
            "output": [
              {
                "label": "{{getConnectionTeamID(connection.privateCloudURL)}}",
                "value": "{{getConnectionTeamID(connection.privateCloudURL)}}"
              }
            ]
          },
          "condition": "{{ifempty(connection.privateCloudURL,false)}}"
        }
      ],
      "rev": 3,
      "crud": "read",
      "name": "GetTeams",
      "epoch": null,
      "flags": {},
      "label": "List Teams",
      "scope": [],
      "expect": [
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 10
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "ninox",
      "samples": {
        "id": "67mm9vc324bM7x",
        "name": "Test-Team"
      },
      "apiJsonc": "[\n\t{\n\t\t\"url\": \"/\",\n\t\t\"condition\": \"{{if(connection.privateCloudURL === null, true, false)}}\",\n\t\t\"method\": \"GET\",\n\t\t\"response\": {\n\t\t\t\"limit\": \"{{parameters.limit}}\",\n\t\t\t\"output\": \"{{item}}\",\n\t\t\t\"iterate\": \"{{body}}\"\n\t\t}\n\t},\n\t{\n\t\t\"condition\": \"{{ifempty(connection.privateCloudURL,false)}}\",\n\t\t\"response\": {\n\t\t\t\"output\": [\n\t\t\t\t{\n\t\t\t\t\t\"label\": \"{{getConnectionTeamID(connection.privateCloudURL)}}\",\n\t\t\t\t\t\"value\": \"{{getConnectionTeamID(connection.privateCloudURL)}}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\t\n\t}\n]",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Team ID"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name Team"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Lists all your teams.",
      "expectJsonc": "[\n\t{\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 10\n    }\n]",
      "samplesJsonc": "{\n\t\"id\": \"67mm9vc324bM7x\",\n\t\"name\": \"Test-Team\"\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"label\": \"Team ID\",\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"name\",\n\t\t\"label\": \"Name Team\",\n\t\t\"type\": \"text\"\n\t}\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "GetRecord": {
      "id": 27306,
      "api": [
        {
          "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}",
          "method": "GET",
          "response": {
            "temp": {
              "tableFields": "{{convertNinoxFieldsInterfaceAlt(body.fields)}}"
            }
          }
        },
        {
          "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}",
          "method": "GET",
          "response": {
            "output": "{{formatOutputAlt1(body, temp.tableFields)}}"
          }
        }
      ],
      "rev": 7,
      "crud": "read",
      "name": "GetRecord",
      "epoch": null,
      "flags": {},
      "label": "Get Record",
      "scope": [],
      "expect": [
        {
          "mode": "edit",
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "mode": "edit",
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "mode": "edit",
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": {
                        "store": "rpc://app%23ninox@1/GetDatabaseTables",
                        "nested": [
                          {
                            "mode": "edit",
                            "name": "recordid",
                            "type": "select",
                            "label": "Record",
                            "options": "rpc://app%23ninox@1/GetDatabaseRecords",
                            "required": true
                          }
                        ]
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "ninox",
      "samples": {
        "id": 1,
        "fields": {
          "A": "Erica-Maria",
          "B": "Young"
        },
        "sequence": 418,
        "createdAt": "2018-06-13T12:16:32",
        "createdBy": "ekL2xSxuD7jtN2F2D",
        "modifiedAt": "2018-06-15T16:05:07",
        "modifiedBy": "ekL2xSxuD7jtN2F2D"
      },
      "apiJsonc": "/*{\n    \"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}\",\n    \"method\": \"GET\",\n    \"response\": {\n        \"output\": \"{{formatOutputAlt(body,metadata.interface)}}\"\n    }\n}*/\n[\n    {\n        \"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}\",\n        \"method\": \"GET\",\n        \"response\": {\n            \"temp\": {\n                \"tableFields\": \"{{convertNinoxFieldsInterfaceAlt(body.fields)}}\"\n            }\n        }\n    },\n    {\n        \"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}\",\n        \"method\": \"GET\",\n        \"response\": {\n            \"output\": \"{{formatOutputAlt1(body, temp.tableFields)}}\"\n        }\n    }\n]",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "uinteger",
          "label": "Record ID"
        },
        {
          "name": "sequence",
          "type": "uinteger",
          "label": "Change Sequence Number"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created At"
        },
        {
          "name": "modifiedAt",
          "type": "date",
          "label": "Modified At"
        },
        {
          "name": "createdBy",
          "type": "text",
          "label": "Created By"
        },
        {
          "name": "modifiedBy",
          "type": "text",
          "label": "Modified By"
        },
        "rpc://app%23ninox@1/getdatabasetablefieldsinterfalt"
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Returns a single record given the ID of it.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"mode\" : \"edit\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"name\": \"recordid\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Record\",\n\t\t\t\t\t\t\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\t\t\t\t\t\t\"options\": \"rpc://GetDatabaseRecords\",\n\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": "{\n    \"id\": 1,\n    \"sequence\": 418,\n    \"createdAt\": \"2018-06-13T12:16:32\",\n    \"createdBy\": \"ekL2xSxuD7jtN2F2D\",\n    \"modifiedAt\": \"2018-06-15T16:05:07\",\n    \"modifiedBy\": \"ekL2xSxuD7jtN2F2D\",\n    \"fields\": {\n        \"A\": \"Erica-Maria\",\n        \"B\": \"Young\"\n    }\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"id\",\n        \"type\": \"uinteger\",\n        \"label\": \"Record ID\"\n    },\n    {\n        \"name\": \"sequence\",\n        \"type\": \"uinteger\",\n        \"label\": \"Change Sequence Number\"\n    },\n    {\n        \"name\": \"createdAt\",\n        \"type\": \"date\",\n        \"label\": \"Created At\"\n    },\n    {\n        \"name\": \"modifiedAt\",\n        \"type\": \"date\",\n        \"label\": \"Modified At\"\n    },\n    {\n        \"name\": \"createdBy\",\n        \"type\": \"text\",\n        \"label\": \"Created By\"\n    },\n    {\n        \"name\": \"modifiedBy\",\n        \"type\": \"text\",\n        \"label\": \"Modified By\"\n    } ,\n    \"rpc://getdatabasetablefieldsinterfalt\"\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "DeleteRecord": {
      "id": 27307,
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}",
        "method": "DELETE",
        "response": {
          "output": "{{}}"
        }
      },
      "rev": 4,
      "crud": "delete",
      "name": "DeleteRecord",
      "epoch": null,
      "flags": {},
      "label": "Delete Record",
      "scope": [],
      "expect": [
        {
          "mode": "edit",
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "mode": "edit",
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "mode": "edit",
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": {
                        "store": "rpc://app%23ninox@1/GetDatabaseTables",
                        "nested": [
                          {
                            "mode": "edit",
                            "name": "recordid",
                            "type": "select",
                            "label": "Record",
                            "options": "rpc://app%23ninox@1/GetDatabaseRecords",
                            "required": true
                          }
                        ]
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "ninox",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}\",\n\t\"method\": \"DELETE\",\n\t\"response\": {\n\t\t\"output\": \"{{}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Deletes a single record.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"mode\" : \"edit\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"name\": \"recordid\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Record\",\n\t\t\t\t\t\t\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\t\t\t\t\t\t\"options\": \"rpc://GetDatabaseRecords\",\n\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "GetDatabases": {
      "id": 27308,
      "api": {
        "url": "/databases",
        "method": "GET",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "GetDatabases",
      "epoch": null,
      "flags": {},
      "label": "List Databases",
      "scope": [],
      "expect": [
        {
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": "rpc://app%23ninox@1/GetTeams",
          "required": true
        },
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 10
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "ninox",
      "samples": {
        "id": "nk5xt24oixj4",
        "name": "Invoices"
      },
      "apiJsonc": "{\n\t\"url\": \"/databases\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"limit\": \"{{parameters.limit}}\",\n\t\t\"output\": \"{{item}}\",\n\t\t\"iterate\": \"{{body}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Database ID"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name Database"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Lists all databases within a team.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": \"rpc://GetTeams\",\n\t\t\"required\": true\n\t},\n\t{\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 10\n    }\n]",
      "samplesJsonc": "{\n\t\"id\": \"nk5xt24oixj4\",\n\t\"name\": \"Invoices\"\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"label\": \"Database ID\",\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"name\",\n\t\t\"label\": \"Name Database\",\n\t\t\"type\": \"text\"\n\t}\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "LookUpRecord": {
      "id": 27309,
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/record",
        "body": {
          "filters": "{{prepareRequest(omit(parameters, 'teamid', 'databaseid', 'tableid'), metadata.expect)}}"
        },
        "method": "POST",
        "response": {
          "output": "{{formatOutputAlt(arrayOrObject(body),metadata.interface)}}"
        }
      },
      "rev": 6,
      "crud": "read",
      "name": "LookUpRecord",
      "epoch": null,
      "flags": {},
      "label": "Look Up Record",
      "scope": [],
      "expect": [
        {
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": {
                        "store": "rpc://app%23ninox@1/GetDatabaseTables",
                        "nested": "rpc://app%23ninox@1/GetDatabaseTableFields"
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "ninox",
      "samples": {
        "id": 1,
        "fields": {
          "A": "Erica-Maria",
          "B": "Young"
        },
        "sequence": 418,
        "createdAt": "2018-06-13T12:16:32",
        "createdBy": "ekL2xSxuD7jtN2F2D",
        "modifiedAt": "2018-06-15T16:05:07",
        "modifiedBy": "ekL2xSxuD7jtN2F2D"
      },
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/record\",\n\t\"method\": \"POST\",\n\t\"body\": {\n\t\t\"filters\": \"{{prepareRequest(omit(parameters, 'teamid', 'databaseid', 'tableid'), metadata.expect)}}\"\n\t},\n\t\"response\": {\n\t\t\"output\": \"{{formatOutputAlt(arrayOrObject(body),metadata.interface)}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "uinteger",
          "label": "Record ID"
        },
        {
          "name": "sequence",
          "type": "uinteger",
          "label": "Change Sequence Number"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created At"
        },
        {
          "name": "modifiedAt",
          "type": "date",
          "label": "Modified At"
        },
        {
          "name": "createdBy",
          "type": "text",
          "label": "Created By"
        },
        {
          "name": "modifiedBy",
          "type": "text",
          "label": "Modified By"
        },
        "rpc://app%23ninox@1/getdatabasetablefieldsinterfalt"
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Returns a record based on the information you provide.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\t\"nested\": \"rpc://GetDatabaseTableFields\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": "{\n    \"id\": 1,\n    \"sequence\": 418,\n    \"createdAt\": \"2018-06-13T12:16:32\",\n    \"createdBy\": \"ekL2xSxuD7jtN2F2D\",\n    \"modifiedAt\": \"2018-06-15T16:05:07\",\n    \"modifiedBy\": \"ekL2xSxuD7jtN2F2D\",\n    \"fields\": {\n        \"A\": \"Erica-Maria\",\n        \"B\": \"Young\"\n    }\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Record ID\"\n\t},\n\t{\n\t\t\"name\": \"sequence\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Change Sequence Number\"\n\t},\n\t{\n\t\t\"name\": \"createdAt\",\n\t\t\"type\": \"date\",\n\t\t\"label\": \"Created At\"\n\t},\n\t{\n\t\t\"name\": \"modifiedAt\",\n\t\t\"type\": \"date\",\n\t\t\"label\": \"Modified At\"\n\t},\n\t{\n\t\t\"name\": \"createdBy\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Created By\"\n\t},\n\t{\n\t\t\"name\": \"modifiedBy\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Modified By\"\n\t},\n\t\"rpc://getdatabasetablefieldsinterfalt\"\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "UpdateRecord": {
      "id": 27310,
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records",
        "body": {
          "id": "{{parameters.id}}",
          "fields": "{{prepareRequest(omit(parameters, 'teamid', 'databaseid', 'tableid', 'id'), metadata.expect)}}"
        },
        "method": "POST",
        "response": {
          "output": "{{formatOutputAlt(body,metadata.interface)}}"
        }
      },
      "rev": 5,
      "crud": "update",
      "name": "UpdateRecord",
      "epoch": null,
      "flags": {},
      "label": "Update Record",
      "scope": [],
      "expect": [
        {
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": {
                        "store": "rpc://app%23ninox@1/GetDatabaseTables",
                        "nested": [
                          {
                            "name": "id",
                            "type": "select",
                            "label": "Record",
                            "options": {
                              "store": "rpc://app%23ninox@1/GetDatabaseRecords",
                              "nested": "rpc://app%23ninox@1/GetDatabaseTableFields"
                            },
                            "required": true
                          }
                        ]
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "ninox",
      "samples": {
        "id": 1,
        "fields": {
          "A": "Erica-Maria",
          "B": "Young"
        },
        "sequence": 418,
        "createdAt": "2018-06-13T12:16:32",
        "createdBy": "ekL2xSxuD7jtN2F2D",
        "modifiedAt": "2018-06-15T16:05:07",
        "modifiedBy": "ekL2xSxuD7jtN2F2D"
      },
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records\",\n\t\"method\": \"POST\",\n\t\"body\": {\n\t\t\"id\": \"{{parameters.id}}\",\n\t\t\"fields\": \"{{prepareRequest(omit(parameters, 'teamid', 'databaseid', 'tableid', 'id'), metadata.expect)}}\"\n\t},\n\t\"response\": {\n\t\t\"output\": \"{{formatOutputAlt(body,metadata.interface)}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "uinteger",
          "label": "Record ID"
        },
        {
          "name": "sequence",
          "type": "uinteger",
          "label": "Change Sequence Number"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created At"
        },
        {
          "name": "modifiedAt",
          "type": "date",
          "label": "Modified At"
        },
        {
          "name": "createdBy",
          "type": "text",
          "label": "Created By"
        },
        {
          "name": "modifiedBy",
          "type": "text",
          "label": "Modified By"
        },
        "rpc://app%23ninox@1/getdatabasetablefieldsinterfalt"
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Updates a record. ",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Record\",\n\t\t\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseRecords\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"nested\": \"rpc://GetDatabaseTableFields\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": "{\n    \"id\": 1,\n    \"sequence\": 418,\n    \"createdAt\": \"2018-06-13T12:16:32\",\n    \"createdBy\": \"ekL2xSxuD7jtN2F2D\",\n    \"modifiedAt\": \"2018-06-15T16:05:07\",\n    \"modifiedBy\": \"ekL2xSxuD7jtN2F2D\",\n    \"fields\": {\n        \"A\": \"Erica-Maria\",\n        \"B\": \"Young\"\n    }\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Record ID\"\n\t},\n\t{\n\t\t\"name\": \"sequence\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Change Sequence Number\"\n\t},\n\t{\n\t\t\"name\": \"createdAt\",\n\t\t\"type\": \"date\",\n\t\t\"label\": \"Created At\"\n\t},\n\t{\n\t\t\"name\": \"modifiedAt\",\n\t\t\"type\": \"date\",\n\t\t\"label\": \"Modified At\"\n\t},\n\t{\n\t\t\"name\": \"createdBy\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Created By\"\n\t},\n\t{\n\t\t\"name\": \"modifiedBy\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Modified By\"\n\t},\n\t\"rpc://getdatabasetablefieldsinterfalt\"\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "MakeanAPICall": {
      "id": 27311,
      "api": {
        "qs": {
          "{{...}}": "{{toCollection(parameters.qs, 'key', 'value')}}"
        },
        "url": "{{ifempty(connection.privateCloudURL,'https://api.ninox.com/v1/')}}/{{parameters.url}}",
        "body": "{{parameters.body}}",
        "type": "text",
        "method": "{{parameters.method}}",
        "headers": {
          "{{...}}": "{{toCollection(parameters.headers, 'key', 'value')}}"
        },
        "response": {
          "output": {
            "body": "{{body}}",
            "headers": "{{headers}}",
            "statusCode": "{{statusCode}}"
          }
        }
      },
      "rev": 3,
      "crud": null,
      "name": "MakeanAPICall",
      "epoch": null,
      "flags": {},
      "label": "Make an API Call",
      "scope": [],
      "expect": [
        {
          "help": "Enter a path relative to the default Ninox Cloud `https://api.ninox.com/v1` for example `/teams/67mm9vc324bM7x/databases` or enter a path relative to your Ninox Private Cloud `https://companyname.ninoxdb.de/teamID/api/v1` for example `/databases`.",
          "name": "url",
          "type": "text",
          "label": "URL",
          "required": true
        },
        {
          "name": "method",
          "type": "select",
          "label": "Method",
          "default": "GET",
          "options": [
            {
              "label": "GET",
              "value": "GET"
            },
            {
              "label": "POST",
              "value": "POST"
            },
            {
              "label": "PUT",
              "value": "PUT"
            },
            {
              "label": "PATCH",
              "value": "PATCH"
            },
            {
              "label": "DELETE",
              "value": "DELETE"
            }
          ],
          "required": true
        },
        {
          "help": "You don't have to add authorization headers; we already did that for you.",
          "name": "headers",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Headers",
          "default": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        {
          "name": "qs",
          "spec": [
            {
              "name": "key",
              "type": "text",
              "label": "Key"
            },
            {
              "name": "value",
              "type": "text",
              "label": "Value"
            }
          ],
          "type": "array",
          "label": "Query String"
        },
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        }
      ],
      "public": true,
      "typeId": 12,
      "appName": "ninox",
      "samples": null,
      "apiJsonc": "{\n    \"url\": \"{{ifempty(connection.privateCloudURL,'https://api.ninox.com/v1/')}}/{{parameters.url}}\",\n    \"method\": \"{{parameters.method}}\",\n    \"qs\": {\n\t\t\"{{...}}\": \"{{toCollection(parameters.qs, 'key', 'value')}}\"\n\t},\n    \"headers\": {\n\t\t\"{{...}}\": \"{{toCollection(parameters.headers, 'key', 'value')}}\"\n\t},\n\t\"body\": \"{{parameters.body}}\",\n\t\"type\": \"text\",\n    \"response\": {\n        \"output\": {\n            \"headers\": \"{{headers}}\",\n            \"body\": \"{{body}}\",\n\t\t\t\"statusCode\": \"{{statusCode}}\"\n        }\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "body",
          "type": "any",
          "label": "Body"
        },
        {
          "name": "headers",
          "type": "collection",
          "label": "Headers"
        },
        {
          "name": "statusCode",
          "type": "number",
          "label": "Status code"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Performs an arbitrary authorized API call.\n",
      "expectJsonc": "[\n    {\n        \"name\": \"url\",\n        \"type\": \"text\",\n        \"label\": \"URL\",\n        \"help\": \"Enter a path relative to the default Ninox Cloud `https://api.ninox.com/v1` for example `/teams/67mm9vc324bM7x/databases` or enter a path relative to your Ninox Private Cloud `https://companyname.ninoxdb.de/teamID/api/v1` for example `/databases`.\",\n        \"required\": true\n    },\n    {\n        \"name\": \"method\",\n        \"type\": \"select\",\n        \"label\": \"Method\",\n        \"required\": true,\n        \"default\": \"GET\",\n        \"options\": [\n            {\n                \"label\": \"GET\",\n                \"value\": \"GET\"\n            },\n            {\n                \"label\": \"POST\",\n                \"value\": \"POST\"\n            },\n            {\n                \"label\": \"PUT\",\n                \"value\": \"PUT\"\n            },\n            {\n                \"label\": \"PATCH\",\n                \"value\": \"PATCH\"\n            },\n            {\n                \"label\": \"DELETE\",\n                \"value\": \"DELETE\"\n            }\n        ]\n    },\n    {\n        \"name\": \"headers\",\n        \"label\": \"Headers\",\n\t\t\"help\": \"You don't have to add authorization headers; we already did that for you.\",\n        \"type\": \"array\",\n        \"spec\": [\n            {\n                \"name\": \"key\",\n                \"label\": \"Key\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ],\n\t\t\"default\": [\n\t\t\t{\n\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\"value\": \"application/json\"\n\t\t\t}\n\t\t]\n    },\n    {\n        \"name\": \"qs\",\n        \"label\": \"Query String\",\n        \"type\": \"array\",\n        \"spec\": [\n            {\n                \"name\": \"key\",\n                \"label\": \"Key\",\n                \"type\": \"text\"\n            },\n            {\n                \"name\": \"value\",\n                \"label\": \"Value\",\n                \"type\": \"text\"\n            }\n        ]\n    },\n    {\n        \"name\": \"body\",\n        \"label\": \"Body\",\n        \"type\": \"any\"\n    }\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"body\",\n\t\t\"label\": \"Body\",\n\t\t\"type\": \"any\"\n\t},\n\t{\n\t\t\"name\": \"headers\",\n\t\t\"label\": \"Headers\",\n\t\t\"type\": \"collection\"\n\t},\n\t{\n\t\t\"name\": \"statusCode\",\n\t\t\"label\": \"Status code\",\n\t\t\"type\": \"number\"\n\t}\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "GetDatabaseTables": {
      "id": 27312,
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables",
        "method": "GET",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{item}}",
          "iterate": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "GetDatabaseTables",
      "epoch": null,
      "flags": {},
      "label": "List Database Tables",
      "scope": [],
      "expect": [
        {
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": "rpc://app%23ninox@1/GetDatabases",
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 10
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "ninox",
      "samples": {
        "id": "A",
        "name": "Customer",
        "fields": [
          {
            "id": "A",
            "name": "First Name",
            "type": "string"
          }
        ]
      },
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"limit\": \"{{parameters.limit}}\",\n\t\t\"output\": \"{{item}}\",\n\t\t\"iterate\": \"{{body}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "text",
          "label": "Table ID"
        },
        {
          "name": "name",
          "type": "text",
          "label": "Name Table"
        },
        {
          "name": "fields",
          "spec": [
            {
              "name": "id",
              "type": "text",
              "label": "Column ID"
            },
            {
              "name": "name",
              "type": "text",
              "label": "Column Name"
            },
            {
              "name": "type",
              "type": "text",
              "label": "Column Type"
            }
          ],
          "type": "collection",
          "label": "Table Columns"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Lists all the tables in a database.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"options\": \"rpc://GetDatabases\",\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t},\n\t{\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 10\n    }\n]",
      "samplesJsonc": "{\n\t\"id\": \"A\",\n\t\"name\": \"Customer\",\n\t\"fields\": [{\n\t\t\"id\": \"A\",\n\t\t\"name\": \"First Name\",\n\t\t\"type\": \"string\"\n\t}]\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"label\": \"Table ID\",\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"name\",\n\t\t\"label\": \"Name Table\",\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"fields\",\n\t\t\"label\": \"Table Columns\",\n\t\t\"type\": \"collection\",\n\t\t\"spec\": [\n\t\t\t{\n\t\t\t\t\"name\": \"id\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Column ID\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"name\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Column Name\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"type\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"label\": \"Column Type\"\n\t\t\t}\n\t\t]\n\t}\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "watchrecordevents": {
      "id": 27313,
      "api": {},
      "rev": 3,
      "crud": null,
      "name": "watchrecordevents",
      "epoch": null,
      "flags": {},
      "label": "Watch Record Events",
      "scope": [],
      "expect": [],
      "public": true,
      "typeId": 10,
      "appName": "ninox",
      "samples": null,
      "apiJsonc": "{\n}",
      "approved": false,
      "hookName": "ninox",
      "learning": false,
      "interface": [],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": null,
      "description": "Receive events when records have been created or updated.",
      "expectJsonc": "[\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "UploadFileToARecord": {
      "id": 27314,
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files",
        "body": {
          "file": {
            "value": "{{parameters.file_data}}",
            "options": {
              "filename": "{{parameters.file_name}}"
            }
          }
        },
        "type": "multipart/form-data",
        "method": "POST",
        "headers": {
          "Content-Type": "multipart/form-data"
        },
        "response": {
          "error": "{{body.message}}",
          "output": {
            "UploadStatus": "{{body}}"
          }
        }
      },
      "rev": 4,
      "crud": "create",
      "name": "UploadFileToARecord",
      "epoch": null,
      "flags": {},
      "label": "Upload File To A Record",
      "scope": [],
      "expect": [
        {
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": {
                        "store": "rpc://app%23ninox@1/GetDatabaseTables",
                        "nested": [
                          {
                            "name": "recordid",
                            "type": "select",
                            "label": "Record",
                            "options": "rpc://app%23ninox@1/GetDatabaseRecords",
                            "required": true
                          }
                        ]
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "The name of the file to be uploaded should not contain the following special characters \\,/,*,?,>,<,|,\"",
          "name": "file_name",
          "type": "text",
          "label": "Name",
          "required": true,
          "semantic": "file:name"
        },
        {
          "name": "file_data",
          "type": "buffer",
          "label": "Data",
          "required": true,
          "semantic": "file:data"
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "ninox",
      "samples": {
        "UploadStatus": "File Uploaded Successfully"
      },
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files\",\n\t\"method\": \"POST\",\n\t\"type\": \"multipart/form-data\",\n\t\"headers\": {\n\t\t\"Content-Type\": \"multipart/form-data\"\n\t},\n\t\"body\": {\n        \"file\": {\n            \"value\": \"{{parameters.file_data}}\",\n            \"options\": {\n                \"filename\": \"{{parameters.file_name}}\"\n            }\n        }\n    },\n\t\"response\": {\n\t\t\"output\": {\n\t\t\t\"UploadStatus\": \"{{body}}\"\n\t\t},\n\t\t\"error\": \"{{body.message}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "UploadStatus",
          "type": "text",
          "label": "Upload Status"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Uploads files to a Ninox record.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"name\": \"recordid\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Record\",\n\t\t\t\t\t\t\t\t\t\t\t\"options\": \"rpc://GetDatabaseRecords\",\n\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"file_name\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Name\",\n\t\t\"required\": true,\n\t\t\"semantic\": \"file:name\",\n\t\t\"help\": \"The name of the file to be uploaded should not contain the following special characters \\\\,/,*,?,>,<,|,\\\"\"\n\t},\n\t{\n\t\t\"name\": \"file_data\",\n\t\t\"type\": \"buffer\",\n\t\t\"label\": \"Data\",\n\t\t\"required\": true,\n\t\t\"semantic\": \"file:data\"\n\t}\n]",
      "samplesJsonc": "{\n\t\"UploadStatus\":\t\"File Uploaded Successfully\"\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"UploadStatus\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Upload Status\"\n\t}\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "DeleteFileFromRecord": {
      "id": 27315,
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files/{{parameters.filename}}",
        "method": "DELETE",
        "response": {
          "output": "{{}}"
        }
      },
      "rev": 4,
      "crud": "delete",
      "name": "DeleteFileFromRecord",
      "epoch": null,
      "flags": {},
      "label": "Delete File From Record",
      "scope": [],
      "expect": [
        {
          "mode": "edit",
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "mode": "edit",
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "mode": "edit",
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": {
                        "store": "rpc://app%23ninox@1/GetDatabaseTables",
                        "nested": [
                          {
                            "mode": "edit",
                            "name": "recordid",
                            "type": "select",
                            "label": "Record",
                            "options": {
                              "store": "rpc://app%23ninox@1/GetDatabaseRecords",
                              "nested": [
                                {
                                  "mode": "edit",
                                  "name": "filename",
                                  "type": "select",
                                  "label": "File",
                                  "options": "rpc://app%23ninox@1/GetRecordFiles",
                                  "required": true
                                }
                              ]
                            },
                            "required": true
                          }
                        ]
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "ninox",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files/{{parameters.filename}}\",\n\t\"method\": \"DELETE\",\n\t\"response\": {\n\t\t\"output\": \"{{}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Deletes a file from a Ninox record.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"mode\" : \"edit\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"name\": \"recordid\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Record\",\n\t\t\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseRecords\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"name\": \"filename\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"label\": \"File\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"mode\" : \"edit\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"options\": \"rpc://GetRecordFiles\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "FetchFilesFromRecord": {
      "id": 27316,
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files",
        "method": "GET",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{transformTimestamps(item)}}",
          "iterate": "{{body}}"
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "FetchFilesFromRecord",
      "epoch": null,
      "flags": {},
      "label": "List Files From Record",
      "scope": [],
      "expect": [
        {
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": {
                        "store": "rpc://app%23ninox@1/GetDatabaseTables",
                        "nested": [
                          {
                            "name": "recordid",
                            "type": "select",
                            "label": "Record",
                            "options": "rpc://app%23ninox@1/GetDatabaseRecords",
                            "required": true
                          }
                        ]
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 10
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "ninox",
      "samples": {
        "seq": 220,
        "name": "image3.jpg",
        "size": 56969,
        "contentType": "image/jpeg",
        "modifiedDate": 1550506659843,
        "modifiedUser": "......"
      },
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"limit\": \"{{parameters.limit}}\",\n\t\t\"output\": \"{{transformTimestamps(item)}}\",\n\t\t\"iterate\": \"{{body}}\"\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "name",
          "type": "text",
          "label": "Filename"
        },
        {
          "name": "contentType",
          "type": "text",
          "label": "Type of content"
        },
        {
          "name": "size",
          "type": "integer",
          "label": "File size"
        },
        {
          "name": "modifiedDate",
          "type": "date",
          "label": "Date modified"
        },
        {
          "name": "modifiedUser",
          "type": "text",
          "label": "ID User who modified"
        },
        {
          "name": "seq",
          "type": "uinteger",
          "label": "Database change sequence"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Lists files associated with the record. Does not download the file, just information about the files.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"name\": \"recordid\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Record\",\n\t\t\t\t\t\t\t\t\t\t\t\"options\": \"rpc://GetDatabaseRecords\",\n\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t},\n\t{\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 10\n    }\n]",
      "samplesJsonc": "{\n   \"name\": \"image3.jpg\",\n   \"contentType\": \"image/jpeg\",\n   \"size\": 56969,\n   \"modifiedDate\": 1550506659843,\n   \"modifiedUser\": \"......\",\n   \"seq\": 220\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"name\",\n\t\t\"label\": \"Filename\",\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"contentType\",\n\t\t\"label\": \"Type of content\",\n\t\t\"type\": \"text\"\n\t},\n\t{\n\t\t\"name\": \"size\",\n\t\t\"type\": \"integer\",\n\t\t\"label\": \"File size\"\n\t},\n\t{\n\t\t\"name\": \"modifiedDate\",\n\t\t\"type\": \"date\",\n\t\t\"label\": \"Date modified\"\n\t},\n\t{\n\t\t\"name\": \"modifiedUser\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"ID User who modified\"\n\t},\n\t{\n\t\t\"name\": \"seq\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Database change sequence\"\n\t}\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "CreateOrUpdateRecords": {
      "id": 27317,
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records",
        "body": "{{prepareRequest(omit(parameters, 'teamid', 'databaseid', 'tableid'), metadata.expect)}}",
        "method": "POST",
        "response": {
          "output": "{{formatOutput(body,metadata.expect)}}"
        }
      },
      "rev": 6,
      "crud": "update",
      "name": "CreateOrUpdateRecords",
      "epoch": null,
      "flags": {},
      "label": "Create Record",
      "scope": [],
      "expect": [
        {
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": {
                        "store": "rpc://app%23ninox@1/GetDatabaseTables",
                        "nested": "rpc://app%23ninox@1/GetDatabaseTableFields"
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "ninox",
      "samples": {
        "A": "13:30:00",
        "C": "text",
        "D": "text multiline",
        "E": "HTML related text",
        "F": 5.6,
        "G": "true",
        "H": "choice 1",
        "I": "multiple v",
        "J": "2019-11-25",
        "K": "2019-11-25T05:30:00Z",
        "L": "02:30:00",
        "M": {
          "appointment_end": "2 augustus 2019 23:00",
          "appointment_start": "2 augustus 2019 22:00"
        },
        "N": "blabla.png",
        "O": "https://www.google.com",
        "P": "louis@email.com",
        "Q": 258653,
        "R": "Marienstraße 10, 10117 Berlin, Germany <52.52202224731445,13.38234806060791>",
        "S": "#42A0FB",
        "T": "info",
        "_cd": "2019-08-05T16:35:07",
        "_cu": "admin",
        "_id": "36",
        "_md": "2019-08-05T16:35:07",
        "_mu": "admin"
      },
      "apiJsonc": "{\n    \"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records\",\n    \"method\": \"POST\",\n    \"body\": \"{{prepareRequest(omit(parameters, 'teamid', 'databaseid', 'tableid'), metadata.expect)}}\",\n    \"response\": {\n        \"output\": \"{{formatOutput(body,metadata.expect)}}\"\n    }\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "_id",
          "type": "uinteger",
          "label": "Record ID"
        },
        {
          "name": "_cd",
          "type": "date",
          "label": "Created at"
        },
        {
          "name": "_md",
          "type": "date",
          "label": "Modified at"
        },
        {
          "name": "_cu",
          "type": "text",
          "label": "Created by"
        },
        {
          "name": "_mu",
          "type": "text",
          "label": "Modified by"
        },
        "rpc://app%23ninox@1/getdatabasefieldsinterface"
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Creates a new record in a table.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\t\"nested\": \"rpc://GetDatabaseTableFields\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": "{\n\t\"_id\":  \"36\",\n\t\"_cu\":\t\"admin\",\n\t\"_cd\":\t\"2019-08-05T16:35:07\",\n\t\"_mu\":\t\"admin\",\n\t\"_md\":\t\"2019-08-05T16:35:07\",\n\t\"A\":\t\"13:30:00\",\n\t\"C\":\t\"text\",\n\t\"D\":\t\"text multiline\",\n\t\"E\": \t\"HTML related text\",\n\t\"F\":\t5.6,\n\t\"G\":\t\"true\",\n\t\"H\":\t\"choice 1\",\n\t\"I\":\t\"multiple v\",\n\t\"J\":\t\"2019-11-25\",\n\t\"K\":\t\"2019-11-25T05:30:00Z\",\n\t\"L\":\t\"02:30:00\",\n\t\"M\": {\n\t\t\"appointment_start\":\t\"2 augustus 2019 22:00\",\n\t\t\"appointment_end\":\t\"2 augustus 2019 23:00\"\n\t},\n\t\"N\":\t\"blabla.png\",\n\t\"O\":\t\"https://www.google.com\",\n\t\"P\":\t\"louis@email.com\",\n\t\"Q\":\t258653,\n\t\"R\":\t\"Marienstraße 10, 10117 Berlin, Germany <52.52202224731445,13.38234806060791>\",\n\t\"S\":\t\"#42A0FB\",\n\t\"T\": \"info\"\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n    {\n        \"name\": \"_id\",\n        \"type\": \"uinteger\",\n        \"label\": \"Record ID\"\n    },\n    {\n        \"name\": \"_cd\",\n        \"type\": \"date\",\n        \"label\": \"Created at\"\n    },\n    {\n        \"name\": \"_md\",\n        \"type\": \"date\",\n        \"label\": \"Modified at\"\n    },\n    {\n        \"name\": \"_cu\",\n        \"type\": \"text\",\n        \"label\": \"Created by\"\n    },\n    {\n        \"name\": \"_mu\",\n        \"type\": \"text\",\n        \"label\": \"Modified by\"\n    },\n    \"rpc://getdatabasefieldsinterface\"\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "DownloadFileFromRecord": {
      "id": 27318,
      "api": {
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files/{{parameters.filename}}",
        "method": "GET",
        "response": {
          "type": "binary",
          "output": {
            "fileName": "{{parameters.filename}}",
            "fileOutput": "{{body}}"
          }
        }
      },
      "rev": 4,
      "crud": "read",
      "name": "DownloadFileFromRecord",
      "epoch": null,
      "flags": {},
      "label": "Download File From Record",
      "scope": [],
      "expect": [
        {
          "mode": "edit",
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "mode": "edit",
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "mode": "edit",
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": {
                        "store": "rpc://app%23ninox@1/GetDatabaseTables",
                        "nested": [
                          {
                            "mode": "edit",
                            "name": "recordid",
                            "type": "select",
                            "label": "Record",
                            "options": {
                              "store": "rpc://app%23ninox@1/GetDatabaseRecords",
                              "nested": [
                                {
                                  "mode": "edit",
                                  "name": "filename",
                                  "type": "select",
                                  "label": "File",
                                  "options": "rpc://app%23ninox@1/GetRecordFiles",
                                  "required": true
                                }
                              ]
                            },
                            "required": true
                          }
                        ]
                      },
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        }
      ],
      "public": true,
      "typeId": 4,
      "appName": "ninox",
      "samples": null,
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records/{{parameters.recordid}}/files/{{parameters.filename}}\",\n\t\"method\": \"GET\",\n\t\"response\": {\n\t\t\"type\": \"binary\",\n\t\t\"output\": {\n\t\t\t\"fileOutput\": \"{{body}}\",\n\t\t\t\"fileName\": \"{{parameters.filename}}\"\n\t\t}\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "fileOutput",
          "type": "buffer",
          "label": "Data",
          "semantic": "file:data"
        },
        {
          "name": "fileName",
          "type": "text",
          "label": "File Name",
          "semantic": "file:name"
        }
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Downloads a file attached to a record",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"mode\": \"edit\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"mode\": \"edit\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"mode\": \"edit\",\n\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"name\": \"recordid\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Record\",\n\t\t\t\t\t\t\t\t\t\t\t\"mode\": \"edit\",\n\t\t\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"store\": \"rpc://GetDatabaseRecords\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"name\": \"filename\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"label\": \"File\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"mode\": \"edit\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"options\": \"rpc://GetRecordFiles\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t}\n]",
      "samplesJsonc": null,
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"fileOutput\",\n\t\t\"type\": \"buffer\",\n\t\t\"label\": \"Data\",\n\t\t\"semantic\": \"file:data\"\n\t},\n\t{\n\t\t\"name\": \"fileName\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"File Name\",\n\t\t\"semantic\": \"file:name\"\n\t}\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    },
    "GetDatabaseTableRecords": {
      "id": 27319,
      "api": {
        "qs": "{{omit(parameters,'limit','teamid','databaseid','tableid')}}",
        "url": "/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records",
        "method": "GET",
        "response": {
          "limit": "{{parameters.limit}}",
          "output": "{{formatOutputAlt(item,metadata.interface)}}",
          "iterate": "{{body}}"
        },
        "pagination": {
          "qs": {
            "page": "{{pagination.page-1}}"
          }
        }
      },
      "rev": 5,
      "crud": "read",
      "name": "GetDatabaseTableRecords",
      "epoch": null,
      "flags": {},
      "label": "List Database Table Records",
      "scope": [],
      "expect": [
        {
          "name": "teamid",
          "type": "select",
          "label": "Team",
          "options": {
            "store": "rpc://app%23ninox@1/GetTeams",
            "nested": [
              {
                "name": "databaseid",
                "type": "select",
                "label": "Database",
                "options": {
                  "store": "rpc://app%23ninox@1/GetDatabases",
                  "nested": [
                    {
                      "name": "tableid",
                      "type": "select",
                      "label": "Table",
                      "options": "rpc://app%23ninox@1/GetDatabaseTables",
                      "required": true
                    }
                  ]
                },
                "required": true
              }
            ]
          },
          "required": true
        },
        {
          "help": "The field name used to order the result",
          "name": "order",
          "type": "text",
          "label": "Sorting Field name",
          "advanced": true
        },
        {
          "help": "Order descending instead of ascending",
          "name": "desc",
          "type": "boolean",
          "label": "Descending",
          "advanced": true
        },
        {
          "help": "Show newest records first (cannot be combined with order)",
          "name": "new",
          "type": "boolean",
          "label": "Newest first",
          "advanced": true
        },
        {
          "help": "Show latest updates first (cannot be combined with order)",
          "name": "updated",
          "type": "boolean",
          "label": "Updated first",
          "advanced": true
        },
        {
          "help": "Show only the records with a higher ID than the one entered.",
          "name": "sinceId",
          "type": "uinteger",
          "label": "Since ID number",
          "advanced": true
        },
        {
          "help": "Show only records that are created or updated after the specified database change sequence number",
          "name": "sinceSq",
          "type": "uinteger",
          "label": "Since sequence number",
          "advanced": true
        },
        {
          "help": "The maximum number of results to be worked with during one execution cycle.",
          "name": "limit",
          "type": "uinteger",
          "label": "Limit",
          "default": 10
        }
      ],
      "public": true,
      "typeId": 9,
      "appName": "ninox",
      "samples": {
        "id": 1,
        "fields": {
          "A": "Erica-Maria",
          "B": "Young"
        },
        "sequence": 418,
        "createdAt": "2018-06-13T12:16:32",
        "createdBy": "ekL2xSxuD7jtN2F2D",
        "modifiedAt": "2018-06-15T16:05:07",
        "modifiedBy": "ekL2xSxuD7jtN2F2D"
      },
      "apiJsonc": "{\n\t\"url\": \"/databases/{{parameters.databaseid}}/tables/{{parameters.tableid}}/records\",\n\t\"method\": \"GET\",\n\t\"qs\": \"{{omit(parameters,'limit','teamid','databaseid','tableid')}}\",\n\t\"response\": {\n\t\t\"limit\": \"{{parameters.limit}}\",\n\t\t\"output\": \"{{formatOutputAlt(item,metadata.interface)}}\",\n\t\t\"iterate\": \"{{body}}\"\n\t},\n\t\"pagination\": {\n\t\t\"qs\": {\n\t\t\t\"page\": \"{{pagination.page-1}}\"\n\t\t}\n\t}\n}",
      "approved": false,
      "hookName": null,
      "learning": false,
      "interface": [
        {
          "name": "id",
          "type": "uinteger",
          "label": "Record ID"
        },
        {
          "name": "sequence",
          "type": "uinteger",
          "label": "Change Sequence Number"
        },
        {
          "name": "createdAt",
          "type": "date",
          "label": "Created At"
        },
        {
          "name": "modifiedAt",
          "type": "date",
          "label": "Modified At"
        },
        {
          "name": "createdBy",
          "type": "text",
          "label": "Created By"
        },
        {
          "name": "modifiedBy",
          "type": "text",
          "label": "Modified By"
        },
        "rpc://app%23ninox@1/getdatabasetablefieldsinterfalt"
      ],
      "appVersion": 1,
      "deprecated": false,
      "epochJsonc": null,
      "parameters": [],
      "scopeJsonc": "[\n]",
      "accountName": "ninox",
      "description": "Lists all records of the specified table.",
      "expectJsonc": "[\n\t{\n\t\t\"name\": \"teamid\",\n\t\t\"type\": \"select\",\n\t\t\"label\": \"Team\",\n\t\t\"options\": {\n\t\t\t\"store\": \"rpc://GetTeams\",\n\t\t\t\"nested\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"databaseid\",\n\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\"label\": \"Database\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"store\": \"rpc://GetDatabases\",\n\t\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"tableid\",\n\t\t\t\t\t\t\t\t\"type\": \"select\",\n\t\t\t\t\t\t\t\t\"label\": \"Table\",\n\t\t\t\t\t\t\t\t\"options\": \"rpc://GetDatabaseTables\",\n\t\t\t\t\t\t\t\t\"required\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"order\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Sorting Field name\",\n\t\t\"advanced\": true,\n\t\t\"help\": \"The field name used to order the result\"\n\t},\n\t{\n\t\t\"name\": \"desc\",\n\t\t\"type\": \"boolean\",\n\t\t\"label\": \"Descending\",\n\t\t\"advanced\": true,\n\t\t\"help\": \"Order descending instead of ascending\"\n\t},\t\n\t{\n\t\t\"name\": \"new\",\n\t\t\"type\": \"boolean\",\n\t\t\"label\": \"Newest first\",\n\t\t\"advanced\": true,\n\t\t\"help\": \"Show newest records first (cannot be combined with order)\"\n\t},\t\n\t{\n\t\t\"name\": \"updated\",\n\t\t\"type\": \"boolean\",\n\t\t\"label\": \"Updated first\",\n\t\t\"advanced\": true,\n\t\t\"help\": \"Show latest updates first (cannot be combined with order)\"\n\t},\t\n\t{\n\t\t\"name\": \"sinceId\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Since ID number\",\n\t\t\"advanced\": true,\n\t\t\"help\": \"Show only the records with a higher ID than the one entered.\"\n\t},\t\n\t{\n\t\t\"name\": \"sinceSq\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Since sequence number\",\n\t\t\"advanced\": true,\n\t\t\"help\": \"Show only records that are created or updated after the specified database change sequence number\"\n\t},\n\t{\n        \"help\": \"The maximum number of results to be worked with during one execution cycle.\",\n        \"name\": \"limit\",\n        \"type\": \"uinteger\",\n        \"label\": \"Limit\",\n        \"default\": 10\n    }\n]",
      "samplesJsonc": "{\n    \"id\": 1,\n    \"sequence\": 418,\n    \"createdAt\": \"2018-06-13T12:16:32\",\n    \"createdBy\": \"ekL2xSxuD7jtN2F2D\",\n    \"modifiedAt\": \"2018-06-15T16:05:07\",\n    \"modifiedBy\": \"ekL2xSxuD7jtN2F2D\",\n    \"fields\": {\n        \"A\": \"Erica-Maria\",\n        \"B\": \"Young\"\n    }\n}",
      "altAccountName": null,
      "interfaceJsonc": "[\n\t{\n\t\t\"name\": \"id\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Record ID\"\n\t},\n\t{\n\t\t\"name\": \"sequence\",\n\t\t\"type\": \"uinteger\",\n\t\t\"label\": \"Change Sequence Number\"\n\t},\n\t{\n\t\t\"name\": \"createdAt\",\n\t\t\"type\": \"date\",\n\t\t\"label\": \"Created At\"\n\t},\n\t{\n\t\t\"name\": \"modifiedAt\",\n\t\t\"type\": \"date\",\n\t\t\"label\": \"Modified At\"\n\t},\n\t{\n\t\t\"name\": \"createdBy\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Created By\"\n\t},\n\t{\n\t\t\"name\": \"modifiedBy\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Modified By\"\n\t},\n\t\"rpc://getdatabasetablefieldsinterfalt\"\n]",
      "parametersJsonc": "[\n]",
      "centicreditsFormula": null,
      "centicreditsFormulaDescription": null,
      "centicreditsFormulaDocumentationUrl": null
    }
  },
  "approved": true,
  "authorId": 671322,
  "billable": true,
  "inReview": false,
  "keywords": null,
  "language": "en",
  "_accounts": {
    "ninox": {
      "api": {
        "log": {
          "sanitize": [
            "request.headers.Authorization"
          ]
        },
        "url": "{{if(parameters.privateCloudURL, parameters.privateCloudURL + '/databases', 'https://api.ninox.com/v1/teams')}}",
        "method": "GET",
        "headers": {
          "Content-Type": "application/json",
          "Authorization": "Bearer {{parameters.apiKey}}"
        },
        "response": {
          "data": {
            "privateCloudURL": "{{parameters.privateCloudURL}}"
          },
          "error": {
            "type": "InvalidConfigurationError",
            "message": "[{{statusCode}}] {{body.message || body}}"
          },
          "valid": "{{if(body.error, false, true)}}"
        }
      },
      "rev": 10,
      "name": "ninox",
      "type": "basic",
      "label": "Ninox",
      "scope": [],
      "scopes": {},
      "aliasTo": null,
      "appName": "ninox",
      "install": {},
      "apiJsonc": "{\n\t\"url\": \"{{if(parameters.privateCloudURL, parameters.privateCloudURL + '/databases', 'https://api.ninox.com/v1/teams')}}\",\n\t\"method\": \"GET\",\n\t\"headers\": {\n\t\t\"Authorization\": \"Bearer {{parameters.apiKey}}\",\n\t\t\"Content-Type\": \"application/json\"\n\t},\n\t\"response\": {\n\t\t\"data\": {\n\t\t\t\"privateCloudURL\": \"{{parameters.privateCloudURL}}\"\n\t\t},\n\t\t\"error\": {\n\t\t\t\"type\": \"InvalidConfigurationError\",\n\t\t\t\"message\": \"[{{statusCode}}] {{body.message || body}}\"\n\t\t},\n\t\t\"valid\": \"{{if(body.error, false, true)}}\"\n\t},\n\t\"log\": {\n\t\t\"sanitize\": [\"request.headers.Authorization\"]\n\t}\n}",
      "authorId": 671322,
      "appVersion": 1,
      "parameters": [
        {
          "name": "apiKey",
          "type": "password",
          "label": "API Key",
          "editable": true,
          "required": true
        },
        {
          "help": "If you are hosting Ninox Private Cloud on Premise e.g. `https://companyname.ninoxdb.de/teamID/api/v1` or `https://companyname.ninox.com/teamID/api/v1`.\nThis value cannot be changed later unless you create a new connection.",
          "name": "privateCloudURL",
          "type": "text",
          "label": "Private Cloud URL",
          "editable": false
        }
      ],
      "scopeJsonc": "[\n]",
      "installSpec": [],
      "scopesJsonc": "{\n}",
      "installJsonc": "{\n}",
      "depAccountName": null,
      "depAccountScope": null,
      "parametersJsonc": "[\n\t{\n\t\t\"name\": \"apiKey\",\n\t\t\"type\": \"password\",\n\t\t\"label\": \"API Key\",\n\t\t\"required\": true,\n\t\t\"editable\": true\n\t},\n\t{\n\t\t\"name\": \"privateCloudURL\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Private Cloud URL\",\n\t\t\"editable\": false,\n\t\t\"help\": \"If you are hosting Ninox Private Cloud on Premise e.g. `https://companyname.ninoxdb.de/teamID/api/v1` or `https://companyname.ninox.com/teamID/api/v1`.\\nThis value cannot be changed later unless you create a new connection.\"\n\t}\n]",
      "installSpecJsonc": "[\n]",
      "connectedSystemName": null,
      "depAccountScopeJsonc": null
    },
    "ninox2": {
      "api": {
        "log": {
          "sanitize": [
            "request.headers.Authorization"
          ]
        },
        "url": "{{ifempty(parameters.privateCloudURL+'/teams','https://api.ninoxdb.de/v1/teams')}}",
        "method": "GET",
        "headers": {
          "Content-Type": "application/json",
          "Authorization": "Bearer {{parameters.apiKey}}"
        },
        "response": {
          "error": {
            "type": "InvalidConfigurationError",
            "message": "[{{statusCode}}] {{body.message || body}}"
          },
          "valid": "{{if(body.error, false, true)}}"
        }
      },
      "rev": 8,
      "name": "ninox2",
      "type": "basic",
      "label": "Ninox Private (unused)",
      "scope": [],
      "scopes": {},
      "aliasTo": null,
      "appName": "ninox",
      "install": {},
      "apiJsonc": "{\n\t\"url\": \"{{ifempty(parameters.privateCloudURL+'/teams','https://api.ninoxdb.de/v1/teams')}}\",\n\t\"method\": \"GET\",\n\t\"headers\": {\n\t\t\"Authorization\": \"Bearer {{parameters.apiKey}}\",\n\t\t\"Content-Type\": \"application/json\"\n\t},\n\t\"response\": {\n\t\t\"error\": {\n\t\t\t\"type\": \"InvalidConfigurationError\",\n\t\t\t\"message\": \"[{{statusCode}}] {{body.message || body}}\"\n\t\t},\n\t\t\"valid\": \"{{if(body.error, false, true)}}\"\n\t},\n\t\"log\": {\n\t\t\"sanitize\": [\"request.headers.Authorization\"]\n\t}\n}",
      "authorId": 671322,
      "appVersion": 1,
      "parameters": [
        {
          "name": "apiKey",
          "type": "text",
          "label": "API Key",
          "required": true
        },
        {
          "help": "If you are hosting Ninox Private Cloud on Premise e.g. `https://companyname.ninoxdb.de/teamID/api/v1`.",
          "name": "privateCloudURL",
          "type": "text",
          "label": "Private Cloud URL"
        }
      ],
      "scopeJsonc": "[\n]",
      "installSpec": [],
      "scopesJsonc": "{\n}",
      "installJsonc": "{\n}",
      "depAccountName": null,
      "depAccountScope": null,
      "parametersJsonc": "[\n\t{\n\t\t\"name\": \"apiKey\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"API Key\",\n\t\t\"required\": true\n\t},\n\t{\n\t\t\"name\": \"privateCloudURL\",\n\t\t\"type\": \"text\",\n\t\t\"label\": \"Private Cloud URL\",\n\t\t\"help\": \"If you are hosting Ninox Private Cloud on Premise e.g. `https://companyname.ninoxdb.de/teamID/api/v1`.\"\n\t}\n]",
      "installSpecJsonc": "[\n]",
      "connectedSystemName": null,
      "depAccountScopeJsonc": null
    }
  },
  "baseJsonc": "{\n    \"baseUrl\": \"{{ifempty(connection.privateCloudURL,'https://api.ninox.com/v1/teams/' + parameters.teamid )}}\",\n    \"headers\": {\n        \"Authorization\": \"Bearer {{connection.apiKey}}\",\n        \"Content-Type\": \"application/json\"\n    },\n    \"timeout\": \"{{common.timeout || 40000}}\",\n    \"response\": {\n        \"error\": {\n            \"404\": {\n                \"type\": \"DataError\",\n                \"message\": \"[{{statusCode}}] {{body.message || body}}\"\n            },\n            \"500\": {\n                \"type\": \"UnknownError\",\n                \"message\": \"[{{statusCode}}] {{body.message || body}}\"\n            },\n            \"type\": \"UnknownError\",\n            \"message\": \"[{{statusCode}}] {{body.message || body}}\"\n        }\n    },\n    \"log\": {\n        \"sanitize\": [\n            \"request.headers.Authorization\"\n        ]\n    }\n}",
  "countries": null,
  "_functions": {
    "omit": {
      "rev": 3,
      "code": "function omit(collection, ...parameters) {\n\tconst result = {};\n\t\n\tfor (let key in collection) {\n\t\tif (!parameters.includes(key)) {\n\t\t\tresult[key] = collection[key];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
      "name": "omit",
      "test": null,
      "appName": "ninox",
      "arguments": "(collection, ...parameters)",
      "appVersion": 1
    },
    "parseDates": {
      "rev": 2,
      "code": "function parseDates(obj) {\n    const datePattern =\n        /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/; // enhance it to match your use-case\n\n    if (obj) {\n        if (typeof obj === \"object\") {\n            if (Array.isArray(obj)) {\n                obj = obj.map((item) => iml.parseDates(item));\n            } else {\n                for (let [key, value] of Object.entries(obj)) {\n                    if (value) {\n                        if (\n                            typeof value === \"string\" &&\n                            value.match(datePattern)\n                        ) {\n                            obj[key] = iml.parseDate(\n                                iml.formatDate(\n                                    value,\n                                    \"YYYY-MM-DD\"\n                                )\n                            );\n                        } else if (Array.isArray(value)) {\n                            obj[key] = value.map((item) =>\n                                iml.parseDates(item)\n                            );\n                        } else if (typeof value === \"object\") {\n                            obj[key] = iml.parseDates(value);\n                        }\n                    }\n                }\n            }\n        }\n        if (typeof obj === \"string\" && obj.match(datePattern)) {\n            return iml.parseDate(\n                iml.formatDate(obj, \"YYYY-MM-DD\")\n            );\n        }\n    }\n\n    return obj;\n}",
      "name": "parseDates",
      "test": null,
      "appName": "ninox",
      "arguments": "(obj)",
      "appVersion": 1
    },
    "removeNull": {
      "rev": 3,
      "code": "function removeNull(src) {\n\tif (src && typeof src === 'object') {\n\t\tObject.keys(src).forEach(key => {\n\t\t\tif (src[key] == null) {\n\t\t\t\tdelete src[key];\n\t\t\t} else if (typeof src[key] === 'object') {\n\t\t\t\timl.removeNull(src[key]);\n\t\t\t}\n\t\t});\n\t}\n\treturn src;\n}",
      "name": "removeNull",
      "test": null,
      "appName": "ninox",
      "arguments": "(src)",
      "appVersion": 1
    },
    "parseDates2": {
      "rev": 2,
      "code": "function parseDates2(obj) {\n    const datePattern =\n        /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([0-1][0-9]|[2][0-4]):[0-5][0-9]:[0-5][0-9]$/; // enhance it to match your use-case\n\n    if (obj) {\n        if (typeof obj === \"object\") {\n            if (Array.isArray(obj)) {\n                obj = obj.map((item) => iml.parseDates(item));\n            } else {\n                for (let [key, value] of Object.entries(obj)) {\n                    if (value) {\n                        if (\n                            typeof value === \"string\" &&\n                            value.match(datePattern)\n                        ) {\n                            obj[key] = iml.parseDate(\n                                iml.formatDate(\n                                    value,\n                                    \"YYYY-MM-DDTHH:mm:ss\"\n                                )\n                            );\n                        } else if (Array.isArray(value)) {\n                            obj[key] = value.map((item) =>\n                                iml.parseDates(item)\n                            );\n                        } else if (typeof value === \"object\") {\n                            obj[key] = iml.parseDates(value);\n                        }\n                    }\n                }\n            }\n        }\n        if (typeof obj === \"string\" && obj.match(datePattern)) {\n            return iml.parseDate(\n                iml.formatDate(obj, \"YYYY-MM-DDTHH:mm:ss\")\n            );\n        }\n    }\n\n    return obj;\n}",
      "name": "parseDates2",
      "test": null,
      "appName": "ninox",
      "arguments": "(obj)",
      "appVersion": 1
    },
    "formatOutput": {
      "rev": 3,
      "code": "function formatOutput(output, metadata) {\n\t// Is used to transform the server response from Create Record back to Integromat types.\n\tif (!output || !metadata) return null;\n\n\t//format fixed fields\n\toutput[\"_cd\"] = new Date(output[\"_cd\"] + '.000Z');\n\toutput[\"_md\"] = new Date(output[\"_md\"] + '.000Z');\n\t//format record specific fields\n\tfor (const key in output) {\n\t\tlet metadataObject = metadata.find(elem => elem.name === key);\n\n\t\tif (metadataObject && metadataObject.meta && metadataObject.meta.type) { //if meta.type is empty we assume no transformation is required\n\t\t\toutput[key] = iml.transformOutPutValue(output[key], metadataObject.meta.type);\t\t\t\n\t\t}\n\t}\n\t\n\treturn output;\n}",
      "name": "formatOutput",
      "test": null,
      "appName": "ninox",
      "arguments": "(output, metadata)",
      "appVersion": 1
    },
    "arrayOrObject": {
      "rev": 3,
      "code": "function arrayOrObject(output) {\n\tif (output instanceof Array && output.length === 0) {\n\t\treturn null;\n\t} else {\n\t\treturn output;\n\t}\n}",
      "name": "arrayOrObject",
      "test": null,
      "appName": "ninox",
      "arguments": "(output)",
      "appVersion": 1
    },
    "prepareRequest": {
      "rev": 3,
      "code": "function prepareRequest(parameters, metadata) {\n\tif (!parameters || !metadata) return null;\n\n\tlet params = iml.removeEmptyObjects(iml.removeEmptyArrays(iml.removeNull(parameters)));\n\tfor (const key in params) {\n\t\tlet metadataObject = metadata.find(elem => elem.name === key);\n\t\t\n\t\tif (metadataObject && metadataObject.meta && metadataObject.meta.type) { //if meta.type is empty we assume no transformation is required\n\t\t\tparams[key] = iml.transformValue(params[key], metadataObject.meta.type);\n\t\t}\n\t}\n\t\n\treturn params;\n}",
      "name": "prepareRequest",
      "test": null,
      "appName": "ninox",
      "arguments": "(parameters, metadata)",
      "appVersion": 1
    },
    "transformValue": {
      "rev": 3,
      "code": "function transformValue(value, ninoxType) {\n\t// Is used to transform the inputted module parameters to the suitable form that Ninox requires.\n\tif (value === null || !ninoxType) return; // value vs value === null (first also filters \"\", second does not)\n\t\n\tlet newValue = value;\n\t\n\tswitch (ninoxType) {\n\t\tcase \"appointment\":\n\t\t\t// Appointments are passed through in the following way: start datetime of the appointment and number milliseconds specifying the duration separated by a '/' character.\n\t\t\t// E.g. 1557496437632/3600000 - This will create an appointment starting from 10 May 2019 - 01:53 P.M CEST that will last for an hour. \n\t\t\tnewValue = Date.parse(value.appointment_start) + '/' + (Date.parse(value.appointment_end) - Date.parse(value.appointment_start));\n\t\t\tbreak;\n\t\tcase \"boolean\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"choice\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"color\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"date\":\n\t\t\t// do nothing, regex validate happens in the generation of the field\n\t\t\tbreak;\n\t\tcase \"email\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"file\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"html\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"icon\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"link\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"location\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"multi\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"number\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"phone\":\n\t\t\t// do nothing\n\t\t\tbreak;\t\n\t\tcase \"ref\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"string\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"timeinterval\":\n\t\t\t// Do nothing\n\t\t\tbreak;\n\t\tcase \"timestamp\":\n\t\t\t// Do nothing\n\t\t\tbreak;\n\t\tcase \"time\":\n\t\t\t// Do nothing\n\t\t\tbreak;\n\t\tcase \"user\":\n\t\t\t// Do nothing\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn;\n\t}\n\t\n\treturn newValue;\n}",
      "name": "transformValue",
      "test": null,
      "appName": "ninox",
      "arguments": "(value, ninoxType)",
      "appVersion": 1
    },
    "formatOutputAlt": {
      "rev": 11,
      "code": "function formatOutputAlt(output, metadata) {\n    // Is used to transform the server response from Get Record, Look Up Record and Update Record back to Integromat types.\n    if (!output || !metadata) return null;\n\n    //format fixed fields\n    output['createdAt'] = new Date(output['createdAt'] + '.000Z');\n    output['modifiedAt'] = new Date(output['modifiedAt'] + '.000Z');\n    iml.parseDates(output);\n    iml.parseDates2(output);\n\n    //format record specific fields\n    new_fields_object = {};\n    let metadataObject_fields = metadata.find((elem) => elem.name === 'fields')?.spec || [];\n    for (const key in output.fields) {\n        let metadataObject = metadataObject_fields.find((elem) => elem.label === key)\n\n        if (metadataObject) {\n            new_fields_object[metadataObject.name] = iml.transformOutPutValue(\n                output.fields[key],\n                metadataObject.meta.type,\n            );\n            delete output.fields[key];\n        }\n    }\n\n    output.fields = new_fields_object;\n\n    return output;\n}\n",
      "name": "formatOutputAlt",
      "test": "it('should return null if output or metadata is missing', function () {\r\n    assert.strictEqual(formatOutputAlt(null, []), null);\r\n    assert.strictEqual(formatOutputAlt({}, null), null);\r\n});\r\n\r\nit('should format createdAt and modifiedAt fields correctly', function () {\r\n    let output = {\r\n        createdAt: '2024-02-04T12:00:00',\r\n        modifiedAt: '2024-02-04T15:30:00',\r\n        fields: {},\r\n    };\r\n    let metadata = [{ name: 'fields', spec: [] }];\r\n    let result = formatOutputAlt(output, metadata);\r\n    assert.strictEqual(result.createdAt instanceof Date, true);\r\n    assert.strictEqual(result.modifiedAt instanceof Date, true);\r\n});\r\n\r\nit('should map field labels to metadata names', function () {\r\n    let output = { fields: { 'Test Field': 'value' } };\r\n    let metadata = [\r\n        {\r\n            name: 'fields',\r\n            spec: [{ label: 'Test Field', name: 'testField', meta: { type: 'string' } }],\r\n        },\r\n    ];\r\n    let result = formatOutputAlt(output, metadata);\r\n    assert.strictEqual(result.fields.hasOwnProperty('Test Field'), false);\r\n    assert.strictEqual(result.fields.hasOwnProperty('testField'), true);\r\n});\r\n\r\nit('should transform output values using iml.transformOutPutValue', function () {\r\n    let output = { fields: { 'Test Field': 'value' } };\r\n    let metadata = [\r\n        {\r\n            name: 'fields',\r\n            spec: [{ label: 'Test Field', name: 'testField', meta: { type: 'string' } }],\r\n        },\r\n    ];\r\n    let result = formatOutputAlt(output, metadata);\r\n    assert.strictEqual(result.fields.testField, 'value');\r\n});\r\n",
      "appName": "ninox",
      "arguments": "(output, metadata)",
      "appVersion": 1
    },
    "formatOutputAlt1": {
      "rev": 2,
      "code": "function formatOutputAlt1(output, metadata) {\n\t// Is used to transform the server response from Get Record, Look Up Record and Update Record back to Integromat types.\n\tif (!output || !metadata) return null;\n\t\n\t//format fixed fields\n\toutput[\"createdAt\"] = new Date(output[\"createdAt\"] + '.000Z');\n\toutput[\"modifiedAt\"] = new Date(output[\"modifiedAt\"] + '.000Z');\n\timl.parseDates(output)\n\timl.parseDates2(output)\n\t\n\t//format record specific fields\n\tnew_fields_object = {};\n\tlet metadataObject_fields = metadata.spec//find(elem => elem.name === 'fields').spec;\n\tfor (const key in output.fields) {\n\t\tlet metadataObject = metadataObject_fields.find(elem => elem.label === key);\n\t\t\n\t\tif (metadataObject) { \n\t\t\tnew_fields_object[metadataObject.name] = iml.transformOutPutValue(output.fields[key], metadataObject.meta.type);\n\t\t\tdelete output.fields[key];\n\t\t}\n\t}\n\t\n\toutput.fields = new_fields_object;\n\t\n\treturn output;\n}",
      "name": "formatOutputAlt1",
      "test": null,
      "appName": "ninox",
      "arguments": "(output, metadata)",
      "appVersion": 1
    },
    "convertNinoxField": {
      "rev": 3,
      "code": "function convertNinoxField(field) {\n\t// Is used to generate the mappable parameters dynamically of Create and Update Record\n\tif (!field || !(field.type)) return;\n\t\n\tlet obj = {};\n\tobj.name = field.id;\n\tobj.label = field.name;\n\t\n\tswitch (field.type) {\n\t\tcase \"appointment\":\n\t\t\tobj.type = \"collection\"; //consisting of a appointment_start and appointment_end\n\t\t\t\n\t\t\tlet appointment_start = {};\n\t\t\tappointment_start.name = \"appointment_start\";\n\t\t\tappointment_start.type = \"date\";\n\t\t\tappointment_start.label = \"Appointment Start\";\n\t\t\tappointment_start.help = \"Both start and end date need to be filled in. Only start or end date will not work.\";\n\n\t\t\tlet appointment_end = {};\n\t\t\tappointment_end.name = \"appointment_end\";\n\t\t\tappointment_end.type = \"date\";\n\t\t\tappointment_end.label = \"Appointment End\";\n\t\t\tappointment_end.help = \"Both start and end date need to be filled in. Only start or end date will not work.\";\n\t\t\t\n\t\t\tobj.spec = [appointment_start,appointment_end];\n\t\t\t\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"appointment\"\n\t\t\t};\t\n\t\t\tbreak;\n\t\tcase \"boolean\":\n\t\t\tobj.type = \"boolean\";\n\t\t\tbreak;\n\t\tcase \"choice\":\n\t\t\tobj.type = \"select\";\n\t\t\tobj.options = (field.choices || []).map(option => ({label: option.caption, value: option.id}));\n\t\t\t\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"choice\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"color\":\n\t\t\tobj.type = \"color\";\n\t\t\tobj.help = \"Hex Colour Code, for example `#42A0FB`.\";\n\n\t\t\tbreak;\n\t\tcase \"date\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.help = \"Please use 'YYYY-MM-DD' format.\";\n\t\t\tobj.validate = {\n                pattern: \"^\\\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$\"\n            };\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"date\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"email\":\n\t\t\tobj.type = \"email\";\n\t\t\tbreak;\n\t\tcase \"file\":\n\t\t\tobj.type = \"text\";\n\t\t\t\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"file\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"html\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.multiline = true;\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"html\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"icon\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.help = \"Icons are identified by their name, for example `info`.\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"icon\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"link\":\n\t\t\tobj.type = \"url\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"link\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"location\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.label = \"Location\"; //bug in ninox, displays location name (e.g. Brisbane) as field name instead of Location\n\t\t\tobj.help = \"Example: `Marienstraße 10, 10117 Berlin, Germany <52.52202224731445,13.38234806060791>`\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"location\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"multi\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.help = \"The multiple choice field is not fully supported by their API currently. To select certain choices for the record from the multiple choice field. Enter a string consisting of the choices with ',' between them. For example: if the multiple choice field is 'Favourite pets' with options 'dog', 'cat', 'horse', 'snake', 'spider'. You can enter `dog, cat, horse` to select the choices 'dog', 'cat' and 'horse' from the multiple choices field for the record.\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"multi\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"number\":\n\t\t\tobj.type = \"number\";\n\t\t\tbreak;\n\t\tcase \"phone\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"phone\"\n\t\t\t};\n\t\t\tbreak;\t\t\t\n\t\tcase \"ref\":\n\t\t\tobj.type = \"uinteger\";\n\t\t\tobj.help = \"You can link this record (e.g. meeting record) back to a record from the main table (e.g. link a meeting record to a client record), to do that you need to give the ID of that record (e.g. client record) in this field.\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"ref\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"string\":\n\t\t\tobj.type = \"text\";\n\t\t\t\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"string\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"time\":\n\t\t\tobj.type = \"time\";\n\t\t\tbreak;\n\t\tcase \"timeinterval\":\n\t\t\tobj.type = \"time\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"timeinterval\"\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"timestamp\":\n\t\t\tobj.type = \"date\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"timestamp\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"user\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.help = \"Users can be identified using a string. For example `XwDou29NsSAEoZHXF`\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"user\"\n\t\t\t};\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n\t\n\treturn obj;\n}",
      "name": "convertNinoxField",
      "test": null,
      "appName": "ninox",
      "arguments": "(field)",
      "appVersion": 1
    },
    "removeEmptyArrays": {
      "rev": 3,
      "code": "function removeEmptyArrays(src) {\n\tif (src && typeof src === 'object') {\n\t\tObject.keys(src).forEach(key => {\n\t\t\tif (src[key] instanceof Array && src[key].length === 0) {\n\t\t\t\tdelete src[key];\n\t\t\t} else if (typeof src[key] === 'object') {\n\t\t\t\timl.removeEmptyArrays(src[key]);\n\t\t\t}\n\t\t});\n\t}\n\treturn src;\n}",
      "name": "removeEmptyArrays",
      "test": null,
      "appName": "ninox",
      "arguments": "(src)",
      "appVersion": 1
    },
    "convertNinoxFields": {
      "rev": 3,
      "code": "function convertNinoxFields(fields) {\n\t// Is used to generate the mappable parameters dynamically of Create and Update Record\n\tif (!fields) return [];\n\t\n\tlet outputArray = fields.map(field => {\n\t\treturn iml.convertNinoxField(field);\n\t}).filter(field => field !== null);\n\n\treturn outputArray;\n}",
      "name": "convertNinoxFields",
      "test": null,
      "appName": "ninox",
      "arguments": "(fields)",
      "appVersion": 1
    },
    "removeEmptyObjects": {
      "rev": 3,
      "code": "function removeEmptyObjects(src) {\n\tif (src && typeof src === 'object') {\n\t\tObject.keys(src).forEach(key => {\n\t\t\tif (src[key] && typeof src[key] === 'object') {\n\t\t\t\timl.removeEmptyObjects(src[key]);\n\t\t\t\tif (Object.keys(src[key]).length === 0 && src[key].constructor === Object) {\n\t\t\t\t  delete src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn src;\n}",
      "name": "removeEmptyObjects",
      "test": null,
      "appName": "ninox",
      "arguments": "(src)",
      "appVersion": 1
    },
    "getConnectionTeamID": {
      "rev": 3,
      "code": "function getConnectionTeamID(privateURL) {\n\t//Example of an URL: `https://companyname.ninoxdb.de/teamID/api/v1` or `https://companyname.ninox.com/teamID/api/v1`\n\t//The URL is already regex tested during the connection creation so it should be OK\n\tif (privateURL.indexOf('.de/') !== -1) {\n    \treturn privateURL.substring(privateURL.indexOf('.de/')+4,privateURL.indexOf('/api/v1'));\n\t} else { //then it is .com\n\t\treturn privateURL.substring(privateURL.indexOf('.com/')+5,privateURL.indexOf('/api/v1'));\n\t}\n\t\n}",
      "name": "getConnectionTeamID",
      "test": null,
      "appName": "ninox",
      "arguments": "(privateURL)",
      "appVersion": 1
    },
    "transformTimestamps": {
      "rev": 3,
      "code": "function transformTimestamps(item) {\n\titem.modifiedDate = new Date(item.modifiedDate);\n\treturn item;\n}",
      "name": "transformTimestamps",
      "test": null,
      "appName": "ninox",
      "arguments": "(item)",
      "appVersion": 1
    },
    "transformOutPutValue": {
      "rev": 3,
      "code": "function transformOutPutValue(value, ninoxType) {\n\t// Is used to transform the server response from Create Record, Get Record, Look Up Record and Update Record back to Integromat types.\n\tif (value === null || !ninoxType) return;\n\t\n\tlet newValue = value;\n\t\n\tswitch (ninoxType) {\n\t\tcase \"appointment\":\n\t\t\tnewValue = {};\n\t\t\tnewValue.type = \"collection\";\n\t\t\t\n\t\t\tlet appointment_start = {};\n\t\t\tappointment_start.type = \"date\";\n\t\t\tlet appointment_end = {};\n\t\t\tappointment_end.type = \"date\";\n\t\t\t\n\t\t\ttwo_dates_array = value.split(' - ');\n\t\t\tappointment_start = new Date(two_dates_array[0]+'Z') \n\t\t\tappointment_end = new Date(two_dates_array[1]+'Z') \n\t\t\t\n\t\t\tnewValue = {appointment_start,appointment_end};\n\t\t\t\n\t\t\tbreak;\n\t\tcase \"boolean\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"choice\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"color\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"date\":\n\t\t\t// do nothing, regex validate happens in the generation of the field\n\t\t\tbreak;\n\t\tcase \"email\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"file\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"html\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"icon\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"link\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"location\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"multi\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"number\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"phone\":\n\t\t\t// do nothing\n\t\t\tbreak;\t\n\t\tcase \"ref\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"string\":\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase \"timeinterval\":\n\t\t\tnewValue = new Date(value).toISOString().slice(-13, -5)\n\t\t\tbreak;\n\t\tcase \"timestamp\":\n\t\t\tnewValue = new Date(value + '.000Z');\n\t\t\tbreak;\n\t\tcase \"time\":\n\t\t\t// Do nothing\n\t\t\tbreak;\n\t\tcase \"user\":\n\t\t\t// Do Nothing\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn;\n\t}\n\t\n\treturn newValue;\n}",
      "name": "transformOutPutValue",
      "test": null,
      "appName": "ninox",
      "arguments": "(value, ninoxType)",
      "appVersion": 1
    },
    "convertNinoxFieldInterface": {
      "rev": 4,
      "code": "function convertNinoxFieldInterface(field) {\n\t// Is used to generate the interface of Create Record dynamically.\n\tif (!field || !(field.type)) return;\n\t\n\tlet obj = {};\n\tobj.name = field.id;\n\tobj.label = field.name;\n\t\n\tswitch (field.type) {\n\t\tcase \"appointment\":\n\t\t\tobj.type = \"collection\"; //consisting of a appointment_start and appointment_end\n\t\t\t\n\t\t\tlet appointment_start = {};\n\t\t\tappointment_start.name = \"appointment_start\";\n\t\t\tappointment_start.type = \"date\";\n\t\t\tappointment_start.label = \"Appointment Start\";\n\n\t\t\tlet appointment_end = {};\n\t\t\tappointment_end.name = \"appointment_end\";\n\t\t\tappointment_end.type = \"date\";\n\t\t\tappointment_end.label = \"Appointment End\";\n\t\t\t\n\t\t\tobj.spec = [appointment_start,appointment_end];\n\t\t\t\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"appointment\"\n\t\t\t};\t\n\t\t\tbreak;\n\t\tcase \"boolean\":\n\t\t\tobj.type = \"boolean\";\n\t\t\t\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"boolean\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"choice\":\n\t\t\tobj.type = \"string\";\n\t\t\t\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"choice\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"color\":\n\t\t\tobj.type = \"color\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"color\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"date\":\n\t\t\tobj.type = \"date\";\n \n\t\t\tobj.meta = {\n\t\t\t\ttype: \"date\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"email\":\n\t\t\tobj.type = \"email\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"email\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"file\":\n\t\t\tobj.type = \"text\";\n\t\t\t\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"file\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"html\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"html\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"icon\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"icon\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"link\":\n\t\t\tobj.type = \"url\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"link\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"location\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"location\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"multi\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"multi\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"number\":\n\t\t\tobj.type = \"number\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"number\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"phone\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"phone\"\n\t\t\t};\n\t\t\tbreak;\t\t\t\n\t\tcase \"ref\":\n\t\t\tobj.type = \"uinteger\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"ref\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"string\":\n\t\t\tobj.type = \"text\";\n\t\t\t\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"string\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"time\":\n\t\t\tobj.type = \"time\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"time\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"timeinterval\":\n\t\t\tobj.type = \"time\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"timeinterval\"\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"timestamp\":\n\t\t\tobj.type = \"date\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"timestamp\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"user\":\n\t\t\tobj.type = \"text\";\n\t\t\tobj.meta = {\n\t\t\t\ttype: \"user\"\n\t\t\t};\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n\t\n\treturn obj;\n}",
      "name": "convertNinoxFieldInterface",
      "test": null,
      "appName": "ninox",
      "arguments": "(field)",
      "appVersion": 1
    },
    "convertNinoxFieldsInterface": {
      "rev": 3,
      "code": "function convertNinoxFieldsInterface(fields) {\n\t// Is used to generate the interface of Create Record dynamically.\n\tif (!fields) return [];\n\t\n\tlet outputArray = fields.map(field => {\n\t\treturn iml.convertNinoxFieldInterface(field);\n\t}).filter(field => field !== null);\n\n\treturn outputArray;\n}",
      "name": "convertNinoxFieldsInterface",
      "test": null,
      "appName": "ninox",
      "arguments": "(fields)",
      "appVersion": 1
    },
    "convertNinoxFieldsInterfaceAlt": {
      "rev": 4,
      "code": "function convertNinoxFieldsInterfaceAlt(fields) {\n  // Is used to generate the interface of Get Record, Update Record and Look Up Record dynamically.\n  if (!fields) return {};\n\n  let outputArray = fields\n    .map((field) => {\n      return iml.convertNinoxFieldInterface(field);\n    })\n    .filter((field) => field !== null);\n\n  return {\n    name: \"fields\",\n    label: \"Record Fields\",\n    type: \"collection\",\n    spec: outputArray\n  };\n}",
      "name": "convertNinoxFieldsInterfaceAlt",
      "test": null,
      "appName": "ninox",
      "arguments": "(fields)",
      "appVersion": 1
    }
  },
  "approvedAt": "2022-05-04T10:09:17.511977+00:00",
  "categories": [],
  "opensource": true,
  "description": "Improve team collaboration and productivity by connecting Ninox to the apps you want and need. Automate responses, event creation, notifications and more with the help of {{integromat}}.",
  "iconColor32": null,
  "iconColor64": null,
  "installSpec": [
    {
      "name": "timeout",
      "type": "uinteger",
      "label": "Module timeout in milliseconds",
      "default": 40000
    }
  ],
  "inviteToken": "c7173bf5d74b6c9aeed1a7baea054ac9",
  "versionFull": "1.1.8",
  "compiledName": "ninox",
  "iconColor128": null,
  "iconColor256": null,
  "iconColor512": null,
  "installJsonc": "{\n    \"common\": {\n        \"timeout\": \"{{parameters.timeout}}\"\n    }\n}",
  "manifestVersion": 2,
  "compilationError": null,
  "installSpecJsonc": "[\n    {\n        \"name\": \"timeout\",\n        \"label\": \"Module timeout in milliseconds\",\n        \"type\": \"uinteger\",\n        \"default\": 40000\n    }\n]"
}
